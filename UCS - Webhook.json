{
  "name": "UCS - Webhook",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "ucs/recalc",
        "authentication": "headerAuth",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "624c398c-289f-43fd-8a29-57411d1f808f",
      "name": "üîî Webhook Recalc",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        -1264,
        -2368
      ],
      "webhookId": "89ba4407-4fd0-411b-9155-cfe552d8648e",
      "credentials": {
        "httpHeaderAuth": {
          "id": "CY1JYOI8weHUQGKZ",
          "name": "Header Auth account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Valida√ß√£o do payload (autentica√ß√£o deve ser feita no Webhook node via Header Auth)\nconst body = $json || {};\n// Aceita formatos: { mode:'update', overrides:{...} } ou { origem:'audit-manual', ativos:{...}, data_especifica?:'YYYY-MM-DD' }\nconst hasOverrides = body && body.mode === 'update' && body.overrides && Object.keys(body.overrides).length > 0;\nconst hasAtivos = body && body.ativos && Object.keys(body.ativos).length > 0;\n// Validar data_especifica se enviada\nif (body.data_especifica && !/^\\d{4}-\\d{2}-\\d{2}$/.test(body.data_especifica)) {\n  return [{ json: { status: 'erro', code: 400, msg: 'data_especifica deve estar no formato YYYY-MM-DD' } }];\n}\nif (!hasOverrides && !hasAtivos) {\n  return [{ json: { status: 'erro', code: 400, msg: 'Payload inv√°lido: envie overrides ou ativos' } }];\n}\nreturn [{ json: body }];"
      },
      "id": "f7d54bf0-3b12-4512-8a53-ccbb9fdecfff",
      "name": "‚úÖ Validar Payload",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1104,
        -2368
      ]
    },
    {
      "parameters": {
        "jsCode": "const body = $json || {};\nconst ativosManual = body.ativos || {};\nconst overrides = body.overrides || {};\nconst dataEspecifica = body.data_especifica; // ‚Üê ADICIONAR ESTA LINHA\nconst map = (v) => (v != null ? { preco: v } : undefined);\nconst ativos = {\n  usd: ativosManual.usd || map(overrides.usd),\n  eur: ativosManual.eur || map(overrides.eur),\n  milho: ativosManual.milho || map(overrides.milho),\n  soja: ativosManual.soja || map(overrides.soja),\n  boi: ativosManual.boi || map(overrides.boi),\n  madeira: ativosManual.madeira || map(overrides.madeira),\n  carbono: ativosManual.carbono || map(overrides.carbono)\n};\nconst result = { origem:'audit-manual', ativos, timestamp: new Date().toISOString() };\nif (dataEspecifica) result.data_especifica = dataEspecifica; // ‚Üê ADICIONAR SE EXISTIR\nreturn [{ json: result }];"
      },
      "id": "f72e072a-15b2-406d-89fd-a19d83190a6d",
      "name": "üü¢ Manual Overrides",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -912,
        -2368
      ]
    },
    {
      "parameters": {
        "jsCode": "const body = $('üü¢ Manual Overrides').first().json || {};\nconst o = body.ativos || {};\nconst dataEspecifica = body.data_especifica; // Data enviada pelo painel\n\nconst now = new Date();\nconst iso = now.toISOString();\n\n// Usar data espec√≠fica se enviada, sen√£o usar atual\nconst dateId = dataEspecifica || iso.split('T')[0];\nconst br = dataEspecifica ? \n  new Date(dataEspecifica + 'T00:00:00').toLocaleDateString('pt-BR') : \n  now.toLocaleDateString('pt-BR');\n\nfunction base(label, val, moeda){ \n  if(!val || val.preco==null) return null; \n  const p = Number(val.preco); \n  return { \n    ativo: label, \n    data: br, \n    ultimo: p, \n    abertura: p, \n    maxima: p, \n    minima: p, \n    volume: null, \n    variacao_pct: null, \n    moeda, \n    fonte: 'Audit-Manual', \n    timestamp: iso, \n    status: 'sucesso', \n    documentId: dateId  // ‚Üê USA DATA ESPEC√çFICA OU ATUAL\n  }; \n}\n\nreturn [{ json: {\n  usd: base('USD/BRL', o.usd, 'BRL'),\n  eur: base('EUR/BRL', o.eur, 'BRL'),\n  milho: base('Milho Futuros', o.milho, 'BRL'),\n  soja: base('Soja Futuros', o.soja, 'USD'),\n  boi: base('Boi Gordo', o.boi, 'BRL'),\n  madeira: base('Madeira Serrada', o.madeira, 'USD'),\n  carbono: base('Carbono', o.carbono, 'EUR')\n} }];"
      },
      "id": "18e02c5d-2632-49e6-81af-6c213de44002",
      "name": "üó∫Ô∏è Mapear Bases",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -752,
        -2368
      ]
    },
    {
      "parameters": {
        "authentication": "serviceAccount",
        "operation": "upsert",
        "projectId": "ucs-index-tracker",
        "collection": "usd",
        "updateKey": "documentId",
        "columns": "=ativo,data,ultimo,abertura,maxima,minima,volume,variacao_pct,moeda,fonte,timestamp,status,documentId"
      },
      "id": "7cabe214-e3e5-4986-b371-d0bcbabf8672",
      "name": "üíæ USD",
      "type": "n8n-nodes-base.googleFirebaseCloudFirestore",
      "typeVersion": 1,
      "position": [
        544,
        -2976
      ],
      "credentials": {
        "googleApi": {
          "id": "Dqr74c3ldFzCyUyS",
          "name": "Google Firebase Cloud Firestore account"
        }
      }
    },
    {
      "parameters": {
        "authentication": "serviceAccount",
        "operation": "upsert",
        "projectId": "ucs-index-tracker",
        "collection": "eur",
        "updateKey": "documentId",
        "columns": "=ativo,data,ultimo,abertura,maxima,minima,volume,variacao_pct,moeda,fonte,timestamp,status,documentId"
      },
      "id": "1f626b39-82af-4eab-bc7c-cae9aea271f7",
      "name": "üíæ EUR",
      "type": "n8n-nodes-base.googleFirebaseCloudFirestore",
      "typeVersion": 1,
      "position": [
        544,
        -2288
      ],
      "credentials": {
        "googleApi": {
          "id": "Dqr74c3ldFzCyUyS",
          "name": "Google Firebase Cloud Firestore account"
        }
      }
    },
    {
      "parameters": {
        "authentication": "serviceAccount",
        "operation": "upsert",
        "projectId": "ucs-index-tracker",
        "collection": "milho",
        "updateKey": "documentId",
        "columns": "=ativo,data,ultimo,ton,rent_media,moeda,fonte,timestamp,status,documentId"
      },
      "id": "79103398-5394-4c19-b5a9-2c0557f8ed4d",
      "name": "üíæ MILHO",
      "type": "n8n-nodes-base.googleFirebaseCloudFirestore",
      "typeVersion": 1,
      "position": [
        544,
        -1568
      ],
      "credentials": {
        "googleApi": {
          "id": "Dqr74c3ldFzCyUyS",
          "name": "Google Firebase Cloud Firestore account"
        }
      }
    },
    {
      "parameters": {
        "authentication": "serviceAccount",
        "operation": "upsert",
        "projectId": "ucs-index-tracker",
        "collection": "carbono",
        "updateKey": "documentId",
        "columns": "=ativo,data,ultimo,ultimo_brl,rent_media,cotacao_euro,moeda,fonte,timestamp,status,documentId"
      },
      "id": "1f6d3c45-b15c-42fa-b279-57d231e284d4",
      "name": "üíæ CARBONO",
      "type": "n8n-nodes-base.googleFirebaseCloudFirestore",
      "typeVersion": 1,
      "position": [
        544,
        -2064
      ],
      "credentials": {
        "googleApi": {
          "id": "Dqr74c3ldFzCyUyS",
          "name": "Google Firebase Cloud Firestore account"
        }
      }
    },
    {
      "parameters": {
        "authentication": "serviceAccount",
        "operation": "upsert",
        "projectId": "ucs-index-tracker",
        "collection": "ch2o_agua",
        "updateKey": "documentId",
        "columns": "=ativo,data,valor,documentId,timestamp,status"
      },
      "id": "a265ac04-a687-489f-a9ab-6c96737b3d52",
      "name": "üíæ CH2O",
      "type": "n8n-nodes-base.googleFirebaseCloudFirestore",
      "typeVersion": 1,
      "position": [
        544,
        -1408
      ],
      "credentials": {
        "googleApi": {
          "id": "Dqr74c3ldFzCyUyS",
          "name": "Google Firebase Cloud Firestore account"
        }
      }
    },
    {
      "parameters": {
        "authentication": "serviceAccount",
        "operation": "upsert",
        "projectId": "ucs-index-tracker",
        "collection": "custo_agua",
        "updateKey": "documentId",
        "columns": "=ativo,data,valor,documentId,timestamp,status"
      },
      "id": "65ecf871-595c-4e4b-ba13-9c2d20327e24",
      "name": "üíæ Custo_√Ågua",
      "type": "n8n-nodes-base.googleFirebaseCloudFirestore",
      "typeVersion": 1,
      "position": [
        544,
        -1232
      ],
      "credentials": {
        "googleApi": {
          "id": "Dqr74c3ldFzCyUyS",
          "name": "Google Firebase Cloud Firestore account"
        }
      }
    },
    {
      "parameters": {
        "authentication": "serviceAccount",
        "operation": "upsert",
        "projectId": "ucs-index-tracker",
        "collection": "pdm",
        "updateKey": "documentId",
        "columns": "=ativo,data,valor,documentId,timestamp,status"
      },
      "id": "a5f1cafd-ac35-480d-b34e-a2d196cf7180",
      "name": "üíæ PDM",
      "type": "n8n-nodes-base.googleFirebaseCloudFirestore",
      "typeVersion": 1,
      "position": [
        544,
        -1056
      ],
      "credentials": {
        "googleApi": {
          "id": "Dqr74c3ldFzCyUyS",
          "name": "Google Firebase Cloud Firestore account"
        }
      }
    },
    {
      "parameters": {
        "authentication": "serviceAccount",
        "operation": "upsert",
        "projectId": "ucs-index-tracker",
        "collection": "ucs",
        "updateKey": "documentId",
        "columns": "=ativo,data,valor,documentId,timestamp,status"
      },
      "id": "b7c74b93-ed38-4126-9cd2-4fe85a693de6",
      "name": "üíæ UCS",
      "type": "n8n-nodes-base.googleFirebaseCloudFirestore",
      "typeVersion": 1,
      "position": [
        544,
        -880
      ],
      "credentials": {
        "googleApi": {
          "id": "Dqr74c3ldFzCyUyS",
          "name": "Google Firebase Cloud Firestore account"
        }
      }
    },
    {
      "parameters": {
        "authentication": "serviceAccount",
        "operation": "upsert",
        "projectId": "ucs-index-tracker",
        "collection": "ucs_ase",
        "updateKey": "documentId",
        "columns": "=ativo,data,valor_brl,valor_usd,valor_eur,documentId,timestamp,status"
      },
      "id": "42d0693a-ac7b-4c7a-8a0c-d05b3c4ed2aa",
      "name": "üíæ UCS ASE",
      "type": "n8n-nodes-base.googleFirebaseCloudFirestore",
      "typeVersion": 1,
      "position": [
        544,
        -704
      ],
      "credentials": {
        "googleApi": {
          "id": "Dqr74c3ldFzCyUyS",
          "name": "Google Firebase Cloud Firestore account"
        }
      }
    },
    {
      "parameters": {
        "authentication": "serviceAccount",
        "operation": "upsert",
        "projectId": "ucs-index-tracker",
        "collection": "vus",
        "updateKey": "documentId",
        "columns": "=ativo,data,valor,documentId,timestamp,status"
      },
      "id": "771549fa-bc89-465b-8fb0-f917a8356357",
      "name": "üíæ VUS",
      "type": "n8n-nodes-base.googleFirebaseCloudFirestore",
      "typeVersion": 1,
      "position": [
        544,
        -528
      ],
      "credentials": {
        "googleApi": {
          "id": "Dqr74c3ldFzCyUyS",
          "name": "Google Firebase Cloud Firestore account"
        }
      }
    },
    {
      "parameters": {
        "authentication": "serviceAccount",
        "operation": "upsert",
        "projectId": "ucs-index-tracker",
        "collection": "carbono_crs",
        "updateKey": "documentId",
        "columns": "=ativo,data,valor,documentId,timestamp,status"
      },
      "id": "a4068241-0361-46d5-8470-026fe7f81e08",
      "name": "üíæ Carbono_CRS",
      "type": "n8n-nodes-base.googleFirebaseCloudFirestore",
      "typeVersion": 1,
      "position": [
        544,
        -352
      ],
      "credentials": {
        "googleApi": {
          "id": "Dqr74c3ldFzCyUyS",
          "name": "Google Firebase Cloud Firestore account"
        }
      }
    },
    {
      "parameters": {
        "authentication": "serviceAccount",
        "operation": "upsert",
        "projectId": "ucs-index-tracker",
        "collection": "Agua_CRS",
        "updateKey": "documentId",
        "columns": "=ativo,data,valor,documentId,timestamp,status"
      },
      "id": "4b84dfbd-6f34-472b-a9c9-e81baebe0e09",
      "name": "üíæ Agua_CRS",
      "type": "n8n-nodes-base.googleFirebaseCloudFirestore",
      "typeVersion": 1,
      "position": [
        544,
        -176
      ],
      "credentials": {
        "googleApi": {
          "id": "Dqr74c3ldFzCyUyS",
          "name": "Google Firebase Cloud Firestore account"
        }
      }
    },
    {
      "parameters": {
        "authentication": "serviceAccount",
        "operation": "upsert",
        "projectId": "ucs-index-tracker",
        "collection": "vmad",
        "updateKey": "documentId",
        "columns": "=ativo,data,valor,documentId,timestamp,status"
      },
      "id": "f529cd12-87cc-409c-b053-bd4cc0156e15",
      "name": "üíæ Vmad",
      "type": "n8n-nodes-base.googleFirebaseCloudFirestore",
      "typeVersion": 1,
      "position": [
        544,
        16
      ],
      "credentials": {
        "googleApi": {
          "id": "Dqr74c3ldFzCyUyS",
          "name": "Google Firebase Cloud Firestore account"
        }
      }
    },
    {
      "parameters": {
        "authentication": "serviceAccount",
        "operation": "upsert",
        "projectId": "ucs-index-tracker",
        "collection": "valor_uso_solo",
        "updateKey": "documentId",
        "columns": "=ativo,data,valor,documentId,timestamp,status"
      },
      "id": "7557ab76-5e7d-415b-82c7-a98156cfd627",
      "name": "üíæ Valor_Uso_Solo",
      "type": "n8n-nodes-base.googleFirebaseCloudFirestore",
      "typeVersion": 1,
      "position": [
        544,
        192
      ],
      "credentials": {
        "googleApi": {
          "id": "Dqr74c3ldFzCyUyS",
          "name": "Google Firebase Cloud Firestore account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const dateId = $('üìÖ Resolver Data').first().json.dateId;\nconst mapped = $('üó∫Ô∏è Mapear Bases').first().json || {};\nconst sobrescritos = Object.keys(mapped).filter(k => mapped[k]);\nreturn [{ json: {\n  status: 'ok',\n  modo: 'auditoria-inline',\n  documentId: dateId,\n  sobrescritos,\n  derivados: ['ch2o_agua','custo_agua','pdm','ucs','ucs_ase','vus','carbono_crs','Agua_CRS','vmad','valor_uso_solo'],\n  timestamp: new Date().toISOString()\n}}];"
      },
      "id": "a73706e7-3a02-4eaf-9e9f-34304d1914cd",
      "name": "üìã Resposta",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        720,
        192
      ]
    },
    {
      "parameters": {
        "jsCode": "try {\n  const jsonResponse = $input.first().json;\n  const originalData = $('‚öôÔ∏è Processar Dados').first().json;\n\n  if (jsonResponse.status === 'erro') {\n    return [{\n      json: {\n        status: 'erro_json',\n        erro: jsonResponse.erro,\n        dados_originais: originalData,\n        timestamp: new Date().toISOString()\n      }\n    }];\n  }\n\n  return [{\n    json: {\n      status: 'sucesso',\n      mensagem: 'Dados salvos no JSON com sucesso',\n      dados_salvos: originalData,\n      arquivo: jsonResponse.arquivo,\n      timestamp: new Date().toISOString()\n    }\n  }];\n\n} catch (error) {\n  return [{\n    json: {\n      status: 'erro_final',\n      erro: 'Erro na resposta final: ' + error.message,\n      timestamp: new Date().toISOString()\n    }\n  }];\n}"
      },
      "id": "78d2c713-04ab-4e59-9733-3fadb3984311",
      "name": "üìã Resposta Final",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        720,
        -1568
      ]
    },
    {
      "parameters": {
        "jsCode": "try {\n  // Coletar apenas os dados do milho\n  const milho = $('üíæ Salvar no JSON').first()?.json || null;\n\n  // Estruturar JSON final apenas com milho\n  const cotacoesConsolidadas = {\n    metadata: {\n      timestamp: new Date().toISOString(),\n      data_coleta: new Date().toLocaleDateString('pt-BR'),\n      total_ativos: milho ? 1 : 0,\n      fonte: 'Investing.com'\n    },\n    commodities: {\n      agricolas: {\n        milho: milho?.dados_formatados?.dados || null\n      }\n    },\n    status: {\n      milho: milho?.status || 'erro'\n    }\n  };\n\n  return [{ json: cotacoesConsolidadas }];\n\n} catch (error) {\n  return [{\n    json: {\n      erro: 'Erro ao consolidar cota√ß√µes: ' + error.message,\n      timestamp: new Date().toISOString(),\n      status: 'erro_consolidacao'\n    }\n  }];\n}"
      },
      "id": "a29c38ae-a2ed-4968-a9b1-1234ceb1c88d",
      "name": "üìä Consolidador de Cota√ß√µes",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        944,
        -1568
      ]
    },
    {
      "parameters": {
        "jsCode": "// Retornar o JSON consolidado final\nconst dadosConsolidados = $input.first().json;\n\nreturn [{\n  json: {\n    mensagem: 'Cota√ß√µes consolidadas com sucesso!',\n    dados: dadosConsolidados,\n    timestamp: new Date().toISOString()\n  }\n}];"
      },
      "id": "4cb0b92b-d886-4f63-bde6-88ccd85e1fef",
      "name": "üìã Resposta Final Consolidada",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1136,
        -1568
      ]
    },
    {
      "parameters": {
        "jsCode": "try {\n  // Receber dados do salvamento\n  const dadosSalvos = $input.first().json;\n  \n  return [{\n    json: {\n      status: 'sistema_completo',\n      mensagem: 'Sistema de consolida√ß√£o executado com sucesso!',\n      resultado: dadosSalvos,\n      total_cotacoes: 7,\n      timestamp_final: new Date().toISOString(),\n      resumo: {\n        commodities_agricolas: 3,\n        commodities_materiais: 2,\n        moedas: 2,\n        status_geral: dadosSalvos.status\n      }\n    }\n  }];\n  \n} catch (error) {\n  return [{ json: {\n    status: 'erro_sistema',\n    erro: 'Erro no sistema final: ' + error.message,\n    timestamp: new Date().toISOString()\n  } }];\n}"
      },
      "id": "2cacb93e-77ef-449a-9dde-f78ece9e8c1c",
      "name": "üìã Resposta Final do Sistema",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1312,
        -1568
      ]
    },
    {
      "parameters": {
        "jsCode": "try {\n  const jsonResponse = $input.first().json;\n  const originalData = $('‚öôÔ∏è Processar Dados1').first().json;\n\n  if (jsonResponse.status === 'erro') {\n    return [{\n      json: {\n        status: 'erro_json',\n        erro: jsonResponse.erro,\n        dados_originais: originalData,\n        timestamp: new Date().toISOString()\n      }\n    }];\n  }\n\n  return [{\n    json: {\n      status: 'sucesso',\n      mensagem: 'Dados salvos no JSON com sucesso',\n      dados_salvos: originalData,\n      arquivo: jsonResponse.arquivo,\n      timestamp: new Date().toISOString()\n    }\n  }];\n\n} catch (error) {\n  return [{\n    json: {\n      status: 'erro_final',\n      erro: 'Erro na resposta final: ' + error.message,\n      timestamp: new Date().toISOString()\n    }\n  }];\n}"
      },
      "id": "fb6625c6-30c4-41be-9e01-c17ebfc5a623",
      "name": "üìã Resposta Final1",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        720,
        -2512
      ]
    },
    {
      "parameters": {
        "jsCode": "try {\n  // Coletar apenas os dados do milho\n  const milho = $('üíæ Salvar no JSON1').first()?.json || null;\n\n  // Estruturar JSON final apenas com milho\n  const cotacoesConsolidadas = {\n    metadata: {\n      timestamp: new Date().toISOString(),\n      data_coleta: new Date().toLocaleDateString('pt-BR'),\n      total_ativos: milho ? 1 : 0,\n      fonte: 'Investing.com'\n    },\n    commodities: {\n      agricolas: {\n        milho: milho?.dados_formatados?.dados || null\n      }\n    },\n    status: {\n      milho: milho?.status || 'erro'\n    }\n  };\n\n  return [{ json: cotacoesConsolidadas }];\n\n} catch (error) {\n  return [{\n    json: {\n      erro: 'Erro ao consolidar cota√ß√µes: ' + error.message,\n      timestamp: new Date().toISOString(),\n      status: 'erro_consolidacao'\n    }\n  }];\n}"
      },
      "id": "9147c78e-b32b-4a10-a178-c29f7f1d0de6",
      "name": "üìä Consolidador de Cota√ß√µes1",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        944,
        -2512
      ]
    },
    {
      "parameters": {
        "jsCode": "// Retornar o JSON consolidado final\nconst dadosConsolidados = $input.first().json;\n\nreturn [{\n  json: {\n    mensagem: 'Cota√ß√µes consolidadas com sucesso!',\n    dados: dadosConsolidados,\n    timestamp: new Date().toISOString()\n  }\n}];"
      },
      "id": "76e1bbe4-521e-4d54-9b20-1e3124644f8a",
      "name": "üìã Resposta Final Consolidada1",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1136,
        -2512
      ]
    },
    {
      "parameters": {
        "jsCode": "try {\n  // Receber dados do salvamento\n  const dadosSalvos = $input.first().json;\n  \n  return [{\n    json: {\n      status: 'sistema_completo',\n      mensagem: 'Sistema de consolida√ß√£o executado com sucesso!',\n      resultado: dadosSalvos,\n      total_cotacoes: 7,\n      timestamp_final: new Date().toISOString(),\n      resumo: {\n        commodities_agricolas: 3,\n        commodities_materiais: 2,\n        moedas: 2,\n        status_geral: dadosSalvos.status\n      }\n    }\n  }];\n  \n} catch (error) {\n  return [{ json: {\n    status: 'erro_sistema',\n    erro: 'Erro no sistema final: ' + error.message,\n    timestamp: new Date().toISOString()\n  } }];\n}"
      },
      "id": "d122bea4-01cf-49df-bf54-e67f78095799",
      "name": "üìã Resposta Final do Sistema1",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1312,
        -2512
      ]
    },
    {
      "parameters": {
        "jsCode": "try {\n  const jsonResponse = $input.first().json;\n  const originalData = $('‚öôÔ∏è Processar Dados2').first().json;\n\n  if (jsonResponse.status === 'erro') {\n    return [{\n      json: {\n        status: 'erro_json',\n        erro: jsonResponse.erro,\n        dados_originais: originalData,\n        timestamp: new Date().toISOString()\n      }\n    }];\n  }\n\n  return [{\n    json: {\n      status: 'sucesso',\n      mensagem: 'Dados salvos no JSON com sucesso',\n      dados_salvos: originalData,\n      arquivo: jsonResponse.arquivo,\n      timestamp: new Date().toISOString()\n    }\n  }];\n\n} catch (error) {\n  return [{\n    json: {\n      status: 'erro_final',\n      erro: 'Erro na resposta final: ' + error.message,\n      timestamp: new Date().toISOString()\n    }\n  }];\n}"
      },
      "id": "d5977335-2f50-4cf2-a013-672023e1a43d",
      "name": "üìã Resposta Final2",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        720,
        -1792
      ]
    },
    {
      "parameters": {
        "jsCode": "try {\n  // Coletar apenas os dados do milho\n  const milho = $('üíæ Salvar no JSON2').first()?.json || null;\n\n  // Estruturar JSON final apenas com milho\n  const cotacoesConsolidadas = {\n    metadata: {\n      timestamp: new Date().toISOString(),\n      data_coleta: new Date().toLocaleDateString('pt-BR'),\n      total_ativos: milho ? 1 : 0,\n      fonte: 'Investing.com'\n    },\n    commodities: {\n      agricolas: {\n        milho: milho?.dados_formatados?.dados || null\n      }\n    },\n    status: {\n      milho: milho?.status || 'erro'\n    }\n  };\n\n  return [{ json: cotacoesConsolidadas }];\n\n} catch (error) {\n  return [{\n    json: {\n      erro: 'Erro ao consolidar cota√ß√µes: ' + error.message,\n      timestamp: new Date().toISOString(),\n      status: 'erro_consolidacao'\n    }\n  }];\n}"
      },
      "id": "7303e9d4-74b9-4e3b-98f7-6ab1e79cd89a",
      "name": "üìä Consolidador de Cota√ß√µes2",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        944,
        -1792
      ]
    },
    {
      "parameters": {
        "jsCode": "// Retornar o JSON consolidado final\nconst dadosConsolidados = $input.first().json;\n\nreturn [{\n  json: {\n    mensagem: 'Cota√ß√µes consolidadas com sucesso!',\n    dados: dadosConsolidados,\n    timestamp: new Date().toISOString()\n  }\n}];"
      },
      "id": "c003a092-3baf-472a-ab45-f5e6f8d0c528",
      "name": "üìã Resposta Final Consolidada2",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1136,
        -1792
      ]
    },
    {
      "parameters": {
        "jsCode": "try {\n  // Receber dados do salvamento\n  const dadosSalvos = $input.first().json;\n  \n  return [{\n    json: {\n      status: 'sistema_completo',\n      mensagem: 'Sistema de consolida√ß√£o executado com sucesso!',\n      resultado: dadosSalvos,\n      total_cotacoes: 7,\n      timestamp_final: new Date().toISOString(),\n      resumo: {\n        commodities_agricolas: 3,\n        commodities_materiais: 2,\n        moedas: 2,\n        status_geral: dadosSalvos.status\n      }\n    }\n  }];\n  \n} catch (error) {\n  return [{ json: {\n    status: 'erro_sistema',\n    erro: 'Erro no sistema final: ' + error.message,\n    timestamp: new Date().toISOString()\n  } }];\n}"
      },
      "id": "f3f2e838-0c6e-4e86-adeb-a7f240145d6f",
      "name": "üìã Resposta Final do Sistema2",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1312,
        -1792
      ]
    },
    {
      "parameters": {
        "jsCode": "try {\n  const jsonResponse = $input.first().json;\n  const originalData = $('‚öôÔ∏è Processar Dados3').first().json;\n\n  if (jsonResponse.status === 'erro') {\n    return [{\n      json: {\n        status: 'erro_json',\n        erro: jsonResponse.erro,\n        dados_originais: originalData,\n        timestamp: new Date().toISOString()\n      }\n    }];\n  }\n\n  return [{\n    json: {\n      status: 'sucesso',\n      mensagem: 'Dados salvos no JSON com sucesso',\n      dados_salvos: originalData,\n      arquivo: jsonResponse.arquivo,\n      timestamp: new Date().toISOString()\n    }\n  }];\n\n} catch (error) {\n  return [{\n    json: {\n      status: 'erro_final',\n      erro: 'Erro na resposta final: ' + error.message,\n      timestamp: new Date().toISOString()\n    }\n  }];\n}"
      },
      "id": "ed42b302-f846-42ad-8b66-152271b0b618",
      "name": "üìã Resposta Final3",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        720,
        -2064
      ]
    },
    {
      "parameters": {
        "jsCode": "try {\n  // Coletar apenas os dados do milho\n  const milho = $('üíæ Salvar no JSON3').first()?.json || null;\n\n  // Estruturar JSON final apenas com milho\n  const cotacoesConsolidadas = {\n    metadata: {\n      timestamp: new Date().toISOString(),\n      data_coleta: new Date().toLocaleDateString('pt-BR'),\n      total_ativos: milho ? 1 : 0,\n      fonte: 'Investing.com'\n    },\n    commodities: {\n      agricolas: {\n        milho: milho?.dados_formatados?.dados || null\n      }\n    },\n    status: {\n      milho: milho?.status || 'erro'\n    }\n  };\n\n  return [{ json: cotacoesConsolidadas }];\n\n} catch (error) {\n  return [{\n    json: {\n      erro: 'Erro ao consolidar cota√ß√µes: ' + error.message,\n      timestamp: new Date().toISOString(),\n      status: 'erro_consolidacao'\n    }\n  }];\n}"
      },
      "id": "fb529ded-eac1-4d34-8063-08afbcb0f01c",
      "name": "üìä Consolidador de Cota√ß√µes3",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        944,
        -2064
      ]
    },
    {
      "parameters": {
        "jsCode": "// Retornar o JSON consolidado final\nconst dadosConsolidados = $input.first().json;\n\nreturn [{\n  json: {\n    mensagem: 'Cota√ß√µes consolidadas com sucesso!',\n    dados: dadosConsolidados,\n    timestamp: new Date().toISOString()\n  }\n}];"
      },
      "id": "bbf8f05f-9894-457c-885b-c1bc319aa47b",
      "name": "üìã Resposta Final Consolidada3",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1136,
        -2064
      ]
    },
    {
      "parameters": {
        "jsCode": "try {\n  // Receber dados do salvamento\n  const dadosSalvos = $input.first().json;\n  \n  return [{\n    json: {\n      status: 'sistema_completo',\n      mensagem: 'Sistema de consolida√ß√£o executado com sucesso!',\n      resultado: dadosSalvos,\n      total_cotacoes: 7,\n      timestamp_final: new Date().toISOString(),\n      resumo: {\n        commodities_agricolas: 3,\n        commodities_materiais: 2,\n        moedas: 2,\n        status_geral: dadosSalvos.status\n      }\n    }\n  }];\n  \n} catch (error) {\n  return [{ json: {\n    status: 'erro_sistema',\n    erro: 'Erro no sistema final: ' + error.message,\n    timestamp: new Date().toISOString()\n  } }];\n}"
      },
      "id": "c958a2e6-3cda-4329-8c53-39e04f29b126",
      "name": "üìã Resposta Final do Sistema3",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1312,
        -2064
      ]
    },
    {
      "parameters": {
        "jsCode": "try {\n  const jsonResponse = $input.first().json;\n  const originalData = $('‚öôÔ∏è Processar Dados4').first().json;\n\n  if (jsonResponse.status === 'erro') {\n    return [{\n      json: {\n        status: 'erro_json',\n        erro: jsonResponse.erro,\n        dados_originais: originalData,\n        timestamp: new Date().toISOString()\n      }\n    }];\n  }\n\n  return [{\n    json: {\n      status: 'sucesso',\n      mensagem: 'Dados salvos no JSON com sucesso',\n      dados_salvos: originalData,\n      arquivo: jsonResponse.arquivo,\n      timestamp: new Date().toISOString()\n    }\n  }];\n\n} catch (error) {\n  return [{\n    json: {\n      status: 'erro_final',\n      erro: 'Erro na resposta final: ' + error.message,\n      timestamp: new Date().toISOString()\n    }\n  }];\n}"
      },
      "id": "562ff323-625d-4972-a513-7e78996d0787",
      "name": "üìã Resposta Final4",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        720,
        -2752
      ]
    },
    {
      "parameters": {
        "jsCode": "try {\n  // Coletar apenas os dados do milho\n  const milho = $('üíæ Salvar no JSON4').first()?.json || null;\n\n  // Estruturar JSON final apenas com milho\n  const cotacoesConsolidadas = {\n    metadata: {\n      timestamp: new Date().toISOString(),\n      data_coleta: new Date().toLocaleDateString('pt-BR'),\n      total_ativos: milho ? 1 : 0,\n      fonte: 'Investing.com'\n    },\n    commodities: {\n      agricolas: {\n        milho: milho?.dados_formatados?.dados || null\n      }\n    },\n    status: {\n      milho: milho?.status || 'erro'\n    }\n  };\n\n  return [{ json: cotacoesConsolidadas }];\n\n} catch (error) {\n  return [{\n    json: {\n      erro: 'Erro ao consolidar cota√ß√µes: ' + error.message,\n      timestamp: new Date().toISOString(),\n      status: 'erro_consolidacao'\n    }\n  }];\n}"
      },
      "id": "330dbf56-ac66-4c00-b8cb-5e15efb02567",
      "name": "üìä Consolidador de Cota√ß√µes4",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        944,
        -2752
      ]
    },
    {
      "parameters": {
        "jsCode": "// Retornar o JSON consolidado final\nconst dadosConsolidados = $input.first().json;\n\nreturn [{\n  json: {\n    mensagem: 'Cota√ß√µes consolidadas com sucesso!',\n    dados: dadosConsolidados,\n    timestamp: new Date().toISOString()\n  }\n}];"
      },
      "id": "f3eef591-e682-4ef2-bd86-5f4e905f8135",
      "name": "üìã Resposta Final Consolidada4",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1136,
        -2752
      ]
    },
    {
      "parameters": {
        "jsCode": "try {\n  // Receber dados do salvamento\n  const dadosSalvos = $input.first().json;\n  \n  return [{\n    json: {\n      status: 'sistema_completo',\n      mensagem: 'Sistema de consolida√ß√£o executado com sucesso!',\n      resultado: dadosSalvos,\n      total_cotacoes: 7,\n      timestamp_final: new Date().toISOString(),\n      resumo: {\n        commodities_agricolas: 3,\n        commodities_materiais: 2,\n        moedas: 2,\n        status_geral: dadosSalvos.status\n      }\n    }\n  }];\n  \n} catch (error) {\n  return [{ json: {\n    status: 'erro_sistema',\n    erro: 'Erro no sistema final: ' + error.message,\n    timestamp: new Date().toISOString()\n  } }];\n}"
      },
      "id": "8b3938d8-1932-4fd0-9e9a-8728919d3a8f",
      "name": "üìã Resposta Final do Sistema4",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1312,
        -2752
      ]
    },
    {
      "parameters": {
        "jsCode": "try {\n  const jsonResponse = $input.first().json;\n  const originalData = $('‚öôÔ∏è Processar Dados1').first().json;\n\n  if (jsonResponse.status === 'erro') {\n    return [{\n      json: {\n        status: 'erro_json',\n        erro: jsonResponse.erro,\n        dados_originais: originalData,\n        timestamp: new Date().toISOString()\n      }\n    }];\n  }\n\n  return [{\n    json: {\n      status: 'sucesso',\n      mensagem: 'Dados salvos no JSON com sucesso',\n      dados_salvos: originalData,\n      arquivo: jsonResponse.arquivo,\n      timestamp: new Date().toISOString()\n    }\n  }];\n\n} catch (error) {\n  return [{\n    json: {\n      status: 'erro_final',\n      erro: 'Erro na resposta final: ' + error.message,\n      timestamp: new Date().toISOString()\n    }\n  }];\n}"
      },
      "id": "b756c97b-5587-4585-bd61-f04e7cd5a9fc",
      "name": "üìã Resposta Final5",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        720,
        -2288
      ]
    },
    {
      "parameters": {
        "jsCode": "try {\n  // Coletar apenas os dados do milho\n  const milho = $('üíæ Salvar no JSON1').first()?.json || null;\n\n  // Estruturar JSON final apenas com milho\n  const cotacoesConsolidadas = {\n    metadata: {\n      timestamp: new Date().toISOString(),\n      data_coleta: new Date().toLocaleDateString('pt-BR'),\n      total_ativos: milho ? 1 : 0,\n      fonte: 'Investing.com'\n    },\n    commodities: {\n      agricolas: {\n        milho: milho?.dados_formatados?.dados || null\n      }\n    },\n    status: {\n      milho: milho?.status || 'erro'\n    }\n  };\n\n  return [{ json: cotacoesConsolidadas }];\n\n} catch (error) {\n  return [{\n    json: {\n      erro: 'Erro ao consolidar cota√ß√µes: ' + error.message,\n      timestamp: new Date().toISOString(),\n      status: 'erro_consolidacao'\n    }\n  }];\n}"
      },
      "id": "08eaf888-6366-4fc5-9c76-dfeb7e0d3208",
      "name": "üìä Consolidador de Cota√ß√µes5",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        960,
        -2288
      ]
    },
    {
      "parameters": {
        "jsCode": "// Retornar o JSON consolidado final\nconst dadosConsolidados = $input.first().json;\n\nreturn [{\n  json: {\n    mensagem: 'Cota√ß√µes consolidadas com sucesso!',\n    dados: dadosConsolidados,\n    timestamp: new Date().toISOString()\n  }\n}];"
      },
      "id": "3448636f-52e8-4acf-89a3-4fa0bbb635dd",
      "name": "üìã Resposta Final Consolidada5",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1152,
        -2288
      ]
    },
    {
      "parameters": {
        "jsCode": "try {\n  // Receber dados do salvamento\n  const dadosSalvos = $input.first().json;\n  \n  return [{\n    json: {\n      status: 'sistema_completo',\n      mensagem: 'Sistema de consolida√ß√£o executado com sucesso!',\n      resultado: dadosSalvos,\n      total_cotacoes: 7,\n      timestamp_final: new Date().toISOString(),\n      resumo: {\n        commodities_agricolas: 3,\n        commodities_materiais: 2,\n        moedas: 2,\n        status_geral: dadosSalvos.status\n      }\n    }\n  }];\n  \n} catch (error) {\n  return [{ json: {\n    status: 'erro_sistema',\n    erro: 'Erro no sistema final: ' + error.message,\n    timestamp: new Date().toISOString()\n  } }];\n}"
      },
      "id": "6050f443-726b-4bbc-9eb7-0075b4e2a2dc",
      "name": "üìã Resposta Final do Sistema5",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1328,
        -2288
      ]
    },
    {
      "parameters": {
        "jsCode": "try {\n  const jsonResponse = $input.first().json;\n  const originalData = $('‚öôÔ∏è Processar Dados1').first().json;\n\n  if (jsonResponse.status === 'erro') {\n    return [{\n      json: {\n        status: 'erro_json',\n        erro: jsonResponse.erro,\n        dados_originais: originalData,\n        timestamp: new Date().toISOString()\n      }\n    }];\n  }\n\n  return [{\n    json: {\n      status: 'sucesso',\n      mensagem: 'Dados salvos no JSON com sucesso',\n      dados_salvos: originalData,\n      arquivo: jsonResponse.arquivo,\n      timestamp: new Date().toISOString()\n    }\n  }];\n\n} catch (error) {\n  return [{\n    json: {\n      status: 'erro_final',\n      erro: 'Erro na resposta final: ' + error.message,\n      timestamp: new Date().toISOString()\n    }\n  }];\n}"
      },
      "id": "d38111c8-2d35-4db9-8b57-fd27525a05ab",
      "name": "üìã Resposta Final6",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        720,
        -2976
      ]
    },
    {
      "parameters": {
        "jsCode": "try {\n  // Coletar apenas os dados do milho\n  const milho = $('üíæ Salvar no JSON1').first()?.json || null;\n\n  // Estruturar JSON final apenas com milho\n  const cotacoesConsolidadas = {\n    metadata: {\n      timestamp: new Date().toISOString(),\n      data_coleta: new Date().toLocaleDateString('pt-BR'),\n      total_ativos: milho ? 1 : 0,\n      fonte: 'Investing.com'\n    },\n    commodities: {\n      agricolas: {\n        milho: milho?.dados_formatados?.dados || null\n      }\n    },\n    status: {\n      milho: milho?.status || 'erro'\n    }\n  };\n\n  return [{ json: cotacoesConsolidadas }];\n\n} catch (error) {\n  return [{\n    json: {\n      erro: 'Erro ao consolidar cota√ß√µes: ' + error.message,\n      timestamp: new Date().toISOString(),\n      status: 'erro_consolidacao'\n    }\n  }];\n}"
      },
      "id": "c94f27e3-0d7d-4bba-a78f-cba278c26d9f",
      "name": "üìä Consolidador de Cota√ß√µes6",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        960,
        -2976
      ]
    },
    {
      "parameters": {
        "jsCode": "// Retornar o JSON consolidado final\nconst dadosConsolidados = $input.first().json;\n\nreturn [{\n  json: {\n    mensagem: 'Cota√ß√µes consolidadas com sucesso!',\n    dados: dadosConsolidados,\n    timestamp: new Date().toISOString()\n  }\n}];"
      },
      "id": "9f84ac8a-0ae6-41a0-ac70-846f6d0bcb41",
      "name": "üìã Resposta Final Consolidada6",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1152,
        -2976
      ]
    },
    {
      "parameters": {
        "jsCode": "try {\n  // Receber dados do salvamento\n  const dadosSalvos = $input.first().json;\n  \n  return [{\n    json: {\n      status: 'sistema_completo',\n      mensagem: 'Sistema de consolida√ß√£o executado com sucesso!',\n      resultado: dadosSalvos,\n      total_cotacoes: 7,\n      timestamp_final: new Date().toISOString(),\n      resumo: {\n        commodities_agricolas: 3,\n        commodities_materiais: 2,\n        moedas: 2,\n        status_geral: dadosSalvos.status\n      }\n    }\n  }];\n  \n} catch (error) {\n  return [{ json: {\n    status: 'erro_sistema',\n    erro: 'Erro no sistema final: ' + error.message,\n    timestamp: new Date().toISOString()\n  } }];\n}"
      },
      "id": "f0606a39-bdb0-46c8-856f-a7e9227eea6e",
      "name": "üìã Resposta Final do Sistema6",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1328,
        -2976
      ]
    },
    {
      "parameters": {
        "jsCode": "try {\n  // Buscar dados dos ativos base PREPARADOS\n  const boi = $('‚öôÔ∏è Preparar BOI').first()?.json;\n  const milho = $('‚öôÔ∏è Preparar MILHO').first()?.json;\n  const soja = $('‚öôÔ∏è Preparar SOJA').first()?.json;\n  const madeira = $('‚öôÔ∏è Preparar MADEIRA').first()?.json;\n  const carbono = $('‚öôÔ∏è Preparar CARBONO').first()?.json;\n\n  if (!boi || !milho || !soja || !madeira || !carbono) {\n    return [{\n      json: {\n        erro: 'Dados insuficientes para calcular CH2O √Ågua',\n        timestamp: new Date().toISOString(),\n        status: 'erro'\n      }\n    }];\n  }\n\n  const rentBoiGordo = parseFloat(boi.rent_media) || 0;\n  const rentMilho = parseFloat(milho.rent_media) || 0;\n  const rentSoja = parseFloat(soja.rent_media) || 0;\n  const rentMadeira = parseFloat(madeira.rent_media) || 0;\n  const rentCarbono = parseFloat(carbono.rent_media) || 0;\n\n  // C√°lculo dos componentes\n  const componentes = {\n    boi_gordo_35: Math.floor(rentBoiGordo * 0.35 * 100 + 0.0000001) / 100,\n    milho_30: Math.round(rentMilho * 0.30 * 100) / 100,\n    soja_35: Math.round(rentSoja * 0.35 * 100) / 100,\n    madeira_100: Math.round(rentMadeira * 100) / 100,\n    carbono_100: Math.round(rentCarbono * 100) / 100\n  };\n\n  const ch2oAgua = componentes.boi_gordo_35 + componentes.milho_30 + componentes.soja_35 + componentes.madeira_100 + componentes.carbono_100;\n\n  const ctx = $('üìÖ Resolver Data').first().json;\n\n  return [{\n    json: {\n      ativo: 'CH2O √Ågua',\n      data: ctx.dataBR,\n      valor: Math.round(ch2oAgua * 100) / 100,\n      componentes: componentes,\n      valores_originais: {\n        rent_boi_gordo: rentBoiGordo,\n        rent_milho: rentMilho,\n        rent_soja: rentSoja,\n        rent_madeira: rentMadeira,\n        rent_carbono: rentCarbono\n      },\n      formula: 'CH2O = (Boi√ó35%) + (Milho√ó30%) + (Soja√ó35%) + Madeira + Carbono',\n      moeda: 'BRL',\n      fonte: 'C√°lculo UCS',\n      timestamp: new Date().toISOString(),\n      status: 'sucesso',\n      documentId: ctx.dateId\n    }\n  }];\n\n} catch (error) {\n  return [{\n    json: {\n      erro: 'Erro ao calcular CH2O √Ågua: ' + error.message,\n      timestamp: new Date().toISOString(),\n      status: 'erro'\n    }\n  }];\n}"
      },
      "id": "89d46011-a36f-4f8b-9b53-b90c1864bca9",
      "name": "üßÆ Calcular CH2O Original",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        352,
        -1408
      ]
    },
    {
      "parameters": {
        "jsCode": "try {\n  const ch2oData = $input.first().json;\n  \n  return [{\n    json: {\n      status: 'ch2o_sucesso',\n      mensagem: 'CH2O √Ågua calculado e salvo com sucesso!',\n      dados_ch2o: ch2oData,\n      timestamp: new Date().toISOString()\n    }\n  }];\n  \n} catch (error) {\n  return [{\n    json: {\n      status: 'ch2o_erro',\n      erro: 'Erro no CH2O: ' + error.message,\n      timestamp: new Date().toISOString()\n    }\n  }];\n}"
      },
      "id": "b6694a6f-dd8f-4113-bc06-b158d004b77d",
      "name": "üìã Resposta Final CH2O Original",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        720,
        -1408
      ]
    },
    {
      "parameters": {
        "jsCode": "try {\n  const boi = $('‚öôÔ∏è Preparar BOI').first()?.json;\n  const milho = $('‚öôÔ∏è Preparar MILHO').first()?.json;\n  const soja = $('‚öôÔ∏è Preparar SOJA').first()?.json;\n  const madeira = $('‚öôÔ∏è Preparar MADEIRA').first()?.json;\n  const carbono = $('‚öôÔ∏è Preparar CARBONO').first()?.json;\n\n  if (!boi || !milho || !soja || !madeira || !carbono) {\n    return [{\n      json: {\n        erro: 'Dados insuficientes para calcular Custo_√Ågua',\n        timestamp: new Date().toISOString(),\n        status: 'erro'\n      }\n    }];\n  }\n\n  const rentBoiGordo = parseFloat(boi.rent_media) || 0;\n  const rentMilho = parseFloat(milho.rent_media) || 0;\n  const rentSoja = parseFloat(soja.rent_media) || 0;\n  const rentMadeira = parseFloat(madeira.rent_media) || 0;\n  const rentCarbono = parseFloat(carbono.rent_media) || 0;\n\n  const baseCalculo = (rentBoiGordo * 0.35) + (rentMilho * 0.30) + (rentSoja * 0.35) + rentMadeira + rentCarbono;\n  const custoAgua = baseCalculo * 0.07;\n\n  const ctx = $('üìÖ Resolver Data').first().json;\n\n  return [{\n    json: {\n      ativo: 'Custo_√Ågua',\n      data: ctx.dataBR,\n      valor: Math.round(custoAgua * 100) / 100,\n      componentes: {\n        boi_gordo_35: Math.round(rentBoiGordo * 0.35 * 100) / 100,\n        milho_30: Math.round(rentMilho * 0.30 * 100) / 100,\n        soja_35: Math.round(rentSoja * 0.35 * 100) / 100,\n        madeira_100: Math.round(rentMadeira * 100) / 100,\n        carbono_100: Math.round(rentCarbono * 100) / 100,\n        base_calculo: Math.round(baseCalculo * 100) / 100,\n        resultado_final: Math.round(custoAgua * 100) / 100\n      },\n      valores_originais: {\n        rent_boi_gordo: rentBoiGordo,\n        rent_milho: rentMilho,\n        rent_soja: rentSoja,\n        rent_madeira: rentMadeira,\n        rent_carbono: rentCarbono\n      },\n      formula: 'Custo_√Ågua = ((Boi√ó35%) + (Milho√ó30%) + (Soja√ó35%) + Madeira + Carbono) √ó 7%',\n      moeda: 'BRL',\n      fonte: 'C√°lculo UCS',\n      timestamp: new Date().toISOString(),\n      status: 'sucesso',\n      documentId: ctx.dateId\n    }\n  }];\n  \n} catch (error) {\n  return [{\n    json: {\n      erro: 'Erro ao calcular Custo_√Ågua: ' + error.message,\n      timestamp: new Date().toISOString(),\n      status: 'erro'\n    }\n  }];\n}"
      },
      "id": "c9cb63a5-7a5e-4b7a-988b-70d1595f40d4",
      "name": "üßÆ Calcular Custo_√Ågua",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        352,
        -1232
      ]
    },
    {
      "parameters": {
        "jsCode": "try {\n  const boi = $('‚öôÔ∏è Preparar BOI').first()?.json;\n  const milho = $('‚öôÔ∏è Preparar MILHO').first()?.json;\n  const soja = $('‚öôÔ∏è Preparar SOJA').first()?.json;\n  const madeira = $('‚öôÔ∏è Preparar MADEIRA').first()?.json;\n  const carbono = $('‚öôÔ∏è Preparar CARBONO').first()?.json;\n  const custoAgua = $('üíæ Custo_√Ågua').first()?.json;\n\n  if (!boi || !milho || !soja || !madeira || !carbono || !custoAgua) {\n    return [{\n      json: {\n        erro: 'Dados insuficientes para calcular PDM',\n        timestamp: new Date().toISOString(),\n        status: 'erro'\n      }\n    }];\n  }\n\n  const rentBoiGordo = parseFloat(boi.rent_media) || 0;\n  const rentMilho = parseFloat(milho.rent_media) || 0;\n  const rentSoja = parseFloat(soja.rent_media) || 0;\n  const rentMadeira = parseFloat(madeira.rent_media) || 0;\n  const rentCarbono = parseFloat(carbono.rent_media) || 0;\n  const valorCustoAgua = parseFloat(custoAgua.valor) || 0;\n\n  const pdm = (rentBoiGordo * 0.35) + (rentMilho * 0.30) + (rentSoja * 0.35) + rentMadeira + rentCarbono + valorCustoAgua;\n\n  const ctx = $('üìÖ Resolver Data').first().json;\n\n  return [{\n    json: {\n      ativo: 'PDM',\n      data: ctx.dataBR,\n      valor: Math.round(pdm * 100) / 100,\n      componentes: {\n        boi_gordo_35: Math.round(rentBoiGordo * 0.35 * 100) / 100,\n        milho_30: Math.round(rentMilho * 0.30 * 100) / 100,\n        soja_35: Math.round(rentSoja * 0.35 * 100) / 100,\n        madeira_100: Math.round(rentMadeira * 100) / 100,\n        carbono_100: Math.round(rentCarbono * 100) / 100,\n        custo_agua_100: Math.round(valorCustoAgua * 100) / 100\n      },\n      valores_originais: {\n        rent_boi_gordo: rentBoiGordo,\n        rent_milho: rentMilho,\n        rent_soja: rentSoja,\n        rent_madeira: rentMadeira,\n        rent_carbono: rentCarbono,\n        custo_agua: valorCustoAgua\n      },\n      formula: 'PDM = (Boi√ó35%) + (Milho√ó30%) + (Soja√ó35%) + Madeira + Carbono + Custo_√Ågua',\n      moeda: 'BRL',\n      fonte: 'C√°lculo UCS',\n      timestamp: new Date().toISOString(),\n      status: 'sucesso',\n      documentId: ctx.dateId\n    }\n  }];\n} catch (error) {\n  return [{\n    json: {\n      erro: 'Erro ao calcular PDM: ' + error.message,\n      timestamp: new Date().toISOString(),\n      status: 'erro'\n    }\n  }];\n}"
      },
      "id": "13cea6d3-bb0d-483b-9c43-fdb8ed5589f7",
      "name": "üßÆ Calcular PDM",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        352,
        -1056
      ]
    },
    {
      "parameters": {
        "jsCode": "try {\n  const pdmData = $input.first().json;\n\n  return [\n    {\n      json: {\n        status: 'pdm_sucesso',\n        mensagem: 'PDM calculado e salvo com sucesso!',\n        dados_pdm: pdmData,\n        timestamp: new Date().toISOString()\n      }\n    }\n  ];\n\n} catch (error) {\n  return [\n    {\n      json: {\n        status: 'pdm_erro',\n        erro: 'Erro no PDM: ' + error.message,\n        timestamp: new Date().toISOString()\n      }\n    }\n  ];\n}\n"
      },
      "id": "2b94885b-2fee-4ac9-84fc-9defcbcf44f0",
      "name": "üìã Resposta Final PDM",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        720,
        -1056
      ]
    },
    {
      "parameters": {
        "jsCode": "try {\n  const pdmData = $('üíæ PDM').first()?.json;\n\n  if (!pdmData) {\n    return [{\n      json: {\n        erro: 'Dados do PDM insuficientes para calcular UCS',\n        timestamp: new Date().toISOString(),\n        status: 'erro'\n      }\n    }];\n  }\n\n  const valorPDM = parseFloat(pdmData.valor) || 0;\n  const ucs = (valorPDM / 900) / 2;\n\n  const ctx = $('üìÖ Resolver Data').first().json;\n\n  return [{\n    json: {\n      ativo: 'UCS',\n      data: ctx.dataBR,\n      valor: Math.round(ucs * 100) / 100,\n      componentes: {\n        pdm_original: valorPDM,\n        pdm_div_900: Math.round((valorPDM / 900) * 100) / 100,\n        resultado_final: Math.round(ucs * 100) / 100\n      },\n      valores_originais: {\n        pdm: valorPDM\n      },\n      formula: 'UCS = (PDM √∑ 900) √∑ 2',\n      moeda: 'BRL',\n      fonte: 'C√°lculo UCS',\n      timestamp: new Date().toISOString(),\n      status: 'sucesso',\n      documentId: ctx.dateId\n    }\n  }];\n\n} catch (error) {\n  return [{\n    json: {\n      erro: 'Erro ao calcular UCS: ' + error.message,\n      timestamp: new Date().toISOString(),\n      status: 'erro'\n    }\n  }];\n}"
      },
      "id": "5cae4206-91ab-41c5-9521-1ff1ec890750",
      "name": "üßÆ Calcular UCS",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        352,
        -880
      ]
    },
    {
      "parameters": {
        "jsCode": "try {\n  const ucsData = $('üíæ UCS').first()?.json;\n  const usdData = $('‚öôÔ∏è Preparar USD').first()?.json;\n  const eurData = $('‚öôÔ∏è Preparar EUR').first()?.json;\n\n  if (!ucsData || !usdData || !eurData) {\n    return [{\n      json: {\n        erro: 'Dados insuficientes para calcular UCS ASE',\n        dados_faltando: {\n          ucs: !ucsData,\n          usd: !usdData,\n          eur: !eurData\n        },\n        timestamp: new Date().toISOString(),\n        status: 'erro'\n      }\n    }];\n  }\n\n  const valorUCS = parseFloat(ucsData.valor) || 0;\n  const cotacaoUSD = parseFloat(usdData.ultimo) || 0;\n  const cotacaoEUR = parseFloat(eurData.ultimo) || 0;\n\n  const ucsASEBRL = valorUCS * 2;\n  const ucsASEUSD = cotacaoUSD > 0 ? Math.round((ucsASEBRL / cotacaoUSD) * 100) / 100 : 0;\n  const ucsASEEUR = cotacaoEUR > 0 ? Math.round((ucsASEBRL / cotacaoEUR) * 100) / 100 : 0;\n\n  const ctx = $('üìÖ Resolver Data').first().json;\n\n  return [{\n    json: {\n      ativo: 'UCS ASE',\n      data: ctx.dataBR,\n      valor_brl: Math.round(ucsASEBRL * 100) / 100,\n      valor_usd: ucsASEUSD,\n      valor_eur: ucsASEEUR,\n      componentes: {\n        ucs_original_brl: valorUCS,\n        resultado_final_brl: Math.round(ucsASEBRL * 100) / 100,\n        resultado_final_usd: ucsASEUSD,\n        resultado_final_eur: ucsASEEUR\n      },\n      valores_originais: {\n        ucs: valorUCS,\n        cotacao_usd: cotacaoUSD,\n        cotacao_eur: cotacaoEUR\n      },\n      formula: 'UCS ASE = UCS √ó 2',\n      moedas: ['BRL', 'USD', 'EUR'],\n      fonte: 'C√°lculo UCS',\n      timestamp: new Date().toISOString(),\n      status: 'sucesso',\n      documentId: ctx.dateId\n    }\n  }];\n\n} catch (error) {\n  return [{\n    json: {\n      erro: 'Erro ao calcular UCS ASE: ' + error.message,\n      timestamp: new Date().toISOString(),\n      status: 'erro'\n    }\n  }];\n}"
      },
      "id": "62f5338d-325f-4a0f-b64b-c3e7016aa1d5",
      "name": "üßÆ Calcular UCS ASE",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        352,
        -704
      ]
    },
    {
      "parameters": {
        "jsCode": "try {\n  const boi = $('‚öôÔ∏è Preparar BOI').first()?.json;\n  const milho = $('‚öôÔ∏è Preparar MILHO').first()?.json;\n  const soja = $('‚öôÔ∏è Preparar SOJA').first()?.json;\n\n  if (!boi || !milho || !soja) {\n    return [{\n      json: {\n        erro: \"Dados insuficientes\",\n        timestamp: new Date().toISOString(),\n        status: \"erro\",\n      },\n    }];\n  }\n\n  const rentBoiGordo = parseFloat(boi.rent_media) || 0;\n  const rentMilho = parseFloat(milho.rent_media) || 0;\n  const rentSoja = parseFloat(soja.rent_media) || 0;\n\n  // **C√ÅLCULO DIRETO - EXATAMENTE COMO NO EXCEL**\n  const base = (rentBoiGordo * 0.35) + (rentMilho * 0.30) + (rentSoja * 0.35);\n  const vusFinal = (base - (base * 0.048)) * 25;\n\n  const ctx = $('üìÖ Resolver Data').first().json;\n\n  return [{\n    json: {\n      ativo: \"VUS\",\n      data: ctx.dataBR,\n      valor: vusFinal,\n      componentes: {\n        boi_gordo_35: rentBoiGordo * 0.35,\n        milho_30: rentMilho * 0.30,\n        soja_35: rentSoja * 0.35,\n        base_calculo: (rentBoiGordo * 0.35) + (rentMilho * 0.30) + (rentSoja * 0.35),\n        desconto_arrendamento: base * 0.048,\n        resultado_final: vusFinal,\n      },\n      valores_originais: {\n        rent_boi_gordo: rentBoiGordo,\n        rent_milho: rentMilho,\n        rent_soja: rentSoja,\n      },\n      formula: \"VUS =(((rent_boi_gordo*35% + rente milho *30% + rent_soja*35%)-(rent_boi_gordo*35% + rente milho *30% + rent_soja*35%)*4,8))*25\",\n      moeda: \"BRL\",\n      fonte: \"C√°lculo UCS\",\n      timestamp: new Date().toISOString(),\n      status: \"sucesso\",\n      documentId: ctx.dateId,\n    },\n  }];\n} catch (error) {\n  return [{\n    json: {\n      erro: \"Erro ao calcular VUS: \" + error.message,\n      timestamp: new Date().toISOString(),\n      status: \"erro\",\n    },\n  }];\n}"
      },
      "id": "e6faafa5-199c-423c-a872-ff98e237ea0c",
      "name": "üßÆ Calcular VUS",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        352,
        -528
      ]
    },
    {
      "parameters": {
        "jsCode": "try {\n  const carbono = $('‚öôÔ∏è Preparar CARBONO').first()?.json;\n\n  if (!carbono) {\n    return [{\n      json: {\n        erro: 'Dados insuficientes para calcular Carbono_CRS',\n        timestamp: new Date().toISOString(),\n        status: 'erro'\n      }\n    }];\n  }\n\n  const rentCarbono = parseFloat(carbono.rent_media) || 0;\n  const carbonoCRS = rentCarbono * 25;\n  const valorFinal = Math.floor(carbonoCRS * 100) / 100;\n\n  const ctx = $('üìÖ Resolver Data').first().json;\n\n  return [{\n    json: {\n      ativo: 'Carbono_CRS',\n      data: ctx.dataBR,\n      valor: valorFinal,\n      componentes: {\n        rent_media_carbono: rentCarbono,\n        multiplicador: 25,\n        resultado_final: valorFinal\n      },\n      valores_originais: {\n        rent_carbono: rentCarbono\n      },\n      formula: `Carbono_CRS = ${rentCarbono} * 25 = ${valorFinal}`,\n      moeda: 'BRL',\n      fonte: 'C√°lculo UCS - Din√¢mico',\n      timestamp: new Date().toISOString(),\n      status: 'sucesso',\n      documentId: ctx.dateId\n    }\n  }];\n\n} catch (error) {\n  return [{\n    json: {\n      erro: 'Erro ao calcular Carbono_CRS: ' + error.message,\n      timestamp: new Date().toISOString(),\n      status: 'erro'\n    }\n  }];\n}"
      },
      "id": "55a21763-8679-44c6-b802-f28eebbeb9a0",
      "name": "üßÆ Calcular Carbono_CRS",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        352,
        -352
      ]
    },
    {
      "parameters": {
        "jsCode": "try {\n  const ch2oData = $('üíæ CH2O').first()?.json;\n\n  if (!ch2oData) {\n    return [{\n      json: {\n        erro: 'Dados insuficientes para calcular Agua_CRS',\n        timestamp: new Date().toISOString(),\n        status: 'erro'\n      }\n    }];\n  }\n\n  const rentCH2O = parseFloat(ch2oData.valor) || 0;\n  const aguaCRS = rentCH2O;\n\n  const ctx = $('üìÖ Resolver Data').first().json;\n\n  return [{\n    json: {\n      ativo: 'Agua_CRS',\n      data: ctx.dataBR,\n      valor: Math.round(aguaCRS * 100) / 100,\n      componentes: {\n        rent_media_ch2o: rentCH2O,\n        resultado_final: Math.round(aguaCRS * 100) / 100\n      },\n      valores_originais: {\n        valor_ch2o: rentCH2O\n      },\n      formula: 'Agua_CRS = valor_CH2O (rentabilidade m√©dia)',\n      moeda: 'BRL',\n      fonte: 'C√°lculo UCS',\n      timestamp: new Date().toISOString(),\n      status: 'sucesso',\n      documentId: ctx.dateId\n    }\n  }];\n\n} catch (error) {\n  return [{\n    json: {\n      erro: 'Erro ao calcular Agua_CRS: ' + error.message,\n      timestamp: new Date().toISOString(),\n      status: 'erro'\n    }\n  }];\n}"
      },
      "id": "3a5d456d-9c95-4bdd-9e21-807fb2e9530e",
      "name": "üßÆ Calcular Agua_CRS",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        352,
        -176
      ]
    },
    {
      "parameters": {
        "jsCode": "try {\n  const madeira = $('‚öôÔ∏è Preparar MADEIRA').first()?.json;\n\n  if (!madeira) {\n    return [{\n      json: {\n        erro: 'Dados insuficientes para calcular Vmad',\n        timestamp: new Date().toISOString(),\n        status: 'erro'\n      }\n    }];\n  }\n\n  const rentMadeira = parseFloat(madeira.rent_media) || 0;\n  const vmad = rentMadeira * 5;\n  const valorFinal = Math.floor(vmad * 100) / 100;\n\n  const ctx = $('üìÖ Resolver Data').first().json;\n\n  return [{\n    json: {\n      ativo: 'Vmad',\n      data: ctx.dataBR,\n      valor: valorFinal,\n      componentes: {\n        rent_media_madeira: rentMadeira,\n        multiplicador: 5,\n        resultado_final: valorFinal\n      },\n      valores_originais: {\n        rent_madeira: rentMadeira\n      },\n      formula: 'Vmad = rent_media_madeira * 5',\n      moeda: 'BRL',\n      fonte: 'C√°lculo UCS',\n      timestamp: new Date().toISOString(),\n      status: 'sucesso',\n      documentId: ctx.dateId\n    }\n  }];\n\n} catch (error) {\n  return [{\n    json: {\n      erro: 'Erro ao calcular Vmad: ' + error.message,\n      timestamp: new Date().toISOString(),\n      status: 'erro'\n    }\n  }];\n}"
      },
      "id": "69c4e167-05ff-43a3-90d6-1415821fb8a1",
      "name": "üßÆ Calcular Vmad",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        352,
        16
      ]
    },
    {
      "parameters": {
        "jsCode": "try {\n  const vusData = $(\"üíæ VUS\").first()?.json;\n  const vmadData = $(\"üíæ Vmad\").first()?.json;\n  const carbonoCRSData = $(\"üíæ Carbono_CRS\").first()?.json;\n  const aguaCRSData = $(\"üíæ Agua_CRS\").first()?.json;\n\n  if (!vusData || !vmadData || !carbonoCRSData || !aguaCRSData) {\n    return [{\n      json: {\n        erro: \"Dados insuficientes para calcular Valor_Uso_Solo\",\n        timestamp: new Date().toISOString(),\n        status: \"erro\",\n      },\n    }];\n  }\n\n  const valorVUS = parseFloat(vusData.valor) || 0;\n  const valorVmad = parseFloat(vmadData.valor) || 0;\n  const valorCarbonoCRS = parseFloat(carbonoCRSData.valor) || 0;\n  const valorAguaCRS = parseFloat(aguaCRSData.valor) || 0;\n\n  const valorUsoSolo = valorVUS + valorVmad + valorCarbonoCRS + valorAguaCRS;\n\n  const percentualVUS = valorUsoSolo > 0 ? (valorVUS / valorUsoSolo) * 100 : 0;\n  const percentualVmad = valorUsoSolo > 0 ? (valorVmad / valorUsoSolo) * 100 : 0;\n  const percentualCarbonoCRS = valorUsoSolo > 0 ? (valorCarbonoCRS / valorUsoSolo) * 100 : 0;\n  const percentualAguaCRS = valorUsoSolo > 0 ? (valorAguaCRS / valorUsoSolo) * 100 : 0;\n\n  const formatarPercentual = (valor) => `${valor}%`;\n\n  const ctx = $('üìÖ Resolver Data').first().json;\n\n  return [{\n    json: {\n      created_at: new Date().toISOString(),\n      formulas: {\n        valor_total: \"Valor_Uso_Solo = VUS + Vmad + Carbono_CRS + Agua_CRS\",\n        porcentagem_vus: \"VUS / Valor_Uso_Solo * 100\",\n        porcentagem_vmad: \"Vmad / Valor_Uso_Solo * 100\",\n        porcentagem_carbono_crs: \"Carbono_CRS / Valor_Uso_Solo * 100\",\n        porcentagem_agua_crs: \"Agua_CRS / Valor_Uso_Solo * 100\",\n      },\n      timestamp: new Date().toISOString(),\n      data: ctx.dataBR,\n      documentId: ctx.dateId,\n      valor: valorUsoSolo,\n      status: \"sucesso\",\n      porcentagens: {\n        vus_p: formatarPercentual(percentualVUS),\n        vmad_p: formatarPercentual(percentualVmad),\n        carbono_crs_p: formatarPercentual(percentualCarbonoCRS),\n        agua_crs_p: formatarPercentual(percentualAguaCRS),\n      },\n      moeda: \"BRL\",\n      ativo: \"Valor_Uso_Solo\",\n      valores_originais: {\n        vus: valorVUS,\n        vmad: valorVmad,\n        carbono_crs: valorCarbonoCRS,\n        agua_crs: valorAguaCRS,\n      },\n      bulk_import: true,\n      fonte: \"Banco de dados - C√°lculo UCS\",\n    },\n  }];\n} catch (error) {\n  return [{\n    json: {\n      erro: \"Erro ao calcular Valor_Uso_Solo: \" + error.message,\n      timestamp: new Date().toISOString(),\n      status: \"erro\",\n    },\n  }];\n}"
      },
      "id": "a53a673b-8072-4778-8d03-3e1a9903b8c6",
      "name": "üßÆ Calcular Valor_Uso_Solo",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        352,
        192
      ]
    },
    {
      "parameters": {
        "authentication": "serviceAccount",
        "operation": "upsert",
        "projectId": "ucs-index-tracker",
        "collection": "boi_gordo",
        "updateKey": "documentId",
        "columns": "=ativo,data,ultimo,ton,rent_media,moeda,fonte,timestamp,status,documentId"
      },
      "id": "6c0ee6df-6ffb-41d0-91b7-303e668da34b",
      "name": "üíæ BOI",
      "type": "n8n-nodes-base.googleFirebaseCloudFirestore",
      "typeVersion": 1,
      "position": [
        544,
        -1792
      ],
      "credentials": {
        "googleApi": {
          "id": "Dqr74c3ldFzCyUyS",
          "name": "Google Firebase Cloud Firestore account"
        }
      }
    },
    {
      "parameters": {
        "authentication": "serviceAccount",
        "operation": "upsert",
        "projectId": "ucs-index-tracker",
        "collection": "soja",
        "updateKey": "documentId",
        "columns": "=ativo,data,ultimo,ultimo_brl,ton,rent_media,cotacao_dolar,moeda,fonte,timestamp,status,documentId"
      },
      "id": "503b9b86-4f3b-40f8-b7ce-ffa43d8941d0",
      "name": "üíæ SOJA",
      "type": "n8n-nodes-base.googleFirebaseCloudFirestore",
      "typeVersion": 1,
      "position": [
        544,
        -2512
      ],
      "credentials": {
        "googleApi": {
          "id": "Dqr74c3ldFzCyUyS",
          "name": "Google Firebase Cloud Firestore account"
        }
      }
    },
    {
      "parameters": {
        "authentication": "serviceAccount",
        "operation": "upsert",
        "projectId": "ucs-index-tracker",
        "collection": "madeira",
        "updateKey": "documentId",
        "columns": "=ativo,data,ultimo,madeira_tora_usd,rent_media,cotacao_dolar,moeda,fonte,timestamp,status,documentId"
      },
      "id": "4fc0fc90-94a3-4daa-ac12-9cca50659fbf",
      "name": "üíæ MADEIRA",
      "type": "n8n-nodes-base.googleFirebaseCloudFirestore",
      "typeVersion": 1,
      "position": [
        544,
        -2752
      ],
      "credentials": {
        "googleApi": {
          "id": "Dqr74c3ldFzCyUyS",
          "name": "Google Firebase Cloud Firestore account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const body = $('üü¢ Manual Overrides').first().json || {};\nconst dataEspecifica = body.data_especifica;\nconst now = new Date();\n\nconst dateId = dataEspecifica || now.toISOString().split('T')[0];\nconst dataBR = dataEspecifica ? \n  new Date(dataEspecifica + 'T00:00:00').toLocaleDateString('pt-BR') : \n  now.toLocaleDateString('pt-BR');\n\nreturn [{ json: { dateId, dataBR, timestamp: now.toISOString() } }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -544,
        -2368
      ],
      "id": "c275c669-97cc-4972-a3a6-24b75a5e8b14",
      "name": "üìÖ Resolver Data"
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{$json}}",
        "options": {
          "responseCode": 200
        }
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        928,
        192
      ],
      "id": "3ca4ae0a-32b6-4d31-9915-ac550b8713fb",
      "name": "Respond to Webhook"
    },
    {
      "parameters": {
        "jsCode": "const mapped = $('üó∫Ô∏è Mapear Bases').first().json || {};\nconst x = mapped.usd; \nif (!x || x.ultimo == null) return [];\n\nconst ultimo = Number(x.ultimo ?? x.preco);\nconst ctx = $('üìÖ Resolver Data').first().json;\n\nreturn [{ json: {\n  ativo: 'USD/BRL', \n  data: ctx.dataBR,\n  ultimo, \n  abertura: ultimo, \n  maxima: ultimo, \n  minima: ultimo,\n  volume: null, \n  variacao_pct: null, \n  moeda: 'BRL', \n  fonte: 'Painel',\n  timestamp: new Date().toISOString(), \n  status: 'sucesso',\n  documentId: ctx.dateId\n}}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        352,
        -2976
      ],
      "id": "7188cd51-5516-4be1-b6d6-ab6a4855e6e7",
      "name": "‚öôÔ∏è Preparar USD"
    },
    {
      "parameters": {
        "jsCode": "const mapped = $('üó∫Ô∏è Mapear Bases').first().json || {};\nconst usd = $('‚öôÔ∏è Preparar USD').first()?.json?.ultimo;\nconst x = mapped.madeira; \nif (!x || x.ultimo == null || usd == null) return [];\n\nconst ultimo = Number(x.ultimo ?? x.preco);\nconst madeira_tora_usd = ultimo * 0.375620342; // 37,5620342%\nconst rent_media = Math.round((madeira_tora_usd * usd * 120) * 100) / 100;\n\nconst ctx = $('üìÖ Resolver Data').first().json;\n\nreturn [{ json: {\n  ativo: 'Madeira Serrada', \n  data: ctx.dataBR,\n  ultimo, \n  madeira_tora_usd: Math.round(madeira_tora_usd * 100) / 100,\n  cotacao_dolar: usd, \n  rent_media,\n  moeda: 'USD', \n  fonte: 'Painel', \n  timestamp: new Date().toISOString(), \n  status: 'sucesso',\n  documentId: ctx.dateId\n}}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        352,
        -2752
      ],
      "id": "ff3a1ca8-2e7c-4c30-a189-122a7f3e1958",
      "name": "‚öôÔ∏è Preparar MADEIRA"
    },
    {
      "parameters": {
        "jsCode": "const mapped = $('üó∫Ô∏è Mapear Bases').first().json || {};\nconst usd = $('‚öôÔ∏è Preparar USD').first()?.json?.ultimo;\nconst x = mapped.soja; \nif (!x || x.ultimo == null || usd == null) return [];\n\nconst ultimo = Number(x.ultimo ?? x.preco);\nconst ultimo_brl = Math.round((ultimo * usd) * 100) / 100;\nconst ton_usd = (ultimo / 60) * 1000;\nconst ton_brl_calculado = ton_usd * usd;\nconst ton = Math.floor(ton_brl_calculado * 100) / 100;\nconst fator_rentabilidade = (55 * 60) / 1000; // 3.3\nconst rent_media = Math.round((ton_brl_calculado * fator_rentabilidade + Number.EPSILON) * 100) / 100;\n\nconst ctx = $('üìÖ Resolver Data').first().json;\n\nreturn [{ json: {\n  ativo: 'Soja Futuros', \n  data: ctx.dataBR,\n  ultimo, \n  ultimo_brl,\n  ton_usd: Math.round(ton_usd * 100) / 100,\n  ton: ton,\n  cotacao_dolar: usd, \n  rent_media,\n  moeda: 'USD', \n  fonte: 'Painel', \n  timestamp: new Date().toISOString(), \n  status: 'sucesso',\n  documentId: ctx.dateId\n}}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        352,
        -2512
      ],
      "id": "7182978a-3369-486e-9edb-c3370402336c",
      "name": "‚öôÔ∏è Preparar SOJA"
    },
    {
      "parameters": {
        "jsCode": "const mapped = $('üó∫Ô∏è Mapear Bases').first().json || {};\nconst eur = $('‚öôÔ∏è Preparar EUR').first()?.json?.ultimo;\nconst x = mapped.carbono; \nif (!x || x.ultimo == null || eur == null) return [];\n\nconst ultimo = Number(x.ultimo ?? x.preco);\nconst ultimo_brl = Math.round((ultimo * eur) * 100) / 100;\nconst rent_media_bruta = ultimo_brl * 2.59;\nconst rent_media = Math.floor(rent_media_bruta * 10000) / 10000; // 4 casas decimais, truncado como no Agendador\n\nconst ctx = $('üìÖ Resolver Data').first().json;\n\nreturn [{ json: {\n  ativo: 'Carbono', \n  data: ctx.dataBR,\n  ultimo, \n  ultimo_brl,\n  cotacao_euro: eur, \n  rent_media,\n  moeda: 'EUR', \n  fonte: 'Painel', \n  timestamp: new Date().toISOString(), \n  status: 'sucesso',\n  documentId: ctx.dateId\n}}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        352,
        -2064
      ],
      "id": "08376147-7573-4e07-90cc-e0ed31f0712c",
      "name": "‚öôÔ∏è Preparar CARBONO"
    },
    {
      "parameters": {
        "jsCode": "const mapped = $('üó∫Ô∏è Mapear Bases').first().json || {};\nconst x = mapped.boi; \nif (!x || x.ultimo == null) return [];\n\nconst ultimo = Number(x.ultimo ?? x.preco);\nconst ton = Math.round((((ultimo / 60) * 1000)) * 100) / 100;\nconst rent_media = Math.round((ton * 7.2) * 100) / 100;\n\nconst ctx = $('üìÖ Resolver Data').first().json;\n\nreturn [{ json: {\n  ativo: 'Boi Gordo', \n  data: ctx.dataBR,\n  ultimo, \n  ton,\n  rent_media,\n  moeda: 'BRL', \n  fonte: 'Painel', \n  timestamp: new Date().toISOString(), \n  status: 'sucesso',\n  documentId: ctx.dateId\n}}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        352,
        -1792
      ],
      "id": "2a72276d-ffe7-406d-af4c-a3f221c3c49f",
      "name": "‚öôÔ∏è Preparar BOI"
    },
    {
      "parameters": {
        "jsCode": "const mapped = $('üó∫Ô∏è Mapear Bases').first().json || {};\nconst x = mapped.milho; \nif (!x || x.ultimo == null) return [];\n\nconst ultimo = Number(x.ultimo ?? x.preco);\nconst ton = Math.round(((ultimo / 60) * 1000) * 100) / 100;\nconst rent_media = Math.round((ton * 7.2) * 100) / 100;\n\nconst ctx = $('üìÖ Resolver Data').first().json;\n\nreturn [{ json: {\n  ativo: 'Milho Futuros', \n  data: ctx.dataBR,\n  ultimo, \n  ton,\n  rent_media,\n  moeda: 'BRL', \n  fonte: 'Painel', \n  timestamp: new Date().toISOString(), \n  status: 'sucesso',\n  documentId: ctx.dateId\n}}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        352,
        -1568
      ],
      "id": "5a7f4174-fc81-4239-a2af-7c0cc06a78f5",
      "name": "‚öôÔ∏è Preparar MILHO"
    }
  ],
  "pinData": {},
  "connections": {
    "üîî Webhook Recalc": {
      "main": [
        [
          {
            "node": "‚úÖ Validar Payload",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "‚úÖ Validar Payload": {
      "main": [
        [
          {
            "node": "üü¢ Manual Overrides",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üü¢ Manual Overrides": {
      "main": [
        [
          {
            "node": "üó∫Ô∏è Mapear Bases",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üíæ Valor_Uso_Solo": {
      "main": [
        [
          {
            "node": "üìã Resposta",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üìä Consolidador de Cota√ß√µes": {
      "main": [
        [
          {
            "node": "üìã Resposta Final Consolidada",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üìã Resposta Final Consolidada": {
      "main": [
        [
          {
            "node": "üìã Resposta Final do Sistema",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üìã Resposta Final": {
      "main": [
        [
          {
            "node": "üìä Consolidador de Cota√ß√µes",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üìã Resposta Final1": {
      "main": [
        [
          {
            "node": "üìä Consolidador de Cota√ß√µes1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üìä Consolidador de Cota√ß√µes1": {
      "main": [
        [
          {
            "node": "üìã Resposta Final Consolidada1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üìã Resposta Final Consolidada1": {
      "main": [
        [
          {
            "node": "üìã Resposta Final do Sistema1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üìã Resposta Final2": {
      "main": [
        [
          {
            "node": "üìä Consolidador de Cota√ß√µes2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üìä Consolidador de Cota√ß√µes2": {
      "main": [
        [
          {
            "node": "üìã Resposta Final Consolidada2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üìã Resposta Final Consolidada2": {
      "main": [
        [
          {
            "node": "üìã Resposta Final do Sistema2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üìã Resposta Final3": {
      "main": [
        [
          {
            "node": "üìä Consolidador de Cota√ß√µes3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üìä Consolidador de Cota√ß√µes3": {
      "main": [
        [
          {
            "node": "üìã Resposta Final Consolidada3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üìã Resposta Final Consolidada3": {
      "main": [
        [
          {
            "node": "üìã Resposta Final do Sistema3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üìã Resposta Final4": {
      "main": [
        [
          {
            "node": "üìä Consolidador de Cota√ß√µes4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üìä Consolidador de Cota√ß√µes4": {
      "main": [
        [
          {
            "node": "üìã Resposta Final Consolidada4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üìã Resposta Final Consolidada4": {
      "main": [
        [
          {
            "node": "üìã Resposta Final do Sistema4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üìã Resposta Final5": {
      "main": [
        [
          {
            "node": "üìä Consolidador de Cota√ß√µes5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üìä Consolidador de Cota√ß√µes5": {
      "main": [
        [
          {
            "node": "üìã Resposta Final Consolidada5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üìã Resposta Final Consolidada5": {
      "main": [
        [
          {
            "node": "üìã Resposta Final do Sistema5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üìã Resposta Final6": {
      "main": [
        [
          {
            "node": "üìä Consolidador de Cota√ß√µes6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üìä Consolidador de Cota√ß√µes6": {
      "main": [
        [
          {
            "node": "üìã Resposta Final Consolidada6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üìã Resposta Final Consolidada6": {
      "main": [
        [
          {
            "node": "üìã Resposta Final do Sistema6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üìã Resposta Final do Sistema": {
      "main": [
        [
          {
            "node": "üßÆ Calcular CH2O Original",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üßÆ Calcular CH2O Original": {
      "main": [
        [
          {
            "node": "üíæ CH2O",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üßÆ Calcular Custo_√Ågua": {
      "main": [
        [
          {
            "node": "üíæ Custo_√Ågua",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üßÆ Calcular PDM": {
      "main": [
        [
          {
            "node": "üíæ PDM",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üßÆ Calcular UCS": {
      "main": [
        [
          {
            "node": "üíæ UCS",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üßÆ Calcular UCS ASE": {
      "main": [
        [
          {
            "node": "üíæ UCS ASE",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üìã Resposta Final CH2O Original": {
      "main": [
        [
          {
            "node": "üßÆ Calcular Custo_√Ågua",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üìã Resposta Final PDM": {
      "main": [
        [
          {
            "node": "üßÆ Calcular UCS",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üßÆ Calcular VUS": {
      "main": [
        [
          {
            "node": "üíæ VUS",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üßÆ Calcular Carbono_CRS": {
      "main": [
        [
          {
            "node": "üíæ Carbono_CRS",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üßÆ Calcular Agua_CRS": {
      "main": [
        [
          {
            "node": "üíæ Agua_CRS",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üßÆ Calcular Vmad": {
      "main": [
        [
          {
            "node": "üíæ Vmad",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üßÆ Calcular Valor_Uso_Solo": {
      "main": [
        [
          {
            "node": "üíæ Valor_Uso_Solo",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üíæ USD": {
      "main": [
        [
          {
            "node": "üìã Resposta Final6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üíæ CH2O": {
      "main": [
        [
          {
            "node": "üìã Resposta Final CH2O Original",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üíæ PDM": {
      "main": [
        [
          {
            "node": "üìã Resposta Final PDM",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üíæ Custo_√Ågua": {
      "main": [
        [
          {
            "node": "üßÆ Calcular PDM",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üíæ UCS ASE": {
      "main": [
        [
          {
            "node": "üßÆ Calcular VUS",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üíæ VUS": {
      "main": [
        [
          {
            "node": "üßÆ Calcular Carbono_CRS",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üíæ Carbono_CRS": {
      "main": [
        [
          {
            "node": "üßÆ Calcular Agua_CRS",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üíæ Agua_CRS": {
      "main": [
        [
          {
            "node": "üßÆ Calcular Vmad",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üíæ Vmad": {
      "main": [
        [
          {
            "node": "üßÆ Calcular Valor_Uso_Solo",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üíæ UCS": {
      "main": [
        [
          {
            "node": "üßÆ Calcular UCS ASE",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üíæ EUR": {
      "main": [
        [
          {
            "node": "üìã Resposta Final5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üíæ CARBONO": {
      "main": [
        [
          {
            "node": "üìã Resposta Final3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üíæ MILHO": {
      "main": [
        [
          {
            "node": "üìã Resposta Final",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üíæ BOI": {
      "main": [
        [
          {
            "node": "üìã Resposta Final2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üíæ SOJA": {
      "main": [
        [
          {
            "node": "üìã Resposta Final1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üíæ MADEIRA": {
      "main": [
        [
          {
            "node": "üìã Resposta Final4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üó∫Ô∏è Mapear Bases": {
      "main": [
        [
          {
            "node": "üìÖ Resolver Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üìã Resposta": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "‚öôÔ∏è Preparar USD": {
      "main": [
        [
          {
            "node": "üíæ USD",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üìÖ Resolver Data": {
      "main": [
        [
          {
            "node": "‚öôÔ∏è Preparar USD",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "‚öôÔ∏è Preparar MADEIRA": {
      "main": [
        [
          {
            "node": "üíæ MADEIRA",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "‚öôÔ∏è Preparar SOJA": {
      "main": [
        [
          {
            "node": "üíæ SOJA",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "‚öôÔ∏è Preparar EUR": {
      "main": [
        [
          {
            "node": "üíæ EUR",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "‚öôÔ∏è Preparar CARBONO": {
      "main": [
        [
          {
            "node": "üíæ CARBONO",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "‚öôÔ∏è Preparar BOI": {
      "main": [
        [
          {
            "node": "üíæ BOI",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "‚öôÔ∏è Preparar MILHO": {
      "main": [
        [
          {
            "node": "üíæ MILHO",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üìã Resposta Final do Sistema6": {
      "main": [
        [
          {
            "node": "‚öôÔ∏è Preparar MADEIRA",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üìã Resposta Final do Sistema4": {
      "main": [
        [
          {
            "node": "‚öôÔ∏è Preparar SOJA",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üìã Resposta Final do Sistema1": {
      "main": [
        [
          {
            "node": "‚öôÔ∏è Preparar EUR",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üìã Resposta Final do Sistema5": {
      "main": [
        [
          {
            "node": "‚öôÔ∏è Preparar CARBONO",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üìã Resposta Final do Sistema3": {
      "main": [
        [
          {
            "node": "‚öôÔ∏è Preparar BOI",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üìã Resposta Final do Sistema2": {
      "main": [
        [
          {
            "node": "‚öôÔ∏è Preparar MILHO",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "b186835c-0789-47fa-a8f6-7e91538e5d67",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "13b0ea5dd383d159ddd6c18778dc7059e86dde50c7b38850c42dfbb9a92940a0"
  },
  "id": "DqIKUC1cz6V7gOMJ",
  "tags": [
    {
      "createdAt": "2025-10-14T23:44:24.499Z",
      "updatedAt": "2025-10-14T23:44:24.499Z",
      "id": "OkbvZ5yWgZDUY8U8",
      "name": "automated-integration"
    },
    {
      "createdAt": "2025-10-14T23:44:24.630Z",
      "updatedAt": "2025-10-14T23:44:24.630Z",
      "id": "T7xqzMuZU1jN6sDY",
      "name": "firebase-reorganization"
    },
    {
      "createdAt": "2025-10-14T23:44:24.521Z",
      "updatedAt": "2025-10-14T23:44:24.521Z",
      "id": "dgLqEuv12XZh4gx8",
      "name": "commodities-optimized"
    },
    {
      "createdAt": "2025-10-14T23:44:24.472Z",
      "updatedAt": "2025-10-14T23:44:24.472Z",
      "id": "i1AffO2WDJASDaOP",
      "name": "ch2o-water-index"
    }
  ]
}