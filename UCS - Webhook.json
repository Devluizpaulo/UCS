{
  "name": "UCS - Webhook",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "ucs/recalc",
        "responseMode": "lastNode",
        "options": {}
      },
      "id": "91342cfd-eddf-4db1-8ff5-abd514fe8177",
      "name": "üîî Webhook Recalc",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        -400,
        3888
      ],
      "webhookId": "89ba4407-4fd0-411b-9155-cfe552d8648e"
    },
    {
      "parameters": {
        "jsCode": "const envKey = $env.N8N_AUDIT_API_KEY || '';\nconst qKey = $request.query?.key || '';\nconst hKey = $request.headers?.['x-audit-token'] || $request.headers?.['X-Audit-Token'] || '';\nif (!envKey || (qKey !== envKey && hKey !== envKey)) {\n  return [{ json: { status: 'erro', code: 401, msg: 'API key inv√°lida' } }];\n}\nconst body = $json || {};\n// Aceita formatos: { mode:'update', overrides:{...} } ou { origem:'audit-manual', ativos:{...}, data_especifica?:'YYYY-MM-DD' }\nconst hasOverrides = body && body.mode === 'update' && body.overrides && Object.keys(body.overrides).length > 0;\nconst hasAtivos = body && body.ativos && Object.keys(body.ativos).length > 0;\n// Validar data_especifica se enviada\nif (body.data_especifica && !/^\\d{4}-\\d{2}-\\d{2}$/.test(body.data_especifica)) {\n  return [{ json: { status: 'erro', code: 400, msg: 'data_especifica deve estar no formato YYYY-MM-DD' } }];\n}\nif (!hasOverrides && !hasAtivos) {\n  return [{ json: { status: 'erro', code: 400, msg: 'Payload inv√°lido: envie overrides ou ativos' } }];\n}\nreturn [{ json: body }];"
      },
      "id": "c7b393df-f533-417e-87c0-dd93cba5ecbf",
      "name": "‚úÖ Validar Payload",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -192,
        3888
      ]
    },
    {
      "parameters": {
        "jsCode": "const body = $json || {};\nconst ativosManual = body.ativos || {};\nconst overrides = body.overrides || {};\nconst dataEspecifica = body.data_especifica; // ‚Üê ADICIONAR ESTA LINHA\nconst map = (v) => (v != null ? { preco: v } : undefined);\nconst ativos = {\n  usd: ativosManual.usd || map(overrides.usd),\n  eur: ativosManual.eur || map(overrides.eur),\n  milho: ativosManual.milho || map(overrides.milho),\n  soja: ativosManual.soja || map(overrides.soja),\n  boi: ativosManual.boi || map(overrides.boi),\n  madeira: ativosManual.madeira || map(overrides.madeira),\n  carbono: ativosManual.carbono || map(overrides.carbono)\n};\nconst result = { origem:'audit-manual', ativos, timestamp: new Date().toISOString() };\nif (dataEspecifica) result.data_especifica = dataEspecifica; // ‚Üê ADICIONAR SE EXISTIR\nreturn [{ json: result }];"
      },
      "id": "498eb8a9-4fee-44f2-aa75-1a3e23ba355c",
      "name": "üü¢ Manual Overrides",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        0,
        3888
      ]
    },
    {
      "parameters": {
        "jsCode": "const body = $('üü¢ Manual Overrides').first().json || {};\nconst o = body.ativos || {};\nconst dataEspecifica = body.data_especifica; // Data enviada pelo painel\n\nconst now = new Date();\nconst iso = now.toISOString();\n\n// Usar data espec√≠fica se enviada, sen√£o usar atual\nconst dateId = dataEspecifica || iso.split('T')[0];\nconst br = dataEspecifica ? \n  new Date(dataEspecifica + 'T00:00:00').toLocaleDateString('pt-BR') : \n  now.toLocaleDateString('pt-BR');\n\nfunction base(label, val, moeda){ \n  if(!val || val.preco==null) return null; \n  const p = Number(val.preco); \n  return { \n    ativo: label, \n    data: br, \n    ultimo: p, \n    abertura: p, \n    maxima: p, \n    minima: p, \n    volume: null, \n    variacao_pct: null, \n    moeda, \n    fonte: 'Audit-Manual', \n    timestamp: iso, \n    status: 'sucesso', \n    documentId: dateId  // ‚Üê USA DATA ESPEC√çFICA OU ATUAL\n  }; \n}\n\nreturn [{ json: {\n  usd: base('USD/BRL', o.usd, 'BRL'),\n  eur: base('EUR/BRL', o.eur, 'BRL'),\n  milho: base('Milho Futuros', o.milho, 'BRL'),\n  soja: base('Soja Futuros', o.soja, 'USD'),\n  boi: base('Boi Gordo', o.boi, 'BRL'),\n  madeira: base('Madeira Serrada', o.madeira, 'USD'),\n  carbono: base('Carbono', o.carbono, 'EUR')\n} }];"
      },
      "id": "cdddb629-2501-460c-91be-b69ec6f41fa5",
      "name": "üó∫Ô∏è Mapear Bases",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        208,
        3888
      ]
    },
    {
      "parameters": {
        "authentication": "serviceAccount",
        "operation": "upsert",
        "projectId": "ucs-index-tracker",
        "collection": "usd",
        "updateKey": "documentId",
        "columns": "=ativo,data,ultimo,abertura,maxima,minima,volume,variacao_pct,moeda,fonte,timestamp,status,documentId"
      },
      "id": "f501fc53-e1c4-47e5-a1c0-482d0fd42580",
      "name": "üíæ USD",
      "type": "n8n-nodes-base.googleFirebaseCloudFirestore",
      "typeVersion": 1,
      "position": [
        528,
        0
      ],
      "credentials": {
        "googleApi": {
          "id": "Dqr74c3ldFzCyUyS",
          "name": "Google Firebase Cloud Firestore account"
        }
      }
    },
    {
      "parameters": {
        "authentication": "serviceAccount",
        "operation": "upsert",
        "projectId": "ucs-index-tracker",
        "collection": "eur",
        "updateKey": "documentId",
        "columns": "=ativo,data,ultimo,abertura,maxima,minima,volume,variacao_pct,moeda,fonte,timestamp,status,documentId"
      },
      "id": "6fcd729e-fcbd-49cf-8a6f-5c165cebc287",
      "name": "üíæ EUR",
      "type": "n8n-nodes-base.googleFirebaseCloudFirestore",
      "typeVersion": 1,
      "position": [
        512,
        688
      ],
      "credentials": {
        "googleApi": {
          "id": "Dqr74c3ldFzCyUyS",
          "name": "Google Firebase Cloud Firestore account"
        }
      }
    },
    {
      "parameters": {
        "authentication": "serviceAccount",
        "operation": "upsert",
        "projectId": "ucs-index-tracker",
        "collection": "milho",
        "updateKey": "documentId",
        "columns": "=ativo,data,ultimo,abertura,maxima,minima,volume,variacao_pct,moeda,fonte,timestamp,status,documentId"
      },
      "id": "56e35c42-26fc-4f7f-8f54-699c6b4c735b",
      "name": "üíæ MILHO",
      "type": "n8n-nodes-base.googleFirebaseCloudFirestore",
      "typeVersion": 1,
      "position": [
        528,
        1408
      ],
      "credentials": {
        "googleApi": {
          "id": "Dqr74c3ldFzCyUyS",
          "name": "Google Firebase Cloud Firestore account"
        }
      }
    },
    {
      "parameters": {
        "authentication": "serviceAccount",
        "operation": "upsert",
        "projectId": "ucs-index-tracker",
        "collection": "carbono",
        "updateKey": "documentId",
        "columns": "=ativo,data,ultimo,abertura,maxima,minima,volume,variacao_pct,moeda,fonte,timestamp,status,documentId"
      },
      "id": "cfce7c43-20ff-439d-a305-84e42bb8f6b3",
      "name": "üíæ CARBONO",
      "type": "n8n-nodes-base.googleFirebaseCloudFirestore",
      "typeVersion": 1,
      "position": [
        528,
        912
      ],
      "credentials": {
        "googleApi": {
          "id": "Dqr74c3ldFzCyUyS",
          "name": "Google Firebase Cloud Firestore account"
        }
      }
    },
    {
      "parameters": {
        "authentication": "serviceAccount",
        "operation": "upsert",
        "projectId": "ucs-index-tracker",
        "collection": "ch2o_agua",
        "updateKey": "documentId",
        "columns": "=ativo,data,valor,documentId,timestamp,status"
      },
      "id": "d6880ae4-90b1-4d85-afac-25f5e451c5f9",
      "name": "üíæ CH2O",
      "type": "n8n-nodes-base.googleFirebaseCloudFirestore",
      "typeVersion": 1,
      "position": [
        176,
        1584
      ],
      "credentials": {
        "googleApi": {
          "id": "Dqr74c3ldFzCyUyS",
          "name": "Google Firebase Cloud Firestore account"
        }
      }
    },
    {
      "parameters": {
        "authentication": "serviceAccount",
        "operation": "upsert",
        "projectId": "ucs-index-tracker",
        "collection": "custo_agua",
        "updateKey": "documentId",
        "columns": "=ativo,data,valor,documentId,timestamp,status"
      },
      "id": "092b721c-65ad-4871-9ab6-bf460f9e518b",
      "name": "üíæ Custo_√Ågua",
      "type": "n8n-nodes-base.googleFirebaseCloudFirestore",
      "typeVersion": 1,
      "position": [
        192,
        1760
      ],
      "credentials": {
        "googleApi": {
          "id": "Dqr74c3ldFzCyUyS",
          "name": "Google Firebase Cloud Firestore account"
        }
      }
    },
    {
      "parameters": {
        "authentication": "serviceAccount",
        "operation": "upsert",
        "projectId": "ucs-index-tracker",
        "collection": "pdm",
        "updateKey": "documentId",
        "columns": "=ativo,data,valor,documentId,timestamp,status"
      },
      "id": "a78410a7-46f7-4beb-9c17-ccd5914cab14",
      "name": "üíæ PDM",
      "type": "n8n-nodes-base.googleFirebaseCloudFirestore",
      "typeVersion": 1,
      "position": [
        192,
        1936
      ],
      "credentials": {
        "googleApi": {
          "id": "Dqr74c3ldFzCyUyS",
          "name": "Google Firebase Cloud Firestore account"
        }
      }
    },
    {
      "parameters": {
        "authentication": "serviceAccount",
        "operation": "upsert",
        "projectId": "ucs-index-tracker",
        "collection": "ucs",
        "updateKey": "documentId",
        "columns": "=ativo,data,valor,documentId,timestamp,status"
      },
      "id": "cb06a914-1d4c-4e3b-8ede-2fa023b8a7ba",
      "name": "üíæ UCS",
      "type": "n8n-nodes-base.googleFirebaseCloudFirestore",
      "typeVersion": 1,
      "position": [
        192,
        2112
      ],
      "credentials": {
        "googleApi": {
          "id": "Dqr74c3ldFzCyUyS",
          "name": "Google Firebase Cloud Firestore account"
        }
      }
    },
    {
      "parameters": {
        "authentication": "serviceAccount",
        "operation": "upsert",
        "projectId": "ucs-index-tracker",
        "collection": "ucs_ase",
        "updateKey": "documentId",
        "columns": "=ativo,data,valor_brl,valor_usd,valor_eur,documentId,timestamp,status"
      },
      "id": "6739a82d-0abe-4c21-98d0-7f9892fcc157",
      "name": "üíæ UCS ASE",
      "type": "n8n-nodes-base.googleFirebaseCloudFirestore",
      "typeVersion": 1,
      "position": [
        192,
        2288
      ],
      "credentials": {
        "googleApi": {
          "id": "Dqr74c3ldFzCyUyS",
          "name": "Google Firebase Cloud Firestore account"
        }
      }
    },
    {
      "parameters": {
        "authentication": "serviceAccount",
        "operation": "upsert",
        "projectId": "ucs-index-tracker",
        "collection": "vus",
        "updateKey": "documentId",
        "columns": "=ativo,data,valor,documentId,timestamp,status"
      },
      "id": "8a6aee4d-f170-4243-b860-b06c363be09a",
      "name": "üíæ VUS",
      "type": "n8n-nodes-base.googleFirebaseCloudFirestore",
      "typeVersion": 1,
      "position": [
        192,
        2464
      ],
      "credentials": {
        "googleApi": {
          "id": "Dqr74c3ldFzCyUyS",
          "name": "Google Firebase Cloud Firestore account"
        }
      }
    },
    {
      "parameters": {
        "authentication": "serviceAccount",
        "operation": "upsert",
        "projectId": "ucs-index-tracker",
        "collection": "carbono_crs",
        "updateKey": "documentId",
        "columns": "=ativo,data,valor,documentId,timestamp,status"
      },
      "id": "0c874fa5-a564-4773-8f98-04d49b5aef5a",
      "name": "üíæ Carbono_CRS",
      "type": "n8n-nodes-base.googleFirebaseCloudFirestore",
      "typeVersion": 1,
      "position": [
        192,
        2640
      ],
      "credentials": {
        "googleApi": {
          "id": "Dqr74c3ldFzCyUyS",
          "name": "Google Firebase Cloud Firestore account"
        }
      }
    },
    {
      "parameters": {
        "authentication": "serviceAccount",
        "operation": "upsert",
        "projectId": "ucs-index-tracker",
        "collection": "Agua_CRS",
        "updateKey": "documentId",
        "columns": "=ativo,data,valor,documentId,timestamp,status"
      },
      "id": "34e1ff24-c279-43cb-a8eb-61f2482c8862",
      "name": "üíæ Agua_CRS",
      "type": "n8n-nodes-base.googleFirebaseCloudFirestore",
      "typeVersion": 1,
      "position": [
        192,
        2816
      ],
      "credentials": {
        "googleApi": {
          "id": "Dqr74c3ldFzCyUyS",
          "name": "Google Firebase Cloud Firestore account"
        }
      }
    },
    {
      "parameters": {
        "authentication": "serviceAccount",
        "operation": "upsert",
        "projectId": "ucs-index-tracker",
        "collection": "vmad",
        "updateKey": "documentId",
        "columns": "=ativo,data,valor,documentId,timestamp,status"
      },
      "id": "5a49b22c-307e-4824-808d-87b347cbf8a9",
      "name": "üíæ Vmad",
      "type": "n8n-nodes-base.googleFirebaseCloudFirestore",
      "typeVersion": 1,
      "position": [
        192,
        2992
      ],
      "credentials": {
        "googleApi": {
          "id": "Dqr74c3ldFzCyUyS",
          "name": "Google Firebase Cloud Firestore account"
        }
      }
    },
    {
      "parameters": {
        "authentication": "serviceAccount",
        "operation": "upsert",
        "projectId": "ucs-index-tracker",
        "collection": "valor_uso_solo",
        "updateKey": "documentId",
        "columns": "=ativo,data,valor,documentId,timestamp,status"
      },
      "id": "ffe1e330-4ca4-4c00-8724-1bb67ef7ff43",
      "name": "üíæ Valor_Uso_Solo",
      "type": "n8n-nodes-base.googleFirebaseCloudFirestore",
      "typeVersion": 1,
      "position": [
        192,
        3168
      ],
      "credentials": {
        "googleApi": {
          "id": "Dqr74c3ldFzCyUyS",
          "name": "Google Firebase Cloud Firestore account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "return [{ json: { \n  status:'ok', \n  sobrescritos:['usd','eur','milho','soja','boi','madeira','carbono'], \n  derivados:['ch2o_agua','custo_agua','pdm','ucs','ucs_ase','vus','carbono_crs','Agua_CRS','vmad','valor_uso_solo'], \n  documentId: new Date().toISOString().split('T')[0]  // ‚Üê Opcional!\n} }];"
      },
      "id": "4fecdb36-71c0-4fe2-8ae2-ed708abae770",
      "name": "üìã Resposta",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        368,
        3168
      ]
    },
    {
      "parameters": {
        "extractionValues": {
          "values": [
            {
              "key": "preco",
              "cssSelector": "span[data-test='instrument-price-last'], .text-2xl, .instrument-price_instrument-price__*, [data-test*='price'], #last_last"
            },
            {
              "key": "fechamento_anterior",
              "cssSelector": "[data-test='instrument-prev-close'], .prev-close, [class*='prev'], [class*='previous'], [class*='close'], td:contains('Fechamento Anterior') + td, .instrument-metadata_instrument-metadata__kv__value, [data-test='prev-close'], .prev-close-value"
            },
            {
              "key": "abertura",
              "cssSelector": "[data-test='instrument-open'], .open, [class*='open'], td:contains('Abertura') + td, .instrument-metadata_instrument-metadata__kv__value, [data-test='open'], .open-value"
            }
          ]
        },
        "options": {}
      },
      "id": "3c45e42f-990a-4c52-8331-945ee2c4e745",
      "name": "üîç Extrair Pre√ßo",
      "type": "n8n-nodes-base.htmlExtract",
      "typeVersion": 1,
      "position": [
        0,
        1408
      ]
    },
    {
      "parameters": {
        "jsCode": "// Permite override manual mesmo sem input do n√≥ anterior\nconst inputFirst = $input.first?.() || $input.first();\nconst manualAtivos = $('üü¢ Manual Overrides').first()?.json?.ativos || {};\nconst ov = manualAtivos.milho;\n\n// Dados do HTML (se houver)\nlet precoExtraido = inputFirst?.json?.preco;\nlet fechamentoAnterior = inputFirst?.json?.fechamento_anterior;\nlet abertura = inputFirst?.json?.abertura;\n\n// Se houver override manual, prioriza\nif (ov && ov.preco != null) {\n  precoExtraido = String(ov.preco);\n  if (fechamentoAnterior == null || fechamentoAnterior === '') fechamentoAnterior = String(ov.preco);\n  if (abertura == null || abertura === '') abertura = String(ov.preco);\n}\n\n// Se n√£o h√° override, exige input v√°lido\nif ((precoExtraido === undefined || precoExtraido === null || String(precoExtraido).trim() === '') && !ov) {\n  return [{\n    json: {\n      ativo: 'Milho (Investing.com)',\n      erro: 'Pre√ßo n√£o encontrado (HTML) e nenhum override manual foi enviado.',\n      timestamp: new Date().toISOString(),\n      status: 'erro'\n    }\n  }];\n}\n\n// Fun√ß√£o para processar valores num√©ricos\nfunction processarValor(valor) {\n  if (valor === null || valor === undefined) return null;\n  if (typeof valor === 'number') return isFinite(valor) ? valor : null;\n\n  try {\n    const valorLimpo = String(valor)\n      .replace(/\\s/g, '')\n      .replace(/[R$]/g, '')\n      .replace(/\\./g, '')\n      .replace(/,/g, '.');\n\n    const n = parseFloat(valorLimpo);\n    return isNaN(n) ? null : n;\n  } catch {\n    return null;\n  }\n}\n\ntry {\n  const precoNumerico = processarValor(precoExtraido);\n  if (precoNumerico === null) {\n    throw new Error('Convers√£o para n√∫mero falhou: ' + precoExtraido);\n  }\n\n  const fechamentoAnteriorNumerico = processarValor(fechamentoAnterior);\n  const aberturaNumerico = processarValor(abertura);\n\n  // Fonte din√¢mica: override ‚Üí Audit-Manual, sen√£o ‚Üí Investing.com\n  const fonte = ov && ov.preco != null ? 'Audit-Manual' : 'Investing.com';\n\n  return [{\n    json: {\n      ativo: 'Milho (Investing.com)',\n      preco: precoNumerico,\n      preco_original: precoExtraido,\n      fechamento_anterior: fechamentoAnteriorNumerico,\n      fechamento_anterior_original: fechamentoAnterior,\n      abertura: aberturaNumerico,\n      abertura_original: abertura,\n      moeda: 'BRL',\n      fonte,\n      timestamp: new Date().toISOString(),\n      status: 'sucesso'\n    }\n  }];\n} catch (error) {\n  return [{\n    json: {\n      ativo: 'Milho (Investing.com)',\n      erro: 'Erro na convers√£o: ' + error.message,\n      preco_original: precoExtraido,\n      fechamento_anterior_original: fechamentoAnterior,\n      abertura_original: abertura,\n      timestamp: new Date().toISOString(),\n      status: 'erro'\n    }\n  }];\n}"
      },
      "id": "4bf87d7b-4b4e-412c-aeb5-79e23078521b",
      "name": "‚öôÔ∏è Processar Dados",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        176,
        1408
      ]
    },
    {
      "parameters": {
        "jsCode": "try {\n  const jsonResponse = $input.first().json;\n  const originalData = $('‚öôÔ∏è Processar Dados').first().json;\n\n  if (jsonResponse.status === 'erro') {\n    return [{\n      json: {\n        status: 'erro_json',\n        erro: jsonResponse.erro,\n        dados_originais: originalData,\n        timestamp: new Date().toISOString()\n      }\n    }];\n  }\n\n  return [{\n    json: {\n      status: 'sucesso',\n      mensagem: 'Dados salvos no JSON com sucesso',\n      dados_salvos: originalData,\n      arquivo: jsonResponse.arquivo,\n      timestamp: new Date().toISOString()\n    }\n  }];\n\n} catch (error) {\n  return [{\n    json: {\n      status: 'erro_final',\n      erro: 'Erro na resposta final: ' + error.message,\n      timestamp: new Date().toISOString()\n    }\n  }];\n}"
      },
      "id": "514da22d-a294-477e-b8d5-e36d2e7db640",
      "name": "üìã Resposta Final",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        720,
        1408
      ]
    },
    {
      "parameters": {
        "jsCode": "try {\n  // Coletar apenas os dados do milho\n  const milho = $('üíæ Salvar no JSON').first()?.json || null;\n\n  // Estruturar JSON final apenas com milho\n  const cotacoesConsolidadas = {\n    metadata: {\n      timestamp: new Date().toISOString(),\n      data_coleta: new Date().toLocaleDateString('pt-BR'),\n      total_ativos: milho ? 1 : 0,\n      fonte: 'Investing.com'\n    },\n    commodities: {\n      agricolas: {\n        milho: milho?.dados_formatados?.dados || null\n      }\n    },\n    status: {\n      milho: milho?.status || 'erro'\n    }\n  };\n\n  return [{ json: cotacoesConsolidadas }];\n\n} catch (error) {\n  return [{\n    json: {\n      erro: 'Erro ao consolidar cota√ß√µes: ' + error.message,\n      timestamp: new Date().toISOString(),\n      status: 'erro_consolidacao'\n    }\n  }];\n}"
      },
      "id": "150e6f87-97df-49f8-9f49-9e471711e5c4",
      "name": "üìä Consolidador de Cota√ß√µes",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        896,
        1408
      ]
    },
    {
      "parameters": {
        "jsCode": "// Retornar o JSON consolidado final\nconst dadosConsolidados = $input.first().json;\n\nreturn [{\n  json: {\n    mensagem: 'Cota√ß√µes consolidadas com sucesso!',\n    dados: dadosConsolidados,\n    timestamp: new Date().toISOString()\n  }\n}];"
      },
      "id": "a69b59df-e24c-4fb1-9e9d-e7ec372752f4",
      "name": "üìã Resposta Final Consolidada",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1088,
        1408
      ]
    },
    {
      "parameters": {
        "jsCode": "try {\n  // Receber dados do salvamento\n  const dadosSalvos = $input.first().json;\n  \n  return [{\n    json: {\n      status: 'sistema_completo',\n      mensagem: 'Sistema de consolida√ß√£o executado com sucesso!',\n      resultado: dadosSalvos,\n      total_cotacoes: 7,\n      timestamp_final: new Date().toISOString(),\n      resumo: {\n        commodities_agricolas: 3,\n        commodities_materiais: 2,\n        moedas: 2,\n        status_geral: dadosSalvos.status\n      }\n    }\n  }];\n  \n} catch (error) {\n  return [{ json: {\n    status: 'erro_sistema',\n    erro: 'Erro no sistema final: ' + error.message,\n    timestamp: new Date().toISOString()\n  } }];\n}"
      },
      "id": "02b46881-6b3a-4e30-ba29-6064c8864e74",
      "name": "üìã Resposta Final do Sistema",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1264,
        1408
      ]
    },
    {
      "parameters": {
        "extractionValues": {
          "values": [
            {
              "key": "preco",
              "cssSelector": "span[data-test='instrument-price-last'], .text-2xl, .instrument-price_instrument-price__*, [data-test*='price'], #last_last"
            },
            {
              "key": "fechamento_anterior",
              "cssSelector": "[data-test='instrument-prev-close'], .prev-close, [class*='prev'], [class*='previous'], [class*='close'], td:contains('Fechamento Anterior') + td, .instrument-metadata_instrument-metadata__kv__value, [data-test='prev-close'], .prev-close-value"
            },
            {
              "key": "abertura",
              "cssSelector": "[data-test='instrument-open'], .open, [class*='open'], td:contains('Abertura') + td, .instrument-metadata_instrument-metadata__kv__value, [data-test='open'], .open-value"
            }
          ]
        },
        "options": {}
      },
      "id": "cd3b9dc4-6428-4f08-97eb-ecc58bd2ae86",
      "name": "üîç Extrair Pre√ßo1",
      "type": "n8n-nodes-base.htmlExtract",
      "typeVersion": 1,
      "position": [
        0,
        464
      ]
    },
    {
      "parameters": {
        "jsCode": "// Permite override manual mesmo sem input do n√≥ anterior\nconst inputFirst = $input.first?.() || $input.first();\nconst manualAtivos = $('üü¢ Manual Overrides').first()?.json?.ativos || {};\nconst ov = manualAtivos.soja;\n\n// Dados do HTML (se houver)\nlet precoExtraido = inputFirst?.json?.preco;\nlet fechamentoAnterior = inputFirst?.json?.fechamento_anterior;\nlet abertura = inputFirst?.json?.abertura;\n\n// Se houver override manual, prioriza\nif (ov && ov.preco != null) {\n  precoExtraido = String(ov.preco);\n  if (fechamentoAnterior == null || fechamentoAnterior === '') fechamentoAnterior = String(ov.preco);\n  if (abertura == null || abertura === '') abertura = String(ov.preco);\n}\n\n// Se n√£o h√° override, exige input v√°lido\nif ((precoExtraido === undefined || precoExtraido === null || String(precoExtraido).trim() === '') && !ov) {\n  return [{\n    json: {\n      ativo: 'Soja (Investing.com)',\n      erro: 'Pre√ßo n√£o encontrado (HTML) e nenhum override manual foi enviado.',\n      timestamp: new Date().toISOString(),\n      status: 'erro'\n    }\n  }];\n}\n\n// Fun√ß√£o para processar valores num√©ricos\nfunction processarValor(valor) {\n  if (valor === null || valor === undefined) return null;\n  if (typeof valor === 'number') return isFinite(valor) ? valor : null;\n\n  try {\n    const valorLimpo = String(valor)\n      .replace(/\\s/g, '')\n      .replace(/[R$]/g, '')\n      .replace(/\\./g, '')\n      .replace(/,/g, '.');\n\n    const n = parseFloat(valorLimpo);\n    return isNaN(n) ? null : n;\n  } catch {\n    return null;\n  }\n}\n\ntry {\n  const precoNumerico = processarValor(precoExtraido);\n  if (precoNumerico === null) {\n    throw new Error('Convers√£o para n√∫mero falhou: ' + precoExtraido);\n  }\n\n  const fechamentoAnteriorNumerico = processarValor(fechamentoAnterior);\n  const aberturaNumerico = processarValor(abertura);\n\n  const fonte = ov && ov.preco != null ? 'Audit-Manual' : 'Investing.com';\n\n  return [{\n    json: {\n      ativo: 'Soja (Investing.com)',\n      preco: precoNumerico,\n      preco_original: precoExtraido,\n      fechamento_anterior: fechamentoAnteriorNumerico,\n      fechamento_anterior_original: fechamentoAnterior,\n      abertura: aberturaNumerico,\n      abertura_original: abertura,\n      moeda: 'USD',\n      fonte,\n      timestamp: new Date().toISOString(),\n      status: 'sucesso'\n    }\n  }];\n} catch (error) {\n  return [{\n    json: {\n      ativo: 'Soja (Investing.com)',\n      erro: 'Erro na convers√£o: ' + error.message,\n      preco_original: precoExtraido,\n      fechamento_anterior_original: fechamentoAnterior,\n      abertura_original: abertura,\n      timestamp: new Date().toISOString(),\n      status: 'erro'\n    }\n  }];\n}"
      },
      "id": "97e294c9-c6ca-49ba-83d7-253762f7d3d4",
      "name": "‚öôÔ∏è Processar Dados1",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        176,
        464
      ]
    },
    {
      "parameters": {
        "jsCode": "try {\n  const jsonResponse = $input.first().json;\n  const originalData = $('‚öôÔ∏è Processar Dados1').first().json;\n\n  if (jsonResponse.status === 'erro') {\n    return [{\n      json: {\n        status: 'erro_json',\n        erro: jsonResponse.erro,\n        dados_originais: originalData,\n        timestamp: new Date().toISOString()\n      }\n    }];\n  }\n\n  return [{\n    json: {\n      status: 'sucesso',\n      mensagem: 'Dados salvos no JSON com sucesso',\n      dados_salvos: originalData,\n      arquivo: jsonResponse.arquivo,\n      timestamp: new Date().toISOString()\n    }\n  }];\n\n} catch (error) {\n  return [{\n    json: {\n      status: 'erro_final',\n      erro: 'Erro na resposta final: ' + error.message,\n      timestamp: new Date().toISOString()\n    }\n  }];\n}"
      },
      "id": "aa4f902e-0273-400d-926d-a104acee3a19",
      "name": "üìã Resposta Final1",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        720,
        464
      ]
    },
    {
      "parameters": {
        "jsCode": "try {\n  // Coletar apenas os dados do milho\n  const milho = $('üíæ Salvar no JSON1').first()?.json || null;\n\n  // Estruturar JSON final apenas com milho\n  const cotacoesConsolidadas = {\n    metadata: {\n      timestamp: new Date().toISOString(),\n      data_coleta: new Date().toLocaleDateString('pt-BR'),\n      total_ativos: milho ? 1 : 0,\n      fonte: 'Investing.com'\n    },\n    commodities: {\n      agricolas: {\n        milho: milho?.dados_formatados?.dados || null\n      }\n    },\n    status: {\n      milho: milho?.status || 'erro'\n    }\n  };\n\n  return [{ json: cotacoesConsolidadas }];\n\n} catch (error) {\n  return [{\n    json: {\n      erro: 'Erro ao consolidar cota√ß√µes: ' + error.message,\n      timestamp: new Date().toISOString(),\n      status: 'erro_consolidacao'\n    }\n  }];\n}"
      },
      "id": "87f02064-293b-4519-926a-6a174cd2542c",
      "name": "üìä Consolidador de Cota√ß√µes1",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        896,
        464
      ]
    },
    {
      "parameters": {
        "jsCode": "// Retornar o JSON consolidado final\nconst dadosConsolidados = $input.first().json;\n\nreturn [{\n  json: {\n    mensagem: 'Cota√ß√µes consolidadas com sucesso!',\n    dados: dadosConsolidados,\n    timestamp: new Date().toISOString()\n  }\n}];"
      },
      "id": "24fdc40a-611d-4617-a23d-4b8d2f9e9c8d",
      "name": "üìã Resposta Final Consolidada1",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1088,
        464
      ]
    },
    {
      "parameters": {
        "jsCode": "try {\n  // Receber dados do salvamento\n  const dadosSalvos = $input.first().json;\n  \n  return [{\n    json: {\n      status: 'sistema_completo',\n      mensagem: 'Sistema de consolida√ß√£o executado com sucesso!',\n      resultado: dadosSalvos,\n      total_cotacoes: 7,\n      timestamp_final: new Date().toISOString(),\n      resumo: {\n        commodities_agricolas: 3,\n        commodities_materiais: 2,\n        moedas: 2,\n        status_geral: dadosSalvos.status\n      }\n    }\n  }];\n  \n} catch (error) {\n  return [{ json: {\n    status: 'erro_sistema',\n    erro: 'Erro no sistema final: ' + error.message,\n    timestamp: new Date().toISOString()\n  } }];\n}"
      },
      "id": "59901a5f-072f-404d-9031-d605ace809f4",
      "name": "üìã Resposta Final do Sistema1",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1264,
        464
      ]
    },
    {
      "parameters": {
        "extractionValues": {
          "values": [
            {
              "key": "preco",
              "cssSelector": "span[data-test='instrument-price-last'], .text-2xl, .instrument-price_instrument-price__*, [data-test*='price'], #last_last"
            },
            {
              "key": "fechamento_anterior",
              "cssSelector": "[data-test='instrument-prev-close'], .prev-close, [class*='prev'], [class*='previous'], [class*='close'], td:contains('Fechamento Anterior') + td, .instrument-metadata_instrument-metadata__kv__value, [data-test='prev-close'], .prev-close-value"
            },
            {
              "key": "abertura",
              "cssSelector": "[data-test='instrument-open'], .open, [class*='open'], td:contains('Abertura') + td, .instrument-metadata_instrument-metadata__kv__value, [data-test='open'], .open-value"
            }
          ]
        },
        "options": {}
      },
      "id": "c6c73876-5555-4044-9195-d516e19ea7a2",
      "name": "üîç Extrair Pre√ßo2",
      "type": "n8n-nodes-base.htmlExtract",
      "typeVersion": 1,
      "position": [
        0,
        1184
      ]
    },
    {
      "parameters": {
        "jsCode": "// Permite override manual mesmo sem input do n√≥ anterior\nconst inputFirst = $input.first?.() || $input.first();\nconst manualAtivos = $('üü¢ Manual Overrides').first()?.json?.ativos || {};\nconst ov = manualAtivos.boi;\n\n// Dados do HTML (se houver)\nlet precoExtraido = inputFirst?.json?.preco;\nlet fechamentoAnterior = inputFirst?.json?.fechamento_anterior;\nlet abertura = inputFirst?.json?.abertura;\n\n// Se houver override manual, prioriza\nif (ov && ov.preco != null) {\n  precoExtraido = String(ov.preco);\n  if (fechamentoAnterior == null || fechamentoAnterior === '') fechamentoAnterior = String(ov.preco);\n  if (abertura == null || abertura === '') abertura = String(ov.preco);\n}\n\n// Se n√£o h√° override, exige input v√°lido\nif ((precoExtraido === undefined || precoExtraido === null || String(precoExtraido).trim() === '') && !ov) {\n  return [{\n    json: {\n      ativo: 'Boi Gordo (Investing.com)',\n      erro: 'Pre√ßo n√£o encontrado (HTML) e nenhum override manual foi enviado.',\n      timestamp: new Date().toISOString(),\n      status: 'erro'\n    }\n  }];\n}\n\n// Fun√ß√£o para processar valores num√©ricos\nfunction processarValor(valor) {\n  if (valor === null || valor === undefined) return null;\n  if (typeof valor === 'number') return isFinite(valor) ? valor : null;\n\n  try {\n    const valorLimpo = String(valor)\n      .replace(/\\s/g, '')\n      .replace(/[R$]/g, '')\n      .replace(/\\./g, '')\n      .replace(/,/g, '.');\n\n    const n = parseFloat(valorLimpo);\n    return isNaN(n) ? null : n;\n  } catch {\n    return null;\n  }\n}\n\ntry {\n  const precoNumerico = processarValor(precoExtraido);\n  if (precoNumerico === null) {\n    throw new Error('Convers√£o para n√∫mero falhou: ' + precoExtraido);\n  }\n\n  const fechamentoAnteriorNumerico = processarValor(fechamentoAnterior);\n  const aberturaNumerico = processarValor(abertura);\n\n  const fonte = ov && ov.preco != null ? 'Audit-Manual' : 'Investing.com';\n\n  return [{\n    json: {\n      ativo: 'Boi Gordo (Investing.com)',\n      preco: precoNumerico,\n      preco_original: precoExtraido,\n      fechamento_anterior: fechamentoAnteriorNumerico,\n      fechamento_anterior_original: fechamentoAnterior,\n      abertura: aberturaNumerico,\n      abertura_original: abertura,\n      moeda: 'BRL',\n      fonte,\n      timestamp: new Date().toISOString(),\n      status: 'sucesso'\n    }\n  }];\n} catch (error) {\n  return [{\n    json: {\n      ativo: 'Boi Gordo (Investing.com)',\n      erro: 'Erro na convers√£o: ' + error.message,\n      preco_original: precoExtraido,\n      fechamento_anterior_original: fechamentoAnterior,\n      abertura_original: abertura,\n      timestamp: new Date().toISOString(),\n      status: 'erro'\n    }\n  }];\n}"
      },
      "id": "22ad7494-337b-4181-8fa9-0c1045a5b992",
      "name": "‚öôÔ∏è Processar Dados2",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        176,
        1184
      ]
    },
    {
      "parameters": {
        "jsCode": "try {\n  const jsonResponse = $input.first().json;\n  const originalData = $('‚öôÔ∏è Processar Dados2').first().json;\n\n  if (jsonResponse.status === 'erro') {\n    return [{\n      json: {\n        status: 'erro_json',\n        erro: jsonResponse.erro,\n        dados_originais: originalData,\n        timestamp: new Date().toISOString()\n      }\n    }];\n  }\n\n  return [{\n    json: {\n      status: 'sucesso',\n      mensagem: 'Dados salvos no JSON com sucesso',\n      dados_salvos: originalData,\n      arquivo: jsonResponse.arquivo,\n      timestamp: new Date().toISOString()\n    }\n  }];\n\n} catch (error) {\n  return [{\n    json: {\n      status: 'erro_final',\n      erro: 'Erro na resposta final: ' + error.message,\n      timestamp: new Date().toISOString()\n    }\n  }];\n}"
      },
      "id": "9888a03a-4862-4e03-9018-8e75027ea41a",
      "name": "üìã Resposta Final2",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        720,
        1184
      ]
    },
    {
      "parameters": {
        "jsCode": "try {\n  // Coletar apenas os dados do milho\n  const milho = $('üíæ Salvar no JSON2').first()?.json || null;\n\n  // Estruturar JSON final apenas com milho\n  const cotacoesConsolidadas = {\n    metadata: {\n      timestamp: new Date().toISOString(),\n      data_coleta: new Date().toLocaleDateString('pt-BR'),\n      total_ativos: milho ? 1 : 0,\n      fonte: 'Investing.com'\n    },\n    commodities: {\n      agricolas: {\n        milho: milho?.dados_formatados?.dados || null\n      }\n    },\n    status: {\n      milho: milho?.status || 'erro'\n    }\n  };\n\n  return [{ json: cotacoesConsolidadas }];\n\n} catch (error) {\n  return [{\n    json: {\n      erro: 'Erro ao consolidar cota√ß√µes: ' + error.message,\n      timestamp: new Date().toISOString(),\n      status: 'erro_consolidacao'\n    }\n  }];\n}"
      },
      "id": "9a1796a9-e1b6-4fba-bb6b-bea49bd73124",
      "name": "üìä Consolidador de Cota√ß√µes2",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        896,
        1184
      ]
    },
    {
      "parameters": {
        "jsCode": "// Retornar o JSON consolidado final\nconst dadosConsolidados = $input.first().json;\n\nreturn [{\n  json: {\n    mensagem: 'Cota√ß√µes consolidadas com sucesso!',\n    dados: dadosConsolidados,\n    timestamp: new Date().toISOString()\n  }\n}];"
      },
      "id": "05f2e182-6691-49d6-bf27-ac0925e54fff",
      "name": "üìã Resposta Final Consolidada2",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1088,
        1184
      ]
    },
    {
      "parameters": {
        "jsCode": "try {\n  // Receber dados do salvamento\n  const dadosSalvos = $input.first().json;\n  \n  return [{\n    json: {\n      status: 'sistema_completo',\n      mensagem: 'Sistema de consolida√ß√£o executado com sucesso!',\n      resultado: dadosSalvos,\n      total_cotacoes: 7,\n      timestamp_final: new Date().toISOString(),\n      resumo: {\n        commodities_agricolas: 3,\n        commodities_materiais: 2,\n        moedas: 2,\n        status_geral: dadosSalvos.status\n      }\n    }\n  }];\n  \n} catch (error) {\n  return [{ json: {\n    status: 'erro_sistema',\n    erro: 'Erro no sistema final: ' + error.message,\n    timestamp: new Date().toISOString()\n  } }];\n}"
      },
      "id": "1b16eab8-73c6-4820-a3b9-55c415fdb410",
      "name": "üìã Resposta Final do Sistema2",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1264,
        1184
      ]
    },
    {
      "parameters": {
        "extractionValues": {
          "values": [
            {
              "key": "preco",
              "cssSelector": "span[data-test='instrument-price-last'], .text-2xl, .instrument-price_instrument-price__*, [data-test*='price'], #last_last"
            },
            {
              "key": "fechamento_anterior",
              "cssSelector": "[data-test='instrument-prev-close'], .prev-close, [class*='prev'], [class*='previous'], [class*='close'], td:contains('Fechamento Anterior') + td, .instrument-metadata_instrument-metadata__kv__value, [data-test='prev-close'], .prev-close-value"
            },
            {
              "key": "abertura",
              "cssSelector": "[data-test='instrument-open'], .open, [class*='open'], td:contains('Abertura') + td, .instrument-metadata_instrument-metadata__kv__value, [data-test='open'], .open-value"
            }
          ]
        },
        "options": {}
      },
      "id": "a35e7efb-010e-46fa-bd35-629993b228e2",
      "name": "üîç Extrair Pre√ßo3",
      "type": "n8n-nodes-base.htmlExtract",
      "typeVersion": 1,
      "position": [
        0,
        912
      ]
    },
    {
      "parameters": {
        "jsCode": "// Permite override manual mesmo sem input do n√≥ anterior\nconst inputFirst = $input.first?.() || $input.first();\nconst manualAtivos = $('üü¢ Manual Overrides').first()?.json?.ativos || {};\nconst ov = manualAtivos.carbono;\n\n// Dados do HTML (se houver)\nlet precoExtraido = inputFirst?.json?.preco;\nlet fechamentoAnterior = inputFirst?.json?.fechamento_anterior;\nlet abertura = inputFirst?.json?.abertura;\n\n// Se houver override manual, prioriza\nif (ov && ov.preco != null) {\n  precoExtraido = String(ov.preco);\n  if (fechamentoAnterior == null || fechamentoAnterior === '') fechamentoAnterior = String(ov.preco);\n  if (abertura == null || abertura === '') abertura = String(ov.preco);\n}\n\n// Se n√£o h√° override, exige input v√°lido\nif ((precoExtraido === undefined || precoExtraido === null || String(precoExtraido).trim() === '') && !ov) {\n  return [{\n    json: {\n      ativo: 'Carbono (Investing.com)',\n      erro: 'Pre√ßo n√£o encontrado (HTML) e nenhum override manual foi enviado.',\n      timestamp: new Date().toISOString(),\n      status: 'erro'\n    }\n  }];\n}\n\n// Fun√ß√£o para processar valores num√©ricos\nfunction processarValor(valor) {\n  if (valor === null || valor === undefined) return null;\n  if (typeof valor === 'number') return isFinite(valor) ? valor : null;\n\n  try {\n    const valorLimpo = String(valor)\n      .replace(/\\s/g, '')\n      .replace(/[R$]/g, '')\n      .replace(/\\./g, '')\n      .replace(/,/g, '.');\n\n    const n = parseFloat(valorLimpo);\n    return isNaN(n) ? null : n;\n  } catch {\n    return null;\n  }\n}\n\ntry {\n  const precoNumerico = processarValor(precoExtraido);\n  if (precoNumerico === null) {\n    throw new Error('Convers√£o para n√∫mero falhou: ' + precoExtraido);\n  }\n\n  const fechamentoAnteriorNumerico = processarValor(fechamentoAnterior);\n  const aberturaNumerico = processarValor(abertura);\n\n  const fonte = ov && ov.preco != null ? 'Audit-Manual' : 'Investing.com';\n\n  return [{\n    json: {\n      ativo: 'Carbono (Investing.com)',\n      preco: precoNumerico,\n      preco_original: precoExtraido,\n      fechamento_anterior: fechamentoAnteriorNumerico,\n      fechamento_anterior_original: fechamentoAnterior,\n      abertura: aberturaNumerico,\n      abertura_original: abertura,\n      moeda: 'EUR',\n      fonte,\n      timestamp: new Date().toISOString(),\n      status: 'sucesso'\n    }\n  }];\n} catch (error) {\n  return [{\n    json: {\n      ativo: 'Carbono (Investing.com)',\n      erro: 'Erro na convers√£o: ' + error.message,\n      preco_original: precoExtraido,\n      fechamento_anterior_original: fechamentoAnterior,\n      abertura_original: abertura,\n      timestamp: new Date().toISOString(),\n      status: 'erro'\n    }\n  }];\n}"
      },
      "id": "254ace2c-2f86-41ee-bc23-7c2dde6f1bc8",
      "name": "‚öôÔ∏è Processar Dados3",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        176,
        912
      ]
    },
    {
      "parameters": {
        "jsCode": "try {\n  const jsonResponse = $input.first().json;\n  const originalData = $('‚öôÔ∏è Processar Dados3').first().json;\n\n  if (jsonResponse.status === 'erro') {\n    return [{\n      json: {\n        status: 'erro_json',\n        erro: jsonResponse.erro,\n        dados_originais: originalData,\n        timestamp: new Date().toISOString()\n      }\n    }];\n  }\n\n  return [{\n    json: {\n      status: 'sucesso',\n      mensagem: 'Dados salvos no JSON com sucesso',\n      dados_salvos: originalData,\n      arquivo: jsonResponse.arquivo,\n      timestamp: new Date().toISOString()\n    }\n  }];\n\n} catch (error) {\n  return [{\n    json: {\n      status: 'erro_final',\n      erro: 'Erro na resposta final: ' + error.message,\n      timestamp: new Date().toISOString()\n    }\n  }];\n}"
      },
      "id": "99d2e483-33fc-47c5-aa12-a370affb0d4e",
      "name": "üìã Resposta Final3",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        720,
        912
      ]
    },
    {
      "parameters": {
        "jsCode": "try {\n  // Coletar apenas os dados do milho\n  const milho = $('üíæ Salvar no JSON3').first()?.json || null;\n\n  // Estruturar JSON final apenas com milho\n  const cotacoesConsolidadas = {\n    metadata: {\n      timestamp: new Date().toISOString(),\n      data_coleta: new Date().toLocaleDateString('pt-BR'),\n      total_ativos: milho ? 1 : 0,\n      fonte: 'Investing.com'\n    },\n    commodities: {\n      agricolas: {\n        milho: milho?.dados_formatados?.dados || null\n      }\n    },\n    status: {\n      milho: milho?.status || 'erro'\n    }\n  };\n\n  return [{ json: cotacoesConsolidadas }];\n\n} catch (error) {\n  return [{\n    json: {\n      erro: 'Erro ao consolidar cota√ß√µes: ' + error.message,\n      timestamp: new Date().toISOString(),\n      status: 'erro_consolidacao'\n    }\n  }];\n}"
      },
      "id": "a6438463-9c73-4965-ad95-a40e8c14e929",
      "name": "üìä Consolidador de Cota√ß√µes3",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        896,
        912
      ]
    },
    {
      "parameters": {
        "jsCode": "// Retornar o JSON consolidado final\nconst dadosConsolidados = $input.first().json;\n\nreturn [{\n  json: {\n    mensagem: 'Cota√ß√µes consolidadas com sucesso!',\n    dados: dadosConsolidados,\n    timestamp: new Date().toISOString()\n  }\n}];"
      },
      "id": "a0f193df-fd31-4141-9d9a-18b136295e5b",
      "name": "üìã Resposta Final Consolidada3",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1088,
        912
      ]
    },
    {
      "parameters": {
        "jsCode": "try {\n  // Receber dados do salvamento\n  const dadosSalvos = $input.first().json;\n  \n  return [{\n    json: {\n      status: 'sistema_completo',\n      mensagem: 'Sistema de consolida√ß√£o executado com sucesso!',\n      resultado: dadosSalvos,\n      total_cotacoes: 7,\n      timestamp_final: new Date().toISOString(),\n      resumo: {\n        commodities_agricolas: 3,\n        commodities_materiais: 2,\n        moedas: 2,\n        status_geral: dadosSalvos.status\n      }\n    }\n  }];\n  \n} catch (error) {\n  return [{ json: {\n    status: 'erro_sistema',\n    erro: 'Erro no sistema final: ' + error.message,\n    timestamp: new Date().toISOString()\n  } }];\n}"
      },
      "id": "231e2d20-ca0e-4f59-8df3-103b4b77f8cd",
      "name": "üìã Resposta Final do Sistema3",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1264,
        912
      ]
    },
    {
      "parameters": {
        "jsCode": "try {\n  const jsonResponse = $input.first().json;\n  const originalData = $('‚öôÔ∏è Processar Dados4').first().json;\n\n  if (jsonResponse.status === 'erro') {\n    return [{\n      json: {\n        status: 'erro_json',\n        erro: jsonResponse.erro,\n        dados_originais: originalData,\n        timestamp: new Date().toISOString()\n      }\n    }];\n  }\n\n  return [{\n    json: {\n      status: 'sucesso',\n      mensagem: 'Dados salvos no JSON com sucesso',\n      dados_salvos: originalData,\n      arquivo: jsonResponse.arquivo,\n      timestamp: new Date().toISOString()\n    }\n  }];\n\n} catch (error) {\n  return [{\n    json: {\n      status: 'erro_final',\n      erro: 'Erro na resposta final: ' + error.message,\n      timestamp: new Date().toISOString()\n    }\n  }];\n}"
      },
      "id": "563f2fbb-5087-46d7-94b4-187893ebea79",
      "name": "üìã Resposta Final4",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        720,
        224
      ]
    },
    {
      "parameters": {
        "jsCode": "try {\n  // Coletar apenas os dados do milho\n  const milho = $('üíæ Salvar no JSON4').first()?.json || null;\n\n  // Estruturar JSON final apenas com milho\n  const cotacoesConsolidadas = {\n    metadata: {\n      timestamp: new Date().toISOString(),\n      data_coleta: new Date().toLocaleDateString('pt-BR'),\n      total_ativos: milho ? 1 : 0,\n      fonte: 'Investing.com'\n    },\n    commodities: {\n      agricolas: {\n        milho: milho?.dados_formatados?.dados || null\n      }\n    },\n    status: {\n      milho: milho?.status || 'erro'\n    }\n  };\n\n  return [{ json: cotacoesConsolidadas }];\n\n} catch (error) {\n  return [{\n    json: {\n      erro: 'Erro ao consolidar cota√ß√µes: ' + error.message,\n      timestamp: new Date().toISOString(),\n      status: 'erro_consolidacao'\n    }\n  }];\n}"
      },
      "id": "0d5b1d03-6a09-42d7-ac77-f0bd4c1bd32c",
      "name": "üìä Consolidador de Cota√ß√µes4",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        896,
        224
      ]
    },
    {
      "parameters": {
        "jsCode": "// Retornar o JSON consolidado final\nconst dadosConsolidados = $input.first().json;\n\nreturn [{\n  json: {\n    mensagem: 'Cota√ß√µes consolidadas com sucesso!',\n    dados: dadosConsolidados,\n    timestamp: new Date().toISOString()\n  }\n}];"
      },
      "id": "f7853d3a-cfbe-4799-b5a6-02fdae77d407",
      "name": "üìã Resposta Final Consolidada4",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1088,
        224
      ]
    },
    {
      "parameters": {
        "jsCode": "try {\n  // Receber dados do salvamento\n  const dadosSalvos = $input.first().json;\n  \n  return [{\n    json: {\n      status: 'sistema_completo',\n      mensagem: 'Sistema de consolida√ß√£o executado com sucesso!',\n      resultado: dadosSalvos,\n      total_cotacoes: 7,\n      timestamp_final: new Date().toISOString(),\n      resumo: {\n        commodities_agricolas: 3,\n        commodities_materiais: 2,\n        moedas: 2,\n        status_geral: dadosSalvos.status\n      }\n    }\n  }];\n  \n} catch (error) {\n  return [{ json: {\n    status: 'erro_sistema',\n    erro: 'Erro no sistema final: ' + error.message,\n    timestamp: new Date().toISOString()\n  } }];\n}"
      },
      "id": "98bccb87-4c65-4fd0-af67-b98bc170bc82",
      "name": "üìã Resposta Final do Sistema4",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1264,
        224
      ]
    },
    {
      "parameters": {
        "extractionValues": {
          "values": [
            {
              "key": "preco",
              "cssSelector": "span[data-test='instrument-price-last'], .text-2xl, .instrument-price_instrument-price__*, [data-test*='price'], #last_last"
            }
          ]
        },
        "options": {}
      },
      "id": "dc7d085b-e7b5-481b-ac1a-a8376807d86a",
      "name": "üîç Extrair Pre√ßo5",
      "type": "n8n-nodes-base.htmlExtract",
      "typeVersion": 1,
      "position": [
        0,
        0
      ]
    },
    {
      "parameters": {
        "jsCode": "try {\n  const inputData = $input.first().json;\n\n  if (inputData.erro) {\n    return [{ json: inputData }];\n  }\n\n  // Preparar dados para o Firebase Firestore\n  const currentDate = new Date().toISOString().split('T')[0];\n  const [year, month, day] = currentDate.split('-');\n  const brazilianDate = `${day}/${month}/${year}`;\n  \n  return [\n    {\n      json: {\n        ativo: 'USD/BRL',\n        data: brazilianDate,\n        ultimo: inputData.preco,\n        abertura: inputData.preco,\n        maxima: inputData.preco,\n        minima: inputData.preco,\n        volume: null,\n        variacao_pct: null,\n        moeda: inputData.moeda,\n        fonte: inputData.fonte,\n        timestamp: inputData.timestamp,\n        status: inputData.status,\n        documentId: new Date().toISOString().split('T')[0]  // ‚Üí \"2025-10-08\"\n      }\n    }\n  ];\n} catch (error) {\n  return [\n    {\n      json: {\n        erro: \"Erro ao preparar Firebase: \" + error.message,\n        timestamp: new Date().toISOString(),\n        status: \"erro_firebase_prep\",\n      },\n    },\n  ];\n}"
      },
      "id": "0fdb7d64-7cbd-40c6-86f8-0d5ff12606a9",
      "name": "üîë Preparar Firebase5",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        352,
        0
      ]
    },
    {
      "parameters": {
        "extractionValues": {
          "values": [
            {
              "key": "preco",
              "cssSelector": "span[data-test='instrument-price-last'], .text-2xl, .instrument-price_instrument-price__*, [data-test*='price'], #last_last"
            }
          ]
        },
        "options": {}
      },
      "id": "165a611c-6ce0-4879-8c0f-fde8a384e6ac",
      "name": "üîç Extrair Pre√ßo6",
      "type": "n8n-nodes-base.htmlExtract",
      "typeVersion": 1,
      "position": [
        0,
        688
      ]
    },
    {
      "parameters": {
        "jsCode": "try {\n  const inputData = $input.first().json;\n\n  if (inputData.erro) {\n    return [{ json: inputData }];\n  }\n\n  // Preparar dados para o Firebase Firestore\n  const currentDate = new Date().toISOString().split('T')[0];\n  const [year, month, day] = currentDate.split('-');\n  const brazilianDate = `${day}/${month}/${year}`;\n  \n  return [\n    {\n      json: {\n        ativo: 'EUR/BRL',\n        data: brazilianDate,\n        ultimo: inputData.preco,\n        abertura: inputData.preco,\n        maxima: inputData.preco,\n        minima: inputData.preco,\n        volume: null,\n        variacao_pct: null,\n        moeda: inputData.moeda,\n        fonte: inputData.fonte,\n        timestamp: inputData.timestamp,\n        status: inputData.status,\n        documentId: new Date().toISOString().split('T')[0]  // ‚Üí \"2025-10-08\"\n      }\n    }\n  ];\n} catch (error) {\n  return [\n    {\n      json: {\n        erro: \"Erro ao preparar Firebase: \" + error.message,\n        timestamp: new Date().toISOString(),\n        status: \"erro_firebase_prep\",\n      },\n    },\n  ];\n}"
      },
      "id": "33206626-5769-46a2-a841-0e6d6c4b4451",
      "name": "üîë Preparar Firebase6",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        352,
        688
      ]
    },
    {
      "parameters": {
        "jsCode": "try {\n  const jsonResponse = $input.first().json;\n  const originalData = $('‚öôÔ∏è Processar Dados1').first().json;\n\n  if (jsonResponse.status === 'erro') {\n    return [{\n      json: {\n        status: 'erro_json',\n        erro: jsonResponse.erro,\n        dados_originais: originalData,\n        timestamp: new Date().toISOString()\n      }\n    }];\n  }\n\n  return [{\n    json: {\n      status: 'sucesso',\n      mensagem: 'Dados salvos no JSON com sucesso',\n      dados_salvos: originalData,\n      arquivo: jsonResponse.arquivo,\n      timestamp: new Date().toISOString()\n    }\n  }];\n\n} catch (error) {\n  return [{\n    json: {\n      status: 'erro_final',\n      erro: 'Erro na resposta final: ' + error.message,\n      timestamp: new Date().toISOString()\n    }\n  }];\n}"
      },
      "id": "3360f69b-5a18-4381-a71d-1e8df88c328f",
      "name": "üìã Resposta Final5",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        704,
        688
      ]
    },
    {
      "parameters": {
        "jsCode": "try {\n  // Coletar apenas os dados do milho\n  const milho = $('üíæ Salvar no JSON1').first()?.json || null;\n\n  // Estruturar JSON final apenas com milho\n  const cotacoesConsolidadas = {\n    metadata: {\n      timestamp: new Date().toISOString(),\n      data_coleta: new Date().toLocaleDateString('pt-BR'),\n      total_ativos: milho ? 1 : 0,\n      fonte: 'Investing.com'\n    },\n    commodities: {\n      agricolas: {\n        milho: milho?.dados_formatados?.dados || null\n      }\n    },\n    status: {\n      milho: milho?.status || 'erro'\n    }\n  };\n\n  return [{ json: cotacoesConsolidadas }];\n\n} catch (error) {\n  return [{\n    json: {\n      erro: 'Erro ao consolidar cota√ß√µes: ' + error.message,\n      timestamp: new Date().toISOString(),\n      status: 'erro_consolidacao'\n    }\n  }];\n}"
      },
      "id": "276726db-7d7c-4196-95ed-c40c6f76c2ff",
      "name": "üìä Consolidador de Cota√ß√µes5",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        896,
        688
      ]
    },
    {
      "parameters": {
        "jsCode": "// Retornar o JSON consolidado final\nconst dadosConsolidados = $input.first().json;\n\nreturn [{\n  json: {\n    mensagem: 'Cota√ß√µes consolidadas com sucesso!',\n    dados: dadosConsolidados,\n    timestamp: new Date().toISOString()\n  }\n}];"
      },
      "id": "b7525072-fbcd-431b-9d36-8b53d07e0188",
      "name": "üìã Resposta Final Consolidada5",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1088,
        688
      ]
    },
    {
      "parameters": {
        "jsCode": "try {\n  // Receber dados do salvamento\n  const dadosSalvos = $input.first().json;\n  \n  return [{\n    json: {\n      status: 'sistema_completo',\n      mensagem: 'Sistema de consolida√ß√£o executado com sucesso!',\n      resultado: dadosSalvos,\n      total_cotacoes: 7,\n      timestamp_final: new Date().toISOString(),\n      resumo: {\n        commodities_agricolas: 3,\n        commodities_materiais: 2,\n        moedas: 2,\n        status_geral: dadosSalvos.status\n      }\n    }\n  }];\n  \n} catch (error) {\n  return [{ json: {\n    status: 'erro_sistema',\n    erro: 'Erro no sistema final: ' + error.message,\n    timestamp: new Date().toISOString()\n  } }];\n}"
      },
      "id": "c35d2b99-4254-4169-97e5-da43d9181aac",
      "name": "üìã Resposta Final do Sistema5",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1264,
        688
      ]
    },
    {
      "parameters": {
        "jsCode": "try {\n  const jsonResponse = $input.first().json;\n  const originalData = $('‚öôÔ∏è Processar Dados1').first().json;\n\n  if (jsonResponse.status === 'erro') {\n    return [{\n      json: {\n        status: 'erro_json',\n        erro: jsonResponse.erro,\n        dados_originais: originalData,\n        timestamp: new Date().toISOString()\n      }\n    }];\n  }\n\n  return [{\n    json: {\n      status: 'sucesso',\n      mensagem: 'Dados salvos no JSON com sucesso',\n      dados_salvos: originalData,\n      arquivo: jsonResponse.arquivo,\n      timestamp: new Date().toISOString()\n    }\n  }];\n\n} catch (error) {\n  return [{\n    json: {\n      status: 'erro_final',\n      erro: 'Erro na resposta final: ' + error.message,\n      timestamp: new Date().toISOString()\n    }\n  }];\n}"
      },
      "id": "2086aae7-d645-40cc-892c-c86a7fc6a509",
      "name": "üìã Resposta Final6",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        704,
        0
      ]
    },
    {
      "parameters": {
        "jsCode": "try {\n  // Coletar apenas os dados do milho\n  const milho = $('üíæ Salvar no JSON1').first()?.json || null;\n\n  // Estruturar JSON final apenas com milho\n  const cotacoesConsolidadas = {\n    metadata: {\n      timestamp: new Date().toISOString(),\n      data_coleta: new Date().toLocaleDateString('pt-BR'),\n      total_ativos: milho ? 1 : 0,\n      fonte: 'Investing.com'\n    },\n    commodities: {\n      agricolas: {\n        milho: milho?.dados_formatados?.dados || null\n      }\n    },\n    status: {\n      milho: milho?.status || 'erro'\n    }\n  };\n\n  return [{ json: cotacoesConsolidadas }];\n\n} catch (error) {\n  return [{\n    json: {\n      erro: 'Erro ao consolidar cota√ß√µes: ' + error.message,\n      timestamp: new Date().toISOString(),\n      status: 'erro_consolidacao'\n    }\n  }];\n}"
      },
      "id": "088cf66a-b3d5-4f22-a841-f9d739630c24",
      "name": "üìä Consolidador de Cota√ß√µes6",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        896,
        0
      ]
    },
    {
      "parameters": {
        "jsCode": "// Retornar o JSON consolidado final\nconst dadosConsolidados = $input.first().json;\n\nreturn [{\n  json: {\n    mensagem: 'Cota√ß√µes consolidadas com sucesso!',\n    dados: dadosConsolidados,\n    timestamp: new Date().toISOString()\n  }\n}];"
      },
      "id": "59c98533-29f1-47b1-81fe-2410ee49a35f",
      "name": "üìã Resposta Final Consolidada6",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1088,
        0
      ]
    },
    {
      "parameters": {
        "jsCode": "try {\n  // Receber dados do salvamento\n  const dadosSalvos = $input.first().json;\n  \n  return [{\n    json: {\n      status: 'sistema_completo',\n      mensagem: 'Sistema de consolida√ß√£o executado com sucesso!',\n      resultado: dadosSalvos,\n      total_cotacoes: 7,\n      timestamp_final: new Date().toISOString(),\n      resumo: {\n        commodities_agricolas: 3,\n        commodities_materiais: 2,\n        moedas: 2,\n        status_geral: dadosSalvos.status\n      }\n    }\n  }];\n  \n} catch (error) {\n  return [{ json: {\n    status: 'erro_sistema',\n    erro: 'Erro no sistema final: ' + error.message,\n    timestamp: new Date().toISOString()\n  } }];\n}"
      },
      "id": "febc4375-280d-4150-bbc0-700efb6a016b",
      "name": "üìã Resposta Final do Sistema6",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1264,
        0
      ]
    },
    {
      "parameters": {
        "extractionValues": {
          "values": [
            {
              "key": "preco",
              "cssSelector": "span[data-test='instrument-price-last'], .text-2xl, .instrument-price_instrument-price__*, [data-test*='price'], #last_last"
            },
            {
              "key": "fechamento_anterior",
              "cssSelector": "[data-test='instrument-prev-close'], .prev-close, [class*='prev'], [class*='previous'], [class*='close'], td:contains('Fechamento Anterior') + td, .instrument-metadata_instrument-metadata__kv__value, [data-test='prev-close'], .prev-close-value"
            },
            {
              "key": "abertura",
              "cssSelector": "[data-test='instrument-open'], .open, [class*='open'], td:contains('Abertura') + td, .instrument-metadata_instrument-metadata__kv__value, [data-test='open'], .open-value"
            }
          ]
        },
        "options": {}
      },
      "id": "96ce343d-6c9b-4716-a194-230e021e6829",
      "name": "üîç Extrair Pre√ßo9",
      "type": "n8n-nodes-base.htmlExtract",
      "typeVersion": 1,
      "position": [
        0,
        224
      ]
    },
    {
      "parameters": {
        "jsCode": "// Verifica se veio dados do n√≥ anterior (mas permite override manual mesmo sem input)\nconst inputFirst = $input.first?.() || $input.first();\nif (inputFirst === undefined && !$('üü¢ Manual Overrides').first()) {\n  return [{ json: { \n    erro: 'Nenhum dado recebido do n√≥ anterior e sem override manual.',\n    timestamp: new Date().toISOString(),\n    status: 'erro'\n  } }];\n}\n\n// Pega os dados extra√≠dos do HTML (se houver)\nlet precoExtraido = inputFirst?.json?.preco;\nlet fechamentoAnterior = inputFirst?.json?.fechamento_anterior;\nlet abertura = inputFirst?.json?.abertura;\n\n// Override manual (se enviado pelo webhook /ucs/manual)\nconst manualAtivos = $('üü¢ Manual Overrides').first()?.json?.ativos || {};\nconst ov = manualAtivos.madeira;\n\n// Se houver override, prioriza o valor manual\nif (ov && ov.preco != null) {\n  precoExtraido = String(ov.preco);\n  if (fechamentoAnterior == null || fechamentoAnterior === '') fechamentoAnterior = String(ov.preco);\n  if (abertura == null || abertura === '') abertura = String(ov.preco);\n}\n\n// Verifica se o pre√ßo foi encontrado (ap√≥s considerar override)\nif (precoExtraido === undefined || precoExtraido === null || String(precoExtraido).trim() === '') {\n  return [{ json: { \n    ativo: 'Madeira Serrada (Investing.com)',\n    erro: 'Pre√ßo n√£o encontrado (HTML) e nenhum override manual foi enviado.',\n    timestamp: new Date().toISOString(),\n    status: 'erro'\n  } }];\n}\n\n// Fun√ß√£o para processar valores num√©ricos\nfunction processarValor(valor) {\n  if (valor === null || valor === undefined) return null;\n  if (typeof valor === 'number') return isFinite(valor) ? valor : null;\n\n  try {\n    let valorLimpo = String(valor)\n      .replace(/\\s/g, '')\n      .replace(/[R$]/g, '')\n      .replace(/\\./g, '')\n      .replace(/,/g, '.');\n\n    const numerico = parseFloat(valorLimpo);\n    return isNaN(numerico) ? null : numerico;\n  } catch {\n    return null;\n  }\n}\n\ntry {\n  // Converte principal e auxiliares\n  const precoNumerico = processarValor(precoExtraido);\n  if (precoNumerico === null) {\n    throw new Error('Convers√£o para n√∫mero falhou: ' + precoExtraido);\n  }\n\n  const fechamentoAnteriorNumerico = processarValor(fechamentoAnterior);\n  const aberturaNumerico = processarValor(abertura);\n\n  // Fonte din√¢mica: override ‚Üí Audit-Manual, sen√£o ‚Üí Investing.com\n  const fonte = ov && ov.preco != null ? 'Audit-Manual' : 'Investing.com';\n\n  return [{\n    json: {\n      ativo: 'Madeira Serrada (Investing.com)',\n      preco: precoNumerico,\n      preco_original: precoExtraido,\n      fechamento_anterior: fechamentoAnteriorNumerico,\n      fechamento_anterior_original: fechamentoAnterior,\n      abertura: aberturaNumerico,\n      abertura_original: abertura,\n      moeda: 'USD',\n      fonte,\n      timestamp: new Date().toISOString(),\n      status: 'sucesso'\n    }\n  }];\n} catch (error) {\n  return [{\n    json: {\n      ativo: 'Madeira Serrada (Investing.com)',\n      erro: 'Erro na convers√£o: ' + error.message,\n      preco_original: precoExtraido,\n      fechamento_anterior_original: fechamentoAnterior,\n      abertura_original: abertura,\n      timestamp: new Date().toISOString(),\n      status: 'erro'\n    }\n  }];\n}"
      },
      "id": "5c852480-a656-4013-bc1f-20dfcafde9ca",
      "name": "‚öôÔ∏è Processar Dados9",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        176,
        224
      ]
    },
    {
      "parameters": {
        "jsCode": "// Permite override manual mesmo sem input do n√≥ anterior\nconst inputFirst = $input.first?.() || $input.first();\nconst manualAtivos = $('üü¢ Manual Overrides').first()?.json?.ativos || {};\nconst ov = manualAtivos.usd;\n\n// Valor vindo do HTML (se houver)\nlet precoExtraido = inputFirst?.json?.preco;\n\n// Se houver override manual, prioriza\nif (ov && ov.preco != null) {\n  const precoNum = Number(ov.preco);\n  if (!isFinite(precoNum)) {\n    return [{ json: { ativo: 'USD/BRL (Investing.com)', erro: 'Override inv√°lido (n√£o num√©rico).', timestamp: new Date().toISOString(), status: 'erro' } }];\n  }\n  return [{\n    json: {\n      ativo: 'USD/BRL (Investing.com)',\n      preco: precoNum,\n      preco_original: String(ov.preco),\n      moeda: 'BRL',\n      fonte: 'Audit-Manual',\n      timestamp: new Date().toISOString(),\n      status: 'sucesso'\n    }\n  }];\n}\n\n// Se n√£o h√° override, exige input\nif (inputFirst === undefined) {\n  return [{ json: { erro: 'Nenhum dado recebido do n√≥ anterior e sem override manual.', timestamp: new Date().toISOString(), status: 'erro' } }];\n}\n\n// Verifica se o pre√ßo foi encontrado no HTML\nif (precoExtraido === undefined || precoExtraido === null || String(precoExtraido).trim() === '') {\n  return [{ json: { \n    ativo: 'USD/BRL (Investing.com)',\n    erro: 'Pre√ßo n√£o encontrado no HTML e sem override.',\n    timestamp: new Date().toISOString(),\n    status: 'erro'\n  } }];\n}\n\ntry {\n  // Normaliza e converte\n  const precoLimpo = String(precoExtraido)\n    .replace(/\\s/g, '')\n    .replace(/[R$]/g, '')\n    .replace(/\\./g, '')\n    .replace(/,/g, '.');\n\n  const precoNumerico = parseFloat(precoLimpo);\n  if (!isFinite(precoNumerico)) {\n    throw new Error('Convers√£o para n√∫mero falhou: ' + precoExtraido);\n  }\n\n  return [{\n    json: {\n      ativo: 'USD/BRL (Investing.com)',\n      preco: precoNumerico,\n      preco_original: precoExtraido,\n      moeda: 'BRL',\n      fonte: 'Investing.com',\n      timestamp: new Date().toISOString(),\n      status: 'sucesso'\n    }\n  }];\n} catch (error) {\n  return [{\n    json: {\n      ativo: 'USD/BRL (Investing.com)',\n      erro: 'Erro na convers√£o: ' + error.message,\n      preco_original: precoExtraido,\n      timestamp: new Date().toISOString(),\n      status: 'erro'\n    }\n  }];\n}"
      },
      "id": "566851a6-3ae0-4bd0-a48d-598d358c4b70",
      "name": "USD",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        176,
        0
      ]
    },
    {
      "parameters": {
        "jsCode": "// Permite override manual mesmo sem input do n√≥ anterior\nconst inputFirst = $input.first?.() || $input.first();\nconst manualAtivos = $('üü¢ Manual Overrides').first()?.json?.ativos || {};\nconst ov = manualAtivos.eur;\n\n// Valor do HTML (se houver)\nlet precoExtraido = inputFirst?.json?.preco;\n\n// Se houver override manual, prioriza e retorna direto\nif (ov && ov.preco != null) {\n  const precoNum = Number(ov.preco);\n  if (!isFinite(precoNum)) {\n    return [{ json: { ativo: 'EUR/BRL (Investing.com)', erro: 'Override inv√°lido (n√£o num√©rico).', timestamp: new Date().toISOString(), status: 'erro' } }];\n  }\n  return [{\n    json: {\n      ativo: 'EUR/BRL (Investing.com)',\n      preco: precoNum,\n      preco_original: String(ov.preco),\n      moeda: 'BRL',\n      fonte: 'Audit-Manual',\n      timestamp: new Date().toISOString(),\n      status: 'sucesso'\n    }\n  }];\n}\n\n// Sem override: exige input\nif (inputFirst === undefined) {\n  return [{ json: { erro: 'Nenhum dado recebido do n√≥ anterior e sem override manual.', timestamp: new Date().toISOString(), status: 'erro' } }];\n}\n\n// Verifica pre√ßo no HTML\nif (precoExtraido === undefined || precoExtraido === null || String(precoExtraido).trim() === '') {\n  return [{ json: { \n    ativo: 'EUR/BRL (Investing.com)',\n    erro: 'Pre√ßo n√£o encontrado no HTML e sem override.',\n    timestamp: new Date().toISOString(),\n    status: 'erro'\n  } }];\n}\n\ntry {\n  const precoLimpo = String(precoExtraido)\n    .replace(/\\s/g, '')\n    .replace(/[R$]/g, '')\n    .replace(/\\./g, '')\n    .replace(/,/g, '.');\n\n  const precoNumerico = parseFloat(precoLimpo);\n  if (!isFinite(precoNumerico)) {\n    throw new Error('Convers√£o para n√∫mero falhou: ' + precoExtraido);\n  }\n\n  return [{\n    json: {\n      ativo: 'EUR/BRL (Investing.com)',\n      preco: precoNumerico,\n      preco_original: precoExtraido,\n      moeda: 'BRL',\n      fonte: 'Investing.com',\n      timestamp: new Date().toISOString(),\n      status: 'sucesso'\n    }\n  }];\n} catch (error) {\n  return [{\n    json: {\n      ativo: 'EUR/BRL (Investing.com)',\n      erro: 'Erro na convers√£o: ' + error.message,\n      preco_original: precoExtraido,\n      timestamp: new Date().toISOString(),\n      status: 'erro'\n    }\n  }];\n}"
      },
      "id": "178bdc9c-d44a-43f3-bfa6-153bd153c9cc",
      "name": "EUR",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        176,
        688
      ]
    },
    {
      "parameters": {
        "jsCode": "try {\n  const inputData = $input.first().json;\n\n  if (inputData.erro) {\n    return [{ json: inputData }];\n  }\n\n  // Obter a cota√ß√£o do EUR/BRL\n  const dadosEuro = $('EUR').first().json;\n  const cotacaoEuro = dadosEuro.preco;\n\n  // Preparar dados para salvar no JSON\n  const currentDate = new Date().toISOString().split('T')[0];\n  const [year, month, day] = currentDate.split('-');\n  const brazilianDate = `${day}/${month}/${year}`;\n  \n  // **C√ÅLCULO COM ALTA PRECIS√ÉO (igual planilha)**\n  const carbonoBRL = inputData.preco * cotacaoEuro;\n  const rentMediaBruta = carbonoBRL * 2.59;\n  \n  // **MANTER 4 CASAS DECIMAIS como a planilha**\n  const rentMedia = Math.floor(rentMediaBruta * 10000) / 10000;\n\n  return [\n    {\n      json: {\n        ativo: 'Carbono',\n        data: brazilianDate,\n        ultimo: inputData.preco,\n        ultimo_brl: Math.round(carbonoBRL * 100) / 100,\n        fechamento_anterior: inputData.fechamento_anterior,\n        abertura: inputData.abertura || inputData.preco,\n        maxima: inputData.preco,\n        minima: inputData.preco,\n        volume: null,\n        variacao_pct: inputData.fechamento_anterior ? \n          (Math.round((inputData.preco - inputData.fechamento_anterior) / inputData.fechamento_anterior * 10000) / 100).toFixed(2) : null,\n        rent_media: rentMedia,\n        cotacao_euro: cotacaoEuro,\n        moeda: inputData.moeda,\n        fonte: inputData.fonte,\n        timestamp: inputData.timestamp,\n        status: inputData.status,\n        euro_fonte: dadosEuro.fonte,\n        euro_timestamp: dadosEuro.timestamp,\n        observacao: 'Rent_media com 4 casas decimais para compatibilidade com planilha Excel',\n        documentId: new Date().toISOString().split('T')[0]  // ‚Üí \"2025-10-08\"\n      }\n    }\n  ];\n} catch (error) {\n  return [\n    {\n      json: {\n        erro: \"Erro ao preparar dados: \" + error.message,\n        timestamp: new Date().toISOString(),\n        status: \"erro_preparacao\",\n      },\n    },\n  ];\n}"
      },
      "id": "deb89a5b-1e37-4ea8-951d-c34a320b4bb0",
      "name": "Carbono",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        352,
        912
      ]
    },
    {
      "parameters": {
        "jsCode": "try {\n  const inputData = $input.first().json;\n\n  if (inputData.erro) {\n    return [{ json: inputData }];\n  }\n\n  // Preparar dados para salvar no JSON\n  const currentDate = new Date().toISOString().split('T')[0];\n  const [year, month, day] = currentDate.split('-');\n  const brazilianDate = `${day}/${month}/${year}`;\n  \n  // C√°lculo da rentabilidade m√©dia:\n  const rentMedia = parseFloat((inputData.preco * 18).toFixed(2));\n  \n  return [\n    {\n      json: {\n        ativo: 'Boi Gordo',\n        data: brazilianDate,\n        ultimo: inputData.preco,\n        fechamento_anterior: inputData.fechamento_anterior,\n        abertura: inputData.abertura || inputData.preco,\n        maxima: inputData.preco,\n        minima: inputData.preco,\n        volume: null,\n        variacao_pct: inputData.fechamento_anterior ? ((inputData.preco - inputData.fechamento_anterior) / inputData.fechamento_anterior * 100).toFixed(2) : null,\n        rent_media: rentMedia,\n        moeda: inputData.moeda,\n        fonte: inputData.fonte,\n        timestamp: inputData.timestamp,\n        status: inputData.status,\n        documentId: new Date().toISOString().split('T')[0]  // ‚Üí \"2025-10-08\"\n      }\n    }\n  ];\n} catch (error) {\n  return [\n    {\n      json: {\n        erro: \"Erro ao preparar dados: \" + error.message,\n        timestamp: new Date().toISOString(),\n        status: \"erro_preparacao\",\n      },\n    },\n  ];\n}"
      },
      "id": "5a8ccfee-798e-4772-ae85-7f980c959a50",
      "name": "Boi",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        352,
        1184
      ]
    },
    {
      "parameters": {
        "jsCode": "try {\n  const inputData = $input.first().json;\n\n  if (inputData.erro) {\n    return [{ json: inputData }];\n  }\n\n  // Preparar dados para salvar no JSON\n  const currentDate = new Date().toISOString().split('T')[0];\n  const [year, month, day] = currentDate.split('-');\n  const brazilianDate = `${day}/${month}/${year}`;\n\n  // Convers√£o de sacas para toneladas: valor/60*1000 (sem arredondar aqui)\n  let tonCalc = (inputData.preco / 60) * 1000;\n\n  // Rentabilidade m√©dia usando o valor cheio\n  let rentMediaCalc = tonCalc * 7.20;\n\n  // Arredondar s√≥ no final para 2 casas decimais\n  const ton = Math.round(tonCalc * 100) / 100;\n  const rentMedia = Math.round(rentMediaCalc * 100) / 100;\n\n  return [\n    {\n      json: {\n        ativo: 'Milho Futuros',\n        data: brazilianDate,\n        ultimo: inputData.preco,\n        fechamento_anterior: inputData.fechamento_anterior,\n        abertura: inputData.abertura || inputData.preco,\n        maxima: inputData.preco,\n        minima: inputData.preco,\n        volume: null,\n        variacao_pct: inputData.fechamento_anterior\n          ? ((inputData.preco - inputData.fechamento_anterior) / inputData.fechamento_anterior * 100).toFixed(2)\n          : null,\n        ton: ton,\n        rent_media: rentMedia,\n        moeda: inputData.moeda,\n        fonte: inputData.fonte,\n        timestamp: inputData.timestamp,\n        status: inputData.status,\n        documentId: new Date().toISOString().split('T')[0]  // ‚Üí \"2025-10-08\"\n      }\n    }\n  ];\n} catch (error) {\n  return [\n    {\n      json: {\n        erro: \"Erro ao preparar dados: \" + error.message,\n        timestamp: new Date().toISOString(),\n        status: \"erro_preparacao\",\n      },\n    },\n  ];\n}"
      },
      "id": "29eacc08-4bc4-471d-9d86-1147e8613f96",
      "name": "Milho",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        352,
        1408
      ]
    },
    {
      "parameters": {
        "jsCode": "try {\n  // Aguardar todos os dados das commodities processadas\n  const boiGordo = $('üíæ Salvar no Firebase').first()?.json || null;\n  const milho = $('üíæ Salvar no Firebase7').first()?.json || null;\n  const soja = $('üíæ Salvar no Firebase8').first()?.json || null;\n  const madeira = $('üíæ Salvar no Firebase2').first()?.json || null;\n  const carbono = $('üíæ Salvar no Firebase1').first()?.json || null;\n\n  if (!boiGordo || !milho || !soja || !madeira || !carbono) {\n    return [{\n      json: {\n        erro: 'Dados insuficientes para calcular CH2O √Ågua',\n        timestamp: new Date().toISOString(),\n        status: 'erro'\n      }\n    }];\n  }\n\n  const rentBoiGordo = parseFloat(boiGordo.rent_media) || 0;\n  const rentMilho = parseFloat(milho.rent_media) || 0;\n  const rentSoja = parseFloat(soja.rent_media) || 0;\n  const rentMadeira = parseFloat(madeira.rent_media) || 0;\n  const rentCarbono = parseFloat(carbono.rent_media) || 0;\n\n  const componentes = {\n    boi_gordo_35: Math.floor(rentBoiGordo * 0.35 * 100 + 0.0000001) / 100,\n    milho_30: Math.round(rentMilho * 0.30 * 100) / 100,\n    soja_35: Math.round(rentSoja * 0.35 * 100) / 100,\n    madeira_100: Math.round(rentMadeira * 100) / 100,\n    carbono_100: Math.round(rentCarbono * 100) / 100\n  };\n\n  const ch2oAgua = componentes.boi_gordo_35 + componentes.milho_30 + componentes.soja_35 + componentes.madeira_100 + componentes.carbono_100;\n\n  const currentDate = new Date().toISOString().split('T')[0];\n  const [year, month, day] = currentDate.split('-');\n  const brazilianDate = `${day}/${month}/${year}`;\n\n  return [{\n    json: {\n      ativo: 'CH2O √Ågua',\n      data: brazilianDate,\n      valor: Math.round(ch2oAgua * 100) / 100,\n      componentes: componentes,\n      valores_originais: {\n        rent_boi_gordo: rentBoiGordo,\n        rent_milho: rentMilho,\n        rent_soja: rentSoja,\n        rent_madeira: rentMadeira,\n        rent_carbono: rentCarbono\n      },\n      formula: 'CH2O = (Boi√ó35%) + (Milho√ó30%) + (Soja√ó35%) + Madeira + Carbono',\n      moeda: 'BRL',\n      fonte: 'C√°lculo UCS',\n      timestamp: new Date().toISOString(),\n      status: 'sucesso',\n      verificacao: `Soma dos componentes: ${componentes.boi_gordo_35} + ${componentes.milho_30} + ${componentes.soja_35} + ${componentes.madeira_100} + ${componentes.carbono_100} = ${ch2oAgua}`,\n      documentId: new Date().toISOString().split('T')[0]  // ‚Üí \"2025-10-08\"\n    }\n  }];\n\n} catch (error) {\n  return [{\n    json: {\n      erro: 'Erro ao calcular CH2O √Ågua: ' + error.message,\n      timestamp: new Date().toISOString(),\n      status: 'erro'\n    }\n  }];\n}"
      },
      "id": "a2959553-6018-4ef4-94b9-70dd8f7394e1",
      "name": "üßÆ Calcular CH2O Original",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        0,
        1584
      ]
    },
    {
      "parameters": {
        "jsCode": "try {\n  const ch2oData = $input.first().json;\n  \n  return [{\n    json: {\n      status: 'ch2o_sucesso',\n      mensagem: 'CH2O √Ågua calculado e salvo com sucesso!',\n      dados_ch2o: ch2oData,\n      timestamp: new Date().toISOString()\n    }\n  }];\n  \n} catch (error) {\n  return [{\n    json: {\n      status: 'ch2o_erro',\n      erro: 'Erro no CH2O: ' + error.message,\n      timestamp: new Date().toISOString()\n    }\n  }];\n}"
      },
      "id": "54f03ee5-f530-4215-94b8-8d3ff3e5a640",
      "name": "üìã Resposta Final CH2O Original",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        368,
        1584
      ]
    },
    {
      "parameters": {
        "jsCode": "try {\n  const boiGordo = $('üíæ Salvar no Firebase').first()?.json || null;\n  const milho = $('üíæ Salvar no Firebase7').first()?.json || null;\n  const soja = $('üíæ Salvar no Firebase8').first()?.json || null;\n  const madeira = $('üíæ Salvar no Firebase2').first()?.json || null;\n  const carbono = $('üíæ Salvar no Firebase1').first()?.json || null;\n\n  if (!boiGordo || !milho || !soja || !madeira || !carbono) {\n    return [{\n      json: {\n        erro: 'Dados insuficientes para calcular Custo_√Ågua',\n        timestamp: new Date().toISOString(),\n        status: 'erro'\n      }\n    }];\n  }\n\n  const rentBoiGordo = parseFloat(boiGordo.rent_media) || 0;\n  const rentMilho = parseFloat(milho.rent_media) || 0;\n  const rentSoja = parseFloat(soja.rent_media) || 0;\n  const rentMadeira = parseFloat(madeira.rent_media) || 0;\n  const rentCarbono = parseFloat(carbono.rent_media) || 0;\n\n  const baseCalculo = (rentBoiGordo * 0.35) + (rentMilho * 0.30) + (rentSoja * 0.35) + rentMadeira + rentCarbono;\n  const custoAgua = baseCalculo * 0.07;\n\n  const currentDate = new Date().toISOString().split('T')[0];\n  const [year, month, day] = currentDate.split('-');\n  const brazilianDate = `${day}/${month}/${year}`;\n\n  return [{\n    json: {\n      ativo: 'Custo_√Ågua',\n      data: brazilianDate,\n      valor: Math.round(custoAgua * 100) / 100,\n      componentes: {\n        boi_gordo_35: Math.round(rentBoiGordo * 0.35 * 100) / 100,\n        milho_30: Math.round(rentMilho * 0.30 * 100) / 100,\n        soja_35: Math.round(rentSoja * 0.35 * 100) / 100,\n        madeira_100: Math.round(rentMadeira * 100) / 100,\n        carbono_100: Math.round(rentCarbono * 100) / 100,\n        base_calculo: Math.round(baseCalculo * 100) / 100,\n        resultado_final: Math.round(custoAgua * 100) / 100\n      },\n      valores_originais: {\n        rent_boi_gordo: rentBoiGordo,\n        rent_milho: rentMilho,\n        rent_soja: rentSoja,\n        rent_madeira: rentMadeira,\n        rent_carbono: rentCarbono\n      },\n      formula: 'Custo_√Ågua = ((Boi√ó35%) + (Milho√ó30%) + (Soja√ó35%) + Madeira + Carbono) √ó 7%',\n      moeda: 'BRL',\n      fonte: 'C√°lculo UCS',\n      timestamp: new Date().toISOString(),\n      status: 'sucesso',\n      documentId: new Date().toISOString().split('T')[0]  // ‚Üí \"2025-10-08\"\n    }\n  }];\n  \n} catch (error) {\n  return [{\n    json: {\n      erro: 'Erro ao calcular Custo_√Ågua: ' + error.message,\n      timestamp: new Date().toISOString(),\n      status: 'erro'\n    }\n  }];\n}"
      },
      "id": "ef92aa89-6b1c-4216-8ba2-a2c0e38435c6",
      "name": "üßÆ Calcular Custo_√Ågua",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        0,
        1760
      ]
    },
    {
      "parameters": {
        "jsCode": "try {\n  // Aguardar todos os dados das commodities processadas e o Custo_√Ågua\n  const boiGordo = $('üíæ Salvar no Firebase').first()?.json || null;\n  const milho = $('üíæ Salvar no Firebase7').first()?.json || null;\n  const soja = $('üíæ Salvar no Firebase8').first()?.json || null;\n  const madeira = $('üíæ Salvar no Firebase2').first()?.json || null;\n  const carbono = $('üíæ Salvar no Firebase1').first()?.json || null;\n  const custoAgua = $('üíæ Salvar Custo_√Ågua').first()?.json || null;\n\n  // Verificar se todos os dados est√£o dispon√≠veis\n  if (!boiGordo || !milho || !soja || !madeira || !carbono || !custoAgua) {\n    return [\n      {\n        json: {\n          erro: 'Dados insuficientes para calcular PDM',\n          timestamp: new Date().toISOString(),\n          status: 'erro'\n        }\n      }\n    ];\n  }\n\n  // Extrair valores de rent_media de cada commodity\n  const rentBoiGordo = parseFloat(boiGordo.rent_media) || 0;\n  const rentMilho = parseFloat(milho.rent_media) || 0;\n  const rentSoja = parseFloat(soja.rent_media) || 0;\n  const rentMadeira = parseFloat(madeira.rent_media) || 0;\n  const rentCarbono = parseFloat(carbono.rent_media) || 0;\n  const valorCustoAgua = parseFloat(custoAgua.valor) || 0;\n\n  // Calcular PDM conforme f√≥rmula\n  const pdm =\n    (rentBoiGordo * 0.35) +\n    (rentMilho * 0.30) +\n    (rentSoja * 0.35) +\n    rentMadeira +\n    rentCarbono +\n    valorCustoAgua;\n\n  // Preparar dados para salvar\n  const currentDate = new Date().toISOString().split('T')[0];\n  const [year, month, day] = currentDate.split('-');\n  const brazilianDate = `${day}/${month}/${year}`;\n\n  return [\n    {\n      json: {\n        ativo: 'PDM',\n        data: brazilianDate,\n        valor: Math.round(pdm * 100) / 100,\n        componentes: {\n          boi_gordo_35: Math.round(rentBoiGordo * 0.35 * 100) / 100,\n          milho_30: Math.round(rentMilho * 0.30 * 100) / 100,\n          soja_35: Math.round(rentSoja * 0.35 * 100) / 100,\n          madeira_100: Math.round(rentMadeira * 100) / 100,\n          carbono_100: Math.round(rentCarbono * 100) / 100,\n          custo_agua_100: Math.round(valorCustoAgua * 100) / 100\n        },\n        valores_originais: {\n          rent_boi_gordo: rentBoiGordo,\n          rent_milho: rentMilho,\n          rent_soja: rentSoja,\n          rent_madeira: rentMadeira,\n          rent_carbono: rentCarbono,\n          custo_agua: valorCustoAgua\n        },\n        formula: 'PDM = (Boi√ó35%) + (Milho√ó30%) + (Soja√ó35%) + Madeira + Carbono + Custo_√Ågua',\n        moeda: 'BRL',\n        fonte: 'C√°lculo UCS',\n        timestamp: new Date().toISOString(),\n        status: 'sucesso',\n        documentId: new Date().toISOString().split('T')[0]  // ‚Üí \"2025-10-08\"\n      }\n    }\n  ];\n} catch (error) {\n  return [\n    {\n      json: {\n        erro: 'Erro ao calcular PDM: ' + error.message,\n        timestamp: new Date().toISOString(),\n        status: 'erro'\n      }\n    }\n  ];\n}\n"
      },
      "id": "95935648-a424-42ab-b62f-50003628a7b7",
      "name": "üßÆ Calcular PDM",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        0,
        1936
      ]
    },
    {
      "parameters": {
        "jsCode": "try {\n  const pdmData = $input.first().json;\n\n  return [\n    {\n      json: {\n        status: 'pdm_sucesso',\n        mensagem: 'PDM calculado e salvo com sucesso!',\n        dados_pdm: pdmData,\n        timestamp: new Date().toISOString()\n      }\n    }\n  ];\n\n} catch (error) {\n  return [\n    {\n      json: {\n        status: 'pdm_erro',\n        erro: 'Erro no PDM: ' + error.message,\n        timestamp: new Date().toISOString()\n      }\n    }\n  ];\n}\n"
      },
      "id": "fd73ae51-182f-43b5-830a-a236b054b7cc",
      "name": "üìã Resposta Final PDM",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        368,
        1936
      ]
    },
    {
      "parameters": {
        "jsCode": "try {\n  const pdmData = $('üíæ Salvar PDM').first()?.json || null;\n\n  if (!pdmData) {\n    return [{\n      json: {\n        erro: 'Dados do PDM insuficientes para calcular UCS',\n        timestamp: new Date().toISOString(),\n        status: 'erro'\n      }\n    }];\n  }\n\n  const valorPDM = parseFloat(pdmData.valor) || 0;\n  const ucs = (valorPDM / 900) / 2;\n\n  const currentDate = new Date().toISOString().split('T')[0];\n  const [year, month, day] = currentDate.split('-');\n  const brazilianDate = `${day}/${month}/${year}`;\n\n  return [{\n    json: {\n      ativo: 'UCS',\n      data: brazilianDate,\n      valor: Math.round(ucs * 100) / 100,\n      componentes: {\n        pdm_original: valorPDM,\n        pdm_div_900: Math.round((valorPDM / 900) * 100) / 100,\n        resultado_final: Math.round(ucs * 100) / 100\n      },\n      valores_originais: {\n        pdm: valorPDM\n      },\n      formula: 'UCS = (PDM √∑ 900) √∑ 2',\n      moeda: 'BRL',\n      fonte: 'C√°lculo UCS',\n      timestamp: new Date().toISOString(),\n      status: 'sucesso',\n      documentId: new Date().toISOString().split('T')[0]  // ‚Üí \"2025-10-08\"\n    }\n  }];\n\n} catch (error) {\n  return [{\n    json: {\n      erro: 'Erro ao calcular UCS: ' + error.message,\n      timestamp: new Date().toISOString(),\n      status: 'erro'\n    }\n  }];\n}"
      },
      "id": "246c7951-61c5-465d-b0a1-c8dbf250110d",
      "name": "üßÆ Calcular UCS",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        0,
        2112
      ]
    },
    {
      "parameters": {
        "jsCode": "try {\n  // Aguardar os dados do UCS e das cota√ß√µes\n  const ucsData = $('üíæ Salvar UCS').first()?.json || null;\n  const usdData = $('üíæ Salvar no Firebase5').first()?.json || null;\n  const eurData = $('üíæ Salvar no Firebase6').first()?.json || null;\n\n  // Verificar se os dados est√£o dispon√≠veis\n  if (!ucsData || !usdData || !eurData) {\n    return [\n      {\n        json: {\n          erro: 'Dados insuficientes para calcular UCS ASE',\n          dados_faltando: {\n            ucs: !ucsData,\n            usd: !usdData,\n            eur: !eurData\n          },\n          timestamp: new Date().toISOString(),\n          status: 'erro'\n        }\n      }\n    ];\n  }\n\n  // Extrair valores\n  const valorUCS = parseFloat(ucsData.valor) || 0;\n  const cotacaoUSD = parseFloat(usdData.ultimo) || 0;\n  const cotacaoEUR = parseFloat(eurData.ultimo) || 0;\n\n  // Calcular UCS ASE conforme f√≥rmula\n  // UCS ASE = UCS √ó 2\n  const ucsASEBRL = valorUCS * 2;\n  \n  // Converter para USD e EUR\n  const ucsASEUSD = cotacaoUSD > 0 ? Math.round((ucsASEBRL / cotacaoUSD) * 100) / 100 : 0;\n  const ucsASEEUR = cotacaoEUR > 0 ? Math.round((ucsASEBRL / cotacaoEUR) * 100) / 100 : 0;\n\n  // Preparar dados para salvar\n  const currentDate = new Date().toISOString().split('T')[0];\n  const [year, month, day] = currentDate.split('-');\n  const brazilianDate = `${day}/${month}/${year}`;\n\n  return [\n    {\n      json: {\n        ativo: 'UCS ASE',\n        data: brazilianDate,\n        valor_brl: Math.round(ucsASEBRL * 100) / 100,\n        valor_usd: ucsASEUSD,\n        valor_eur: ucsASEEUR,\n        componentes: {\n          ucs_original_brl: valorUCS,\n          resultado_final_brl: Math.round(ucsASEBRL * 100) / 100,\n          resultado_final_usd: ucsASEUSD,\n          resultado_final_eur: ucsASEEUR\n        },\n        valores_originais: {\n          ucs: valorUCS,\n          cotacao_usd: cotacaoUSD,\n          cotacao_eur: cotacaoEUR\n        },\n        conversoes: {\n          brl_para_usd: `${ucsASEBRL} √∑ ${cotacaoUSD} = ${ucsASEUSD}`,\n          brl_para_eur: `${ucsASEBRL} √∑ ${cotacaoEUR} = ${ucsASEEUR}`\n        },\n        formula: 'UCS ASE = UCS √ó 2',\n        moedas: ['BRL', 'USD', 'EUR'],\n        fonte: 'C√°lculo UCS',\n        timestamp: new Date().toISOString(),\n        status: 'sucesso',\n        documentId: currentDate  // ‚úÖ S√ì UM, reutiliza a vari√°vel!\n      }\n    }\n  ];\n\n} catch (error) {\n  return [\n    {\n      json: {\n        erro: 'Erro ao calcular UCS ASE: ' + error.message,\n        timestamp: new Date().toISOString(),\n        status: 'erro'\n      }\n    }\n  ];\n}"
      },
      "id": "acf8cc37-4360-41b5-9064-3c80c8b3fc04",
      "name": "üßÆ Calcular UCS ASE",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        0,
        2288
      ]
    },
    {
      "parameters": {
        "jsCode": "try {\n  const ucsASEData = $input.first().json;\n\n  return [\n    {\n      json: {\n        status: 'ucs_ase_sucesso',\n        mensagem: 'UCS ASE calculado e salvo com sucesso!',\n        dados_ucs_ase: ucsASEData,\n        timestamp: new Date().toISOString()\n      }\n    }\n  ];\n\n} catch (error) {\n  return [\n    {\n      json: {\n        status: 'ucs_ase_erro',\n        erro: 'Erro no UCS ASE: ' + error.message,\n        timestamp: new Date().toISOString()\n      }\n    }\n  ];\n}\n"
      },
      "id": "bfe61c74-0c69-4508-abdb-a87b84418093",
      "name": "üìã Resposta Final UCS ASE",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        368,
        2288
      ]
    },
    {
      "parameters": {
        "jsCode": "try {\n  const boiGordo = $(\"üíæ Salvar no Firebase\").first()?.json || null;\n  const milho = $(\"üíæ Salvar no Firebase7\").first()?.json || null;\n  const soja = $(\"üíæ Salvar no Firebase8\").first()?.json || null;\n\n  if (!boiGordo || !milho || !soja) {\n    return [\n      {\n        json: {\n          erro: \"Dados insuficientes\",\n          timestamp: new Date().toISOString(),\n          status: \"erro\",\n        },\n      },\n    ];\n  }\n\n  const rentBoiGordo = parseFloat(boiGordo.rent_media) || 0;\n  const rentMilho = parseFloat(milho.rent_media) || 0;\n  const rentSoja = parseFloat(soja.rent_media) || 0;\n\n  // **C√ÅLCULO DIRETO - EXATAMENTE COMO NO EXCEL**\n  const base = (rentBoiGordo * 0.35) + (rentMilho * 0.30) + (rentSoja * 0.35);\n  const vusFinal = (base - (base * 0.048)) * 25;\n\n  // **COMPONENTES SEM MULTIPLICAR POR 25** (apenas para refer√™ncia)\n  const componenteBoi = rentBoiGordo * 0.35;\n  const componenteMilho = rentMilho * 0.30;\n  const componenteSoja = rentSoja * 0.35;\n  const somaComponentes = componenteBoi + componenteMilho + componenteSoja;\n  const descontoArrendamento = base * 0.048;\n\n  const currentDate = new Date().toISOString().split(\"T\")[0];\n  const [year, month, day] = currentDate.split(\"-\");\n  const brazilianDate = `${day}/${month}/${year}`;\n\n  return [\n    {\n      json: {\n        ativo: \"VUS\",\n        data: brazilianDate,\n        valor: vusFinal,\n        componentes: {\n          boi_gordo_35: componenteBoi,\n          milho_30: componenteMilho,\n          soja_35: componenteSoja,\n          base_calculo: somaComponentes,\n          desconto_arrendamento: descontoArrendamento,\n          resultado_final: vusFinal,\n        },\n        calculo_detalhado: {\n          base_sem_25: base,\n          desconto_4_8: base * 0.048,\n          base_com_desconto: base - (base * 0.048),\n          multiplicacao_25: vusFinal\n        },\n        valores_originais: {\n          rent_boi_gordo: rentBoiGordo,\n          rent_milho: rentMilho,\n          rent_soja: rentSoja,\n        },\n        formula: \"VUS =(((rent_boi_gordo*35% + rente milho *30% + rent_soja*35%)-(rent_boi_gordo*35% + rente milho *30% + rent_soja*35%)*4,8))*25\",\n        moeda: \"BRL\",\n        fonte: \"C√°lculo UCS\",\n        timestamp: new Date().toISOString(),\n        status: \"sucesso\",\n        documentId: currentDate,\n      },\n    },\n  ];\n} catch (error) {\n  return [\n    {\n      json: {\n        erro: \"Erro ao calcular VUS: \" + error.message,\n        timestamp: new Date().toISOString(),\n        status: \"erro\",\n      },\n    },\n  ];\n}"
      },
      "id": "7fb5b7fe-b7f4-48dc-b3fb-fa79fc34fec9",
      "name": "üßÆ Calcular VUS",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        0,
        2464
      ]
    },
    {
      "parameters": {
        "jsCode": "try {\n  const vusData = $input.first().json;\n\n  return [\n    {\n      json: {\n        status: 'vus_sucesso',\n        mensagem: 'VUS calculado e salvo com sucesso!',\n        dados_vus: vusData,\n        timestamp: new Date().toISOString()\n      }\n    }\n  ];\n\n} catch (error) {\n  return [\n    {\n      json: {\n        status: 'vus_erro',\n        erro: 'Erro no VUS: ' + error.message,\n        timestamp: new Date().toISOString()\n      }\n    }\n  ];\n}\n"
      },
      "id": "a05ab85b-8473-4e20-9c0c-2d9decbab7af",
      "name": "üìã Resposta Final VUS",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        368,
        2464
      ]
    },
    {
      "parameters": {
        "jsCode": "try {\n  // Aguardar dados do carbono processado\n  const carbono = $('üíæ Salvar no Firebase1').first()?.json || null;\n\n  // Verificar se os dados est√£o dispon√≠veis\n  if (!carbono) {\n    return [\n      {\n        json: {\n          erro: 'Dados insuficientes para calcular Carbono_CRS',\n          dados_faltando: {\n            carbono: !carbono\n          },\n          timestamp: new Date().toISOString(),\n          status: 'erro'\n        }\n      }\n    ];\n  }\n\n  // Extrair valor de rent_media do carbono - USAR VALOR ORIGINAL DO FIREBASE\n  const rentCarbono = parseFloat(carbono.rent_media) || 0;\n\n  // **C√ÅLCULO 100% DIN√ÇMICO: usar apenas o valor do Firebase**\n  const carbonoCRS = rentCarbono * 25;\n\n  // **TRUNCAMENTO FINAL (igual ao Excel)**\n  const valorFinal = Math.floor(carbonoCRS * 100) / 100;\n\n  // Preparar dados para salvar\n  const currentDate = new Date().toISOString().split('T')[0];\n  const [year, month, day] = currentDate.split('-');\n  const brazilianDate = `${day}/${month}/${year}`;\n\n  return [\n    {\n      json: {\n        ativo: 'Carbono_CRS',\n        data: brazilianDate,\n        valor: valorFinal, // Calculado dinamicamente\n        componentes: {\n          rent_media_carbono: rentCarbono,\n          multiplicador: 25,\n          resultado_final: valorFinal\n        },\n        valores_originais: {\n          rent_carbono: rentCarbono\n        },\n        formula: `Carbono_CRS = ${rentCarbono} * 25 = ${valorFinal}`,\n        moeda: 'BRL',\n        fonte: 'C√°lculo UCS - Din√¢mico',\n        timestamp: new Date().toISOString(),\n        status: 'sucesso',\n        observacao: 'C√°lculo 100% din√¢mico - Sem valores for√ßados',\n        documentId: new Date().toISOString().split('T')[0]  // ‚Üí \"2025-10-08\"\n      }\n    }\n  ];\n\n} catch (error) {\n  return [\n    {\n      json: {\n        erro: 'Erro ao calcular Carbono_CRS: ' + error.message,\n        timestamp: new Date().toISOString(),\n        status: 'erro'\n      }\n    }\n  ];\n}"
      },
      "id": "b5694141-e485-429c-8f2a-545b130cf61a",
      "name": "üßÆ Calcular Carbono_CRS",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        0,
        2640
      ]
    },
    {
      "parameters": {
        "jsCode": "try {\n  const carbanoCRSData = $input.first().json;\n\n  return [\n    {\n      json: {\n        status: 'carbano_crs_sucesso',\n        mensagem: 'Carbono_CRS calculado e salvo com sucesso!',\n        dados_carbano_crs: carbanoCRSData,\n        timestamp: new Date().toISOString()\n      }\n    }\n  ];\n\n} catch (error) {\n  return [\n    {\n      json: {\n        status: 'carbano_crs_erro',\n        erro: 'Erro no Carbono_CRS: ' + error.message,\n        timestamp: new Date().toISOString()\n      }\n    }\n  ];\n}\n"
      },
      "id": "42da07e6-2247-4994-9a5f-3c4052ef2e14",
      "name": "üìã Resposta Final Carbono_CRS",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        368,
        2640
      ]
    },
    {
      "parameters": {
        "jsCode": "try {\n  // Aguardar dados do CH2O processado\n  const ch2oData = $('üíæ Salvar CH2O Original').first()?.json || null;\n\n  // Verificar se os dados est√£o dispon√≠veis\n  if (!ch2oData) {\n    return [\n      {\n        json: {\n          erro: 'Dados insuficientes para calcular Agua_CRS',\n          dados_faltando: {\n            ch2o: !ch2oData\n          },\n          timestamp: new Date().toISOString(),\n          status: 'erro'\n        }\n      }\n    ];\n  }\n\n  // Extrair valor do CH2O (que j√° √© a rentabilidade m√©dia)\n  const rentCH2O = parseFloat(ch2oData.valor) || 0;\n\n  // Calcular Agua_CRS conforme f√≥rmula\n  // Agua_CRS = valor_CH2O (que j√° √© a rentabilidade m√©dia)\n  const aguaCRS = rentCH2O;\n\n  // Preparar dados para salvar\n  const currentDate = new Date().toISOString().split('T')[0];\n  const [year, month, day] = currentDate.split('-');\n  const brazilianDate = `${day}/${month}/${year}`;\n\n  return [\n    {\n      json: {\n        ativo: 'Agua_CRS',\n        data: brazilianDate,\n        valor: Math.round(aguaCRS * 100) / 100,\n        componentes: {\n          rent_media_ch2o: rentCH2O,\n          resultado_final: Math.round(aguaCRS * 100) / 100\n        },\n        valores_originais: {\n          valor_ch2o: rentCH2O\n        },\n        formula: 'Agua_CRS = valor_CH2O (rentabilidade m√©dia)',\n        moeda: 'BRL',\n        fonte: 'C√°lculo UCS',\n        timestamp: new Date().toISOString(),\n        status: 'sucesso',\n        documentId: new Date().toISOString().split('T')[0]  // ‚Üí \"2025-10-08\"\n      }\n    }\n  ];\n\n} catch (error) {\n  return [\n    {\n      json: {\n        erro: 'Erro ao calcular Agua_CRS: ' + error.message,\n        timestamp: new Date().toISOString(),\n        status: 'erro'\n      }\n    }\n  ];\n}\n"
      },
      "id": "a84c8fcc-9dbc-4498-975b-bef44b97efe5",
      "name": "üßÆ Calcular Agua_CRS",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        0,
        2816
      ]
    },
    {
      "parameters": {
        "jsCode": "try {\n  const aguaCRSData = $input.first().json;\n\n  return [\n    {\n      json: {\n        status: 'agua_crs_sucesso',\n        mensagem: 'Agua_CRS calculado e salvo com sucesso!',\n        dados_agua_crs: aguaCRSData,\n        timestamp: new Date().toISOString()\n      }\n    }\n  ];\n\n} catch (error) {\n  return [\n    {\n      json: {\n        status: 'agua_crs_erro',\n        erro: 'Erro no Agua_CRS: ' + error.message,\n        timestamp: new Date().toISOString()\n      }\n    }\n  ];\n}\n"
      },
      "id": "c3b3fbab-1160-4b8f-bd6b-b763beb37aa4",
      "name": "üìã Resposta Final Agua_CRS",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        368,
        2816
      ]
    },
    {
      "parameters": {
        "jsCode": "try {\n  // Aguardar dados da madeira processada\n  const madeira = $('üíæ Salvar no Firebase2').first()?.json || null;\n\n  // Verificar se os dados est√£o dispon√≠veis\n  if (!madeira) {\n    return [\n      {\n        json: {\n          erro: 'Dados insuficientes para calcular Vmad',\n          dados_faltando: {\n            madeira: !madeira\n          },\n          timestamp: new Date().toISOString(),\n          status: 'erro'\n        }\n      }\n    ];\n  }\n\n  // Extrair valor de rent_media da madeira\n  const rentMadeira = parseFloat(madeira.rent_media) || 0;\n\n  // **F√ìRMULA CORRETA DA PLANILHA: rent_media_madeira * 5**\n  const vmad = rentMadeira * 5;\n\n  // **TRUNCAMENTO FINAL (igual Excel)**\n  const valorFinal = Math.floor(vmad * 100) / 100;\n\n  // Preparar dados para salvar\n  const currentDate = new Date().toISOString().split('T')[0];\n  const [year, month, day] = currentDate.split('-');\n  const brazilianDate = `${day}/${month}/${year}`;\n\n  return [\n    {\n      json: {\n        ativo: 'Vmad',\n        data: brazilianDate,\n        valor: valorFinal, // Agora ser√° 733.816,60\n        componentes: {\n          rent_media_madeira: rentMadeira,\n          multiplicador: 5, // **CORRIGIDO: 5 em vez de 25**\n          resultado_final: valorFinal\n        },\n        valores_originais: {\n          rent_madeira: rentMadeira\n        },\n        formula: 'Vmad = rent_media_madeira * 5',\n        moeda: 'BRL',\n        fonte: 'C√°lculo UCS',\n        timestamp: new Date().toISOString(),\n        status: 'sucesso',\n        documentId: new Date().toISOString().split('T')[0],\n        observacao: 'F√≥rmula corrigida: multiplicador 5 (planilha) em vez de 25'\n      }\n    }\n  ];\n\n} catch (error) {\n  return [\n    {\n      json: {\n        erro: 'Erro ao calcular Vmad: ' + error.message,\n        timestamp: new Date().toISOString(),\n        status: 'erro'\n      }\n    }\n  ];\n}"
      },
      "id": "b71d001b-7db1-41e0-b555-227d7b88e098",
      "name": "üßÆ Calcular Vmad",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        0,
        2992
      ]
    },
    {
      "parameters": {
        "jsCode": "try {\n  const vmadData = $input.first().json;\n\n  return [\n    {\n      json: {\n        status: 'vmad_sucesso',\n        mensagem: 'Vmad calculado e salvo com sucesso!',\n        dados_vmad: vmadData,\n        timestamp: new Date().toISOString()\n      }\n    }\n  ];\n\n} catch (error) {\n  return [\n    {\n      json: {\n        status: 'vmad_erro',\n        erro: 'Erro no Vmad: ' + error.message,\n        timestamp: new Date().toISOString()\n      }\n    }\n  ];\n}\n"
      },
      "id": "d6ad5dff-9234-4b2c-b943-3757bf3baea8",
      "name": "üìã Resposta Final Vmad",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        368,
        2992
      ]
    },
    {
      "parameters": {
        "jsCode": "try {\n  // Aguardar dados dos 4 componentes\n  const vusData = $(\"üíæ Salvar VUS\").first()?.json || null;\n  const vmadData = $(\"üíæ Salvar Vmad\").first()?.json || null;\n  const carbonoCRSData = $(\"üíæ Salvar Carbono_CRS\").first()?.json || null;\n  const aguaCRSData = $(\"üíæ Salvar Agua_CRS\").first()?.json || null;\n\n  // Verificar se todos os dados est√£o dispon√≠veis\n  if (!vusData || !vmadData || !carbonoCRSData || !aguaCRSData) {\n    return [\n      {\n        json: {\n          erro: \"Dados insuficientes para calcular Valor_Uso_Solo\",\n          dados_faltando: {\n            vus: !vusData,\n            vmad: !vmadData,\n            carbono_crs: !carbonoCRSData,\n            agua_crs: !aguaCRSData,\n          },\n          timestamp: new Date().toISOString(),\n          status: \"erro\",\n        },\n      },\n    ];\n  }\n\n  // Extrair valores - SEM ARREDONDAMENTO\n  const valorVUS = parseFloat(vusData.valor) || 0;\n  const valorVmad = parseFloat(vmadData.valor) || 0;\n  const valorCarbonoCRS = parseFloat(carbonoCRSData.valor) || 0;\n  const valorAguaCRS = parseFloat(aguaCRSData.valor) || 0;\n\n  // Calcular Valor_Uso_Solo - SEM ARREDONDAMENTO\n  const valorUsoSolo = valorVUS + valorVmad + valorCarbonoCRS + valorAguaCRS;\n\n  // Calcular porcentagens de cada componente - SEM ARREDONDAMENTO\n  const percentualVUS = valorUsoSolo > 0 ? (valorVUS / valorUsoSolo) * 100 : 0;\n  const percentualVmad = valorUsoSolo > 0 ? (valorVmad / valorUsoSolo) * 100 : 0;\n  const percentualCarbonoCRS = valorUsoSolo > 0 ? (valorCarbonoCRS / valorUsoSolo) * 100 : 0;\n  const percentualAguaCRS = valorUsoSolo > 0 ? (valorAguaCRS / valorUsoSolo) * 100 : 0;\n\n  // Formatar porcentagens como string com s√≠mbolo % - SEM ARREDONDAMENTO\n  const formatarPercentual = (valor) => {\n    return `${valor}%`;\n  };\n\n  // Preparar dados para salvar\n  const currentDate = new Date().toISOString().split(\"T\")[0];\n  const [year, month, day] = currentDate.split(\"-\");\n  const brazilianDate = `${day}/${month}/${year}`;\n\n  return [\n    {\n      json: {\n        created_at: new Date().toISOString(),\n        formulas: {\n          valor_total: \"Valor_Uso_Solo = VUS + Vmad + Carbono_CRS + Agua_CRS\",\n          porcentagem_vus: \"VUS / Valor_Uso_Solo * 100\",\n          porcentagem_vmad: \"Vmad / Valor_Uso_Solo * 100\",\n          porcentagem_carbono_crs: \"Carbono_CRS / Valor_Uso_Solo * 100\",\n          porcentagem_agua_crs: \"Agua_CRS / Valor_Uso_Solo * 100\",\n        },\n        timestamp: new Date().toISOString(),\n        data: brazilianDate,\n        documentId: new Date().toISOString(),\n        valor: valorUsoSolo, // VALOR ORIGINAL SEM FORMATA√á√ÉO\n        status: \"sucesso\",\n        porcentagens: {\n          vus_p: formatarPercentual(percentualVUS),\n          vmad_p: formatarPercentual(percentualVmad),\n          carbono_crs_p: formatarPercentual(percentualCarbonoCRS),\n          agua_crs_p: formatarPercentual(percentualAguaCRS),\n        },\n        moeda: \"BRL\",\n        ativo: \"Valor_Uso_Solo\",\n        valores_originais: {\n          vus: valorVUS, // VALOR ORIGINAL SEM FORMATA√á√ÉO\n          vmad: valorVmad, // VALOR ORIGINAL SEM FORMATA√á√ÉO\n          carbono_crs: valorCarbonoCRS, // VALOR ORIGINAL SEM FORMATA√á√ÉO\n          agua_crs: valorAguaCRS, // VALOR ORIGINAL SEM FORMATA√á√ÉO\n        },\n        bulk_import: true,\n        fonte: \"Banco de dados - C√°lculo UCS\",\n      },\n    },\n  ];\n} catch (error) {\n  return [\n    {\n      json: {\n        erro: \"Erro ao calcular Valor_Uso_Solo: \" + error.message,\n        timestamp: new Date().toISOString(),\n        status: \"erro\",\n      },\n    },\n  ];\n}\n\n\n\n"
      },
      "id": "c8f5bd84-808b-45d3-9167-4ee15f6377df",
      "name": "üßÆ Calcular Valor_Uso_Solo",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        0,
        3168
      ]
    },
    {
      "parameters": {
        "authentication": "serviceAccount",
        "operation": "upsert",
        "projectId": "ucs-index-tracker",
        "collection": "boi_gordo",
        "updateKey": "documentId",
        "columns": "=ativo,data,ultimo,abertura,maxima,minima,volume,variacao_pct,moeda,fonte,timestamp,status,documentId"
      },
      "id": "9ebae05e-b539-4c76-8e44-e007390ac8b5",
      "name": "üíæ BOI",
      "type": "n8n-nodes-base.googleFirebaseCloudFirestore",
      "typeVersion": 1,
      "position": [
        528,
        1184
      ],
      "credentials": {
        "googleApi": {
          "id": "Dqr74c3ldFzCyUyS",
          "name": "Google Firebase Cloud Firestore account"
        }
      }
    },
    {
      "parameters": {
        "authentication": "serviceAccount",
        "operation": "upsert",
        "projectId": "ucs-index-tracker",
        "collection": "soja",
        "updateKey": "documentId",
        "columns": "=ativo,data,ultimo,abertura,maxima,minima,volume,variacao_pct,moeda,fonte,timestamp,status,documentId"
      },
      "id": "8869a893-1eae-44ad-be03-f677b6e3c618",
      "name": "üíæ SOJA",
      "type": "n8n-nodes-base.googleFirebaseCloudFirestore",
      "typeVersion": 1,
      "position": [
        528,
        464
      ],
      "credentials": {
        "googleApi": {
          "id": "Dqr74c3ldFzCyUyS",
          "name": "Google Firebase Cloud Firestore account"
        }
      }
    },
    {
      "parameters": {
        "authentication": "serviceAccount",
        "operation": "upsert",
        "projectId": "ucs-index-tracker",
        "collection": "madeira",
        "updateKey": "documentId",
        "columns": "=ativo,data,ultimo,abertura,maxima,minima,volume,variacao_pct,moeda,fonte,timestamp,status,documentId"
      },
      "id": "50148317-57af-4e94-9b6f-bf84112c06be",
      "name": "üíæ MADEIRA",
      "type": "n8n-nodes-base.googleFirebaseCloudFirestore",
      "typeVersion": 1,
      "position": [
        528,
        224
      ],
      "credentials": {
        "googleApi": {
          "id": "Dqr74c3ldFzCyUyS",
          "name": "Google Firebase Cloud Firestore account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "try {\n  const inputData = $input.first().json;\n\n  if (inputData.erro) {\n    return [{ json: inputData }];\n  }\n\n  // Obter a cota√ß√£o do d√≥lar do n√≥ anterior\n  const dadosDolar = $('USD').first().json;  // ‚Üê CORRIGIR: USD em vez de USD1\n  const cotacaoDolar = dadosDolar.preco;\n\n  // Preparar dados para salvar no JSON\n  const currentDate = new Date().toISOString().split('T')[0];\n  const [year, month, day] = currentDate.split('-');\n  const brazilianDate = `${day}/${month}/${year}`;\n  \n  // CONSTANTES EXATAS DO EXCEL\n  const taxaConversao = 0.375620342;\n  const fatorRentMedia = 1196.54547720813;\n  const percentual = 0.10;\n  \n  // C√ÅLCULOS DIRETOS (igual Excel)\n  const madeiraSerradaBRL = inputData.preco * cotacaoDolar;\n  const madeiraToraUSD = inputData.preco * taxaConversao;\n  const madeiraToraBRL = madeiraToraUSD * cotacaoDolar;\n  \n  // Rentabilidade m√©dia\n  const rentMediaCalculada = madeiraToraBRL * fatorRentMedia * percentual;\n  \n  // ARREDONDAMENTO FINAL (igual Excel)\n  const madeiraSerradaBRLArred = Math.round(madeiraSerradaBRL * 100) / 100;\n  const madeiraToraUSDArred = Math.round(madeiraToraUSD * 100) / 100;\n  const madeiraToraBRLArred = Math.round(madeiraToraBRL * 100) / 100;\n  const rentMediaArred = Math.round(rentMediaCalculada * 100) / 100;\n\n  return [\n    {\n      json: {\n        ativo: 'Madeira Serrada',\n        data: brazilianDate,\n        ultimo: inputData.preco,\n        fechamento_anterior: inputData.fechamento_anterior,\n        abertura: inputData.abertura || inputData.preco,\n        maxima: inputData.preco,\n        minima: inputData.preco,\n        volume: null,\n        variacao_pct: inputData.fechamento_anterior ? \n          (Math.round((inputData.preco - inputData.fechamento_anterior) / inputData.fechamento_anterior * 10000) / 100).toFixed(2) : null,\n        \n        madeira_serrada_brl: madeiraSerradaBRLArred,\n        madeira_tora_usd: madeiraToraUSDArred,\n        madeira_tora_brl: madeiraToraBRLArred,\n        rent_media: rentMediaArred,\n        \n        cotacao_dolar: cotacaoDolar,\n        moeda: inputData.moeda,\n        fonte: inputData.fonte,\n        timestamp: inputData.timestamp,\n        status: inputData.status,\n        dolar_fonte: dadosDolar.fonte,\n        dolar_timestamp: dadosDolar.timestamp,\n        \n        calculos_verificacao: {\n          madeira_serrada_brl_calc: `${inputData.preco} √ó ${cotacaoDolar} = ${madeiraSerradaBRL} ‚Üí ${madeiraSerradaBRLArred}`,\n          madeira_tora_usd_calc: `${inputData.preco} √ó ${taxaConversao} = ${madeiraToraUSD} ‚Üí ${madeiraToraUSDArred}`,\n          madeira_tora_brl_calc: `${madeiraToraUSD} √ó ${cotacaoDolar} = ${madeiraToraBRL} ‚Üí ${madeiraToraBRLArred}`,\n          rent_media_calc: `${madeiraToraBRLArred} √ó ${fatorRentMedia} √ó ${percentual} = ${rentMediaCalculada} ‚Üí ${rentMediaArred}`\n        },\n        documentId: new Date().toISOString().split('T')[0]  // ‚Üí \"2025-10-08\"\n      }\n    }\n  ];\n} catch (error) {\n  return [\n    {\n      json: {\n        erro: \"Erro ao preparar dados: \" + error.message,\n        timestamp: new Date().toISOString(),\n        status: \"erro_preparacao\",\n      },\n    },\n  ];\n}"
      },
      "id": "46064a0c-ae2f-431d-9fc6-6eadc90bdaf6",
      "name": "Madeira",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        352,
        224
      ]
    },
    {
      "parameters": {
        "jsCode": "try {\n  const inputData = $input.first().json;\n\n  if (inputData.erro) {\n    return [{ json: inputData }];\n  }\n\n  // Obter a cota√ß√£o do d√≥lar do n√≥ anterior\n  const dadosDolar = $('USD').first().json;  // ‚Üê VERIFICAR: √© 'USD' ou 'USD1'?\n  const cotacaoDolar = dadosDolar.preco;\n\n  // Data\n  const currentDate = new Date().toISOString().split('T')[0];\n  const [year, month, day] = currentDate.split('-');\n  const brazilianDate = `${day}/${month}/${year}`;\n  \n  // Pre√ßo em BRL (saca convertido direto para BRL)\n  const sojaBRL = Math.round(inputData.preco * cotacaoDolar * 100) / 100;\n  \n  // Tonelada em USD (precis√£o m√°xima)\n  const tonUSD = (inputData.preco / 60) * 1000;\n  \n  // Tonelada em BRL - USANDO O MESMO ARREDONDAMENTO DO EXCEL\n  const tonBRLCalculado = tonUSD * cotacaoDolar;\n  const ton = Math.floor(tonBRLCalculado * 100) / 100; // Arredondamento para baixo como Excel\n  \n  // F√≥rmula do fator (3,3)\n  const fatorRentabilidade = (55 * 60) / 1000; // 3.3\n  \n  // Rentabilidade - C√ÅLCULO DIRETO SEM ARREDONDAMENTOS INTERMEDI√ÅRIOS\n  const rentMedia = Math.round((tonBRLCalculado * fatorRentabilidade + Number.EPSILON) * 100) / 100;\n  \n  return [\n    {\n      json: {\n        ativo: 'Soja Futuros',\n        data: brazilianDate,\n        ultimo: inputData.preco,\n        ultimo_brl: sojaBRL,\n        ton_usd: Math.round(tonUSD * 100) / 100,\n        ton: ton,\n        rent_media: rentMedia,\n        cotacao_dolar: cotacaoDolar,\n        fator_rentabilidade: fatorRentabilidade,\n        moeda: inputData.moeda,\n        fonte: inputData.fonte,\n        timestamp: inputData.timestamp,\n        status: inputData.status,\n        dolar_fonte: dadosDolar.fonte,\n        dolar_timestamp: dadosDolar.timestamp,\n        calculo_ton_usd: `(${inputData.preco} / 60) √ó 1000 = ${tonUSD}`,\n        calculo_ton_brl: `${tonUSD} √ó ${cotacaoDolar} = ${tonBRLCalculado} ‚Üí ${ton}`,\n        calculo_rent: `${tonBRLCalculado} √ó ${fatorRentabilidade} = ${rentMedia}`,\n        formula_excel: \"55 √ó 60 / 1000 = 3,30\",\n        ton_brl_calculado: tonBRLCalculado,\n        ton_brl_arredondado: ton,\n        documentId: new Date().toISOString().split('T')[0]  // ‚Üí \"2025-10-08\"\n      }\n    }\n  ];\n} catch (error) {\n  return [\n    {\n      json: {\n        erro: \"Erro ao preparar dados: \" + error.message,\n        timestamp: new Date().toISOString(),\n        status: \"erro_preparacao\",\n      },\n    },\n  ];\n}"
      },
      "id": "eb64def4-bbe2-45d2-9326-4737ea5910ff",
      "name": "Soja",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        352,
        464
      ]
    }
  ],
  "pinData": {},
  "connections": {
    "üîî Webhook Recalc": {
      "main": [
        [
          {
            "node": "‚úÖ Validar Payload",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "‚úÖ Validar Payload": {
      "main": [
        [
          {
            "node": "üü¢ Manual Overrides",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üü¢ Manual Overrides": {
      "main": [
        [
          {
            "node": "üó∫Ô∏è Mapear Bases",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üó∫Ô∏è Mapear Bases": {
      "main": [
        [
          {
            "node": "üîç Extrair Pre√ßo5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üíæ Valor_Uso_Solo": {
      "main": [
        [
          {
            "node": "üìã Resposta",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üîç Extrair Pre√ßo": {
      "main": [
        [
          {
            "node": "‚öôÔ∏è Processar Dados",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "‚öôÔ∏è Processar Dados": {
      "main": [
        [
          {
            "node": "Milho",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üìä Consolidador de Cota√ß√µes": {
      "main": [
        [
          {
            "node": "üìã Resposta Final Consolidada",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üìã Resposta Final Consolidada": {
      "main": [
        [
          {
            "node": "üìã Resposta Final do Sistema",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üìã Resposta Final": {
      "main": [
        [
          {
            "node": "üìä Consolidador de Cota√ß√µes",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üîç Extrair Pre√ßo1": {
      "main": [
        [
          {
            "node": "‚öôÔ∏è Processar Dados1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "‚öôÔ∏è Processar Dados1": {
      "main": [
        [
          {
            "node": "Soja",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üìã Resposta Final1": {
      "main": [
        [
          {
            "node": "üìä Consolidador de Cota√ß√µes1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üìä Consolidador de Cota√ß√µes1": {
      "main": [
        [
          {
            "node": "üìã Resposta Final Consolidada1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üìã Resposta Final Consolidada1": {
      "main": [
        [
          {
            "node": "üìã Resposta Final do Sistema1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üîç Extrair Pre√ßo2": {
      "main": [
        [
          {
            "node": "‚öôÔ∏è Processar Dados2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "‚öôÔ∏è Processar Dados2": {
      "main": [
        [
          {
            "node": "Boi",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üìã Resposta Final2": {
      "main": [
        [
          {
            "node": "üìä Consolidador de Cota√ß√µes2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üìä Consolidador de Cota√ß√µes2": {
      "main": [
        [
          {
            "node": "üìã Resposta Final Consolidada2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üìã Resposta Final Consolidada2": {
      "main": [
        [
          {
            "node": "üìã Resposta Final do Sistema2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üîç Extrair Pre√ßo3": {
      "main": [
        [
          {
            "node": "‚öôÔ∏è Processar Dados3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "‚öôÔ∏è Processar Dados3": {
      "main": [
        [
          {
            "node": "Carbono",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üìã Resposta Final3": {
      "main": [
        [
          {
            "node": "üìä Consolidador de Cota√ß√µes3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üìä Consolidador de Cota√ß√µes3": {
      "main": [
        [
          {
            "node": "üìã Resposta Final Consolidada3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üìã Resposta Final Consolidada3": {
      "main": [
        [
          {
            "node": "üìã Resposta Final do Sistema3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üìã Resposta Final4": {
      "main": [
        [
          {
            "node": "üìä Consolidador de Cota√ß√µes4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üìä Consolidador de Cota√ß√µes4": {
      "main": [
        [
          {
            "node": "üìã Resposta Final Consolidada4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üìã Resposta Final Consolidada4": {
      "main": [
        [
          {
            "node": "üìã Resposta Final do Sistema4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üîç Extrair Pre√ßo5": {
      "main": [
        [
          {
            "node": "USD",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üîë Preparar Firebase5": {
      "main": [
        [
          {
            "node": "üíæ USD",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üîç Extrair Pre√ßo6": {
      "main": [
        [
          {
            "node": "EUR",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üîë Preparar Firebase6": {
      "main": [
        [
          {
            "node": "üíæ EUR",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üìã Resposta Final5": {
      "main": [
        [
          {
            "node": "üìä Consolidador de Cota√ß√µes5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üìä Consolidador de Cota√ß√µes5": {
      "main": [
        [
          {
            "node": "üìã Resposta Final Consolidada5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üìã Resposta Final Consolidada5": {
      "main": [
        [
          {
            "node": "üìã Resposta Final do Sistema5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üìã Resposta Final6": {
      "main": [
        [
          {
            "node": "üìä Consolidador de Cota√ß√µes6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üìä Consolidador de Cota√ß√µes6": {
      "main": [
        [
          {
            "node": "üìã Resposta Final Consolidada6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üìã Resposta Final Consolidada6": {
      "main": [
        [
          {
            "node": "üìã Resposta Final do Sistema6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üîç Extrair Pre√ßo9": {
      "main": [
        [
          {
            "node": "‚öôÔ∏è Processar Dados9",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "‚öôÔ∏è Processar Dados9": {
      "main": [
        [
          {
            "node": "Madeira",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "USD": {
      "main": [
        [
          {
            "node": "üîë Preparar Firebase5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "EUR": {
      "main": [
        [
          {
            "node": "üîë Preparar Firebase6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üìã Resposta Final do Sistema3": {
      "main": [
        [
          {
            "node": "üîç Extrair Pre√ßo2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üìã Resposta Final do Sistema2": {
      "main": [
        [
          {
            "node": "üîç Extrair Pre√ßo",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üìã Resposta Final do Sistema1": {
      "main": [
        [
          {
            "node": "üîç Extrair Pre√ßo6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Carbono": {
      "main": [
        [
          {
            "node": "üíæ CARBONO",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Boi": {
      "main": [
        [
          {
            "node": "üíæ BOI",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Milho": {
      "main": [
        [
          {
            "node": "üíæ MILHO",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üìã Resposta Final do Sistema": {
      "main": [
        [
          {
            "node": "üßÆ Calcular CH2O Original",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üßÆ Calcular CH2O Original": {
      "main": [
        [
          {
            "node": "üíæ CH2O",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üßÆ Calcular Custo_√Ågua": {
      "main": [
        [
          {
            "node": "üíæ Custo_√Ågua",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üßÆ Calcular PDM": {
      "main": [
        [
          {
            "node": "üíæ PDM",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üßÆ Calcular UCS": {
      "main": [
        [
          {
            "node": "üíæ UCS",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üßÆ Calcular UCS ASE": {
      "main": [
        [
          {
            "node": "üíæ UCS ASE",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üìã Resposta Final CH2O Original": {
      "main": [
        [
          {
            "node": "üßÆ Calcular Custo_√Ågua",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üìã Resposta Final PDM": {
      "main": [
        [
          {
            "node": "üßÆ Calcular UCS",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üìã Resposta Final UCS ASE": {
      "main": [
        [
          {
            "node": "üßÆ Calcular VUS",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üßÆ Calcular VUS": {
      "main": [
        [
          {
            "node": "üíæ VUS",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üìã Resposta Final VUS": {
      "main": [
        [
          {
            "node": "üßÆ Calcular Carbono_CRS",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üßÆ Calcular Carbono_CRS": {
      "main": [
        [
          {
            "node": "üíæ Carbono_CRS",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üìã Resposta Final Carbono_CRS": {
      "main": [
        [
          {
            "node": "üßÆ Calcular Agua_CRS",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üßÆ Calcular Agua_CRS": {
      "main": [
        [
          {
            "node": "üíæ Agua_CRS",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üßÆ Calcular Vmad": {
      "main": [
        [
          {
            "node": "üíæ Vmad",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üßÆ Calcular Valor_Uso_Solo": {
      "main": [
        [
          {
            "node": "üíæ Valor_Uso_Solo",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üìã Resposta Final do Sistema5": {
      "main": [
        [
          {
            "node": "üîç Extrair Pre√ßo3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üìã Resposta Final do Sistema6": {
      "main": [
        [
          {
            "node": "üîç Extrair Pre√ßo9",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üìã Resposta Final do Sistema4": {
      "main": [
        [
          {
            "node": "üîç Extrair Pre√ßo1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üíæ USD": {
      "main": [
        [
          {
            "node": "üìã Resposta Final6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üíæ CH2O": {
      "main": [
        [
          {
            "node": "üìã Resposta Final CH2O Original",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üíæ PDM": {
      "main": [
        [
          {
            "node": "üìã Resposta Final PDM",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üíæ Custo_√Ågua": {
      "main": [
        [
          {
            "node": "üßÆ Calcular PDM",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üíæ UCS ASE": {
      "main": [
        [
          {
            "node": "üìã Resposta Final UCS ASE",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üíæ VUS": {
      "main": [
        [
          {
            "node": "üìã Resposta Final VUS",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üíæ Carbono_CRS": {
      "main": [
        [
          {
            "node": "üìã Resposta Final Carbono_CRS",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üíæ Agua_CRS": {
      "main": [
        [
          {
            "node": "üìã Resposta Final Agua_CRS",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üíæ Vmad": {
      "main": [
        [
          {
            "node": "üìã Resposta Final Vmad",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üíæ UCS": {
      "main": [
        [
          {
            "node": "üßÆ Calcular UCS ASE",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üìã Resposta Final Agua_CRS": {
      "main": [
        [
          {
            "node": "üßÆ Calcular Vmad",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üìã Resposta Final Vmad": {
      "main": [
        [
          {
            "node": "üßÆ Calcular Valor_Uso_Solo",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üíæ EUR": {
      "main": [
        [
          {
            "node": "üìã Resposta Final5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üíæ CARBONO": {
      "main": [
        [
          {
            "node": "üìã Resposta Final3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üíæ MILHO": {
      "main": [
        [
          {
            "node": "üìã Resposta Final",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üíæ BOI": {
      "main": [
        [
          {
            "node": "üìã Resposta Final2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üíæ SOJA": {
      "main": [
        [
          {
            "node": "üìã Resposta Final1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üíæ MADEIRA": {
      "main": [
        [
          {
            "node": "üìã Resposta Final4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Soja": {
      "main": [
        [
          {
            "node": "üíæ SOJA",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Madeira": {
      "main": [
        [
          {
            "node": "üíæ MADEIRA",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "46142181-9f43-42aa-b62c-d9852f04dab1",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "13b0ea5dd383d159ddd6c18778dc7059e86dde50c7b38850c42dfbb9a92940a0"
  },
  "id": "DqIKUC1cz6V7gOMJ",
  "tags": [
    {
      "createdAt": "2025-10-14T23:44:24.499Z",
      "updatedAt": "2025-10-14T23:44:24.499Z",
      "id": "OkbvZ5yWgZDUY8U8",
      "name": "automated-integration"
    },
    {
      "createdAt": "2025-10-14T23:44:24.630Z",
      "updatedAt": "2025-10-14T23:44:24.630Z",
      "id": "T7xqzMuZU1jN6sDY",
      "name": "firebase-reorganization"
    },
    {
      "createdAt": "2025-10-14T23:44:24.521Z",
      "updatedAt": "2025-10-14T23:44:24.521Z",
      "id": "dgLqEuv12XZh4gx8",
      "name": "commodities-optimized"
    },
    {
      "createdAt": "2025-10-14T23:44:24.472Z",
      "updatedAt": "2025-10-14T23:44:24.472Z",
      "id": "i1AffO2WDJASDaOP",
      "name": "ch2o-water-index"
    }
  ]
}