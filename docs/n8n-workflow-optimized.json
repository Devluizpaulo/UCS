{
  "name": "Cota√ß√µes - Integra√ß√£o Autom√°tica",
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "cronExpression",
              "expression": "0 9,15 * * 1-5"
            }
          ]
        }
      },
      "id": "scheduler-node",
      "name": "üïê Agendador (9h e 15h)",
      "type": "n8n-nodes-base.cron",
      "typeVersion": 1,
      "position": [
        -1200,
        400
      ]
    },
    {
      "parameters": {
        "url": "https://br.investing.com/commodities/us-corn-historical-data?cid=964522",
        "responseFormat": "string",
        "options": {}
      },
      "id": "corn-fetch",
      "name": "üåê Buscar Milho",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        -768,
        128
      ]
    },
    {
      "parameters": {
        "extractionValues": {
          "values": [
            {
              "key": "preco",
              "cssSelector": "span[data-test='instrument-price-last'], .text-2xl, .instrument-price_instrument-price__*, [data-test*='price'], #last_last"
            }
          ]
        },
        "options": {}
      },
      "id": "corn-extract",
      "name": "üîç Extrair Pre√ßo Milho",
      "type": "n8n-nodes-base.htmlExtract",
      "typeVersion": 1,
      "position": [
        -576,
        128
      ]
    },
    {
      "parameters": {
        "jsCode": "// Processamento otimizado para Milho\nif ($input.first() === undefined) {\n  return [{ json: { \n    erro: 'Nenhum dado recebido do n√≥ anterior.', \n    timestamp: new Date().toISOString() \n  } }];\n}\n\nlet precoExtraido = $input.first().json.preco;\n\nif (precoExtraido === undefined || precoExtraido === null || precoExtraido === '') {\n  return [{ json: { \n    ativo: 'milho',\n    erro: 'Pre√ßo n√£o encontrado',\n    timestamp: new Date().toISOString(),\n    status: 'erro'\n  } }];\n}\n\ntry {\n  let precoLimpo = precoExtraido\n    .replace(/\\s/g, '')\n    .replace(/[R$]/g, '')\n    .replace(/\\./g, '')\n    .replace(/,/g, '.');\n  \n  let precoNumerico = parseFloat(precoLimpo);\n  \n  if (isNaN(precoNumerico)) {\n    throw new Error('Convers√£o para n√∫mero falhou: ' + precoExtraido);\n  }\n  \n  const currentDate = new Date().toISOString().split('T')[0];\n  const [year, month, day] = currentDate.split('-');\n  const brazilianDate = `${day}/${month}/${year}`;\n  \n  return [{ json: {\n    ativo: 'milho',\n    data: brazilianDate,\n    ultimo: precoNumerico,\n    abertura: precoNumerico,\n    maxima: precoNumerico,\n    minima: precoNumerico,\n    volume: null,\n    variacao_pct: null,\n    moeda: 'BRL',\n    fonte: 'Investing.com',\n    timestamp: new Date().toISOString(),\n    status: 'sucesso'\n  } }];\n} catch (error) {\n  return [{ json: {\n    ativo: 'milho',\n    erro: 'Erro na convers√£o: ' + error.message,\n    timestamp: new Date().toISOString(),\n    status: 'erro'\n  } }];\n}"
      },
      "id": "corn-process",
      "name": "‚öôÔ∏è Processar Milho",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -368,
        128
      ]
    },
    {
      "parameters": {
        "authentication": "serviceAccount",
        "operation": "upsert",
        "projectId": "ucs-index-tracker",
        "collection": "cotacoes_do_dia",
        "updateKey": "timestamp",
        "columns": "ativo,data,ultimo,abertura,maxima,minima,volume,variacao_pct,moeda,fonte,timestamp,status"
      },
      "id": "corn-save",
      "name": "üíæ Salvar Milho",
      "type": "n8n-nodes-base.googleFirebaseCloudFirestore",
      "typeVersion": 1,
      "position": [
        -176,
        128
      ],
      "credentials": {
        "googleApi": {
          "id": "7BpBqB87SWkOYvB1",
          "name": "Google Firebase Cloud Firestore account 2"
        }
      }
    },
    {
      "parameters": {
        "url": "https://br.investing.com/commodities/live-cattle-historical-data?cid=964528",
        "responseFormat": "string",
        "options": {}
      },
      "id": "cattle-fetch",
      "name": "üåê Buscar Boi Gordo",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        -768,
        288
      ]
    },
    {
      "parameters": {
        "extractionValues": {
          "values": [
            {
              "key": "preco",
              "cssSelector": "span[data-test='instrument-price-last'], .text-2xl, .instrument-price_instrument-price__*, [data-test*='price'], #last_last"
            }
          ]
        },
        "options": {}
      },
      "id": "cattle-extract",
      "name": "üîç Extrair Pre√ßo Boi",
      "type": "n8n-nodes-base.htmlExtract",
      "typeVersion": 1,
      "position": [
        -576,
        288
      ]
    },
    {
      "parameters": {
        "jsCode": "// Processamento otimizado para Boi Gordo\nif ($input.first() === undefined) {\n  return [{ json: { \n    erro: 'Nenhum dado recebido do n√≥ anterior.', \n    timestamp: new Date().toISOString() \n  } }];\n}\n\nlet precoExtraido = $input.first().json.preco;\n\nif (precoExtraido === undefined || precoExtraido === null || precoExtraido === '') {\n  return [{ json: { \n    ativo: 'boi_gordo',\n    erro: 'Pre√ßo n√£o encontrado',\n    timestamp: new Date().toISOString(),\n    status: 'erro'\n  } }];\n}\n\ntry {\n  let precoLimpo = precoExtraido\n    .replace(/\\s/g, '')\n    .replace(/[R$]/g, '')\n    .replace(/\\./g, '')\n    .replace(/,/g, '.');\n  \n  let precoNumerico = parseFloat(precoLimpo);\n  \n  if (isNaN(precoNumerico)) {\n    throw new Error('Convers√£o para n√∫mero falhou: ' + precoExtraido);\n  }\n  \n  const currentDate = new Date().toISOString().split('T')[0];\n  const [year, month, day] = currentDate.split('-');\n  const brazilianDate = `${day}/${month}/${year}`;\n  \n  return [{ json: {\n    ativo: 'boi_gordo',\n    data: brazilianDate,\n    ultimo: precoNumerico,\n    abertura: precoNumerico,\n    maxima: precoNumerico,\n    minima: precoNumerico,\n    volume: null,\n    variacao_pct: null,\n    moeda: 'BRL',\n    fonte: 'Investing.com',\n    timestamp: new Date().toISOString(),\n    status: 'sucesso'\n  } }];\n} catch (error) {\n  return [{ json: {\n    ativo: 'boi_gordo',\n    erro: 'Erro na convers√£o: ' + error.message,\n    timestamp: new Date().toISOString(),\n    status: 'erro'\n  } }];\n}"
      },
      "id": "cattle-process",
      "name": "‚öôÔ∏è Processar Boi",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -368,
        288
      ]
    },
    {
      "parameters": {
        "authentication": "serviceAccount",
        "operation": "upsert",
        "projectId": "ucs-index-tracker",
        "collection": "cotacoes_do_dia",
        "updateKey": "timestamp",
        "columns": "ativo,data,ultimo,abertura,maxima,minima,volume,variacao_pct,moeda,fonte,timestamp,status"
      },
      "id": "cattle-save",
      "name": "üíæ Salvar Boi",
      "type": "n8n-nodes-base.googleFirebaseCloudFirestore",
      "typeVersion": 1,
      "position": [
        -176,
        288
      ],
      "credentials": {
        "googleApi": {
          "id": "7BpBqB87SWkOYvB1",
          "name": "Google Firebase Cloud Firestore account 2"
        }
      }
    },
    {
      "parameters": {
        "url": "https://br.investing.com/commodities/us-soybeans-historical-data?cid=964523",
        "responseFormat": "string",
        "options": {}
      },
      "id": "soy-fetch",
      "name": "üåê Buscar Soja",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        -768,
        448
      ]
    },
    {
      "parameters": {
        "extractionValues": {
          "values": [
            {
              "key": "preco",
              "cssSelector": "span[data-test='instrument-price-last'], .text-2xl, .instrument-price_instrument-price__*, [data-test*='price'], #last_last"
            }
          ]
        },
        "options": {}
      },
      "id": "soy-extract",
      "name": "üîç Extrair Pre√ßo Soja",
      "type": "n8n-nodes-base.htmlExtract",
      "typeVersion": 1,
      "position": [
        -576,
        448
      ]
    },
    {
      "parameters": {
        "jsCode": "// Processamento otimizado para Soja\nif ($input.first() === undefined) {\n  return [{ json: { \n    erro: 'Nenhum dado recebido do n√≥ anterior.', \n    timestamp: new Date().toISOString() \n  } }];\n}\n\nlet precoExtraido = $input.first().json.preco;\n\nif (precoExtraido === undefined || precoExtraido === null || precoExtraido === '') {\n  return [{ json: { \n    ativo: 'soja',\n    erro: 'Pre√ßo n√£o encontrado',\n    timestamp: new Date().toISOString(),\n    status: 'erro'\n  } }];\n}\n\ntry {\n  let precoLimpo = precoExtraido\n    .replace(/\\s/g, '')\n    .replace(/[$]/g, '')\n    .replace(/\\./g, '')\n    .replace(/,/g, '.');\n  \n  let precoNumerico = parseFloat(precoLimpo);\n  \n  if (isNaN(precoNumerico)) {\n    throw new Error('Convers√£o para n√∫mero falhou: ' + precoExtraido);\n  }\n  \n  const currentDate = new Date().toISOString().split('T')[0];\n  const [year, month, day] = currentDate.split('-');\n  const brazilianDate = `${day}/${month}/${year}`;\n  \n  return [{ json: {\n    ativo: 'soja',\n    data: brazilianDate,\n    ultimo: precoNumerico,\n    abertura: precoNumerico,\n    maxima: precoNumerico,\n    minima: precoNumerico,\n    volume: null,\n    variacao_pct: null,\n    moeda: 'USD',\n    fonte: 'Investing.com',\n    timestamp: new Date().toISOString(),\n    status: 'sucesso'\n  } }];\n} catch (error) {\n  return [{ json: {\n    ativo: 'soja',\n    erro: 'Erro na convers√£o: ' + error.message,\n    timestamp: new Date().toISOString(),\n    status: 'erro'\n  } }];\n}"
      },
      "id": "soy-process",
      "name": "‚öôÔ∏è Processar Soja",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -368,
        448
      ]
    },
    {
      "parameters": {
        "authentication": "serviceAccount",
        "operation": "upsert",
        "projectId": "ucs-index-tracker",
        "collection": "cotacoes_do_dia",
        "updateKey": "timestamp",
        "columns": "ativo,data,ultimo,abertura,maxima,minima,volume,variacao_pct,moeda,fonte,timestamp,status"
      },
      "id": "soy-save",
      "name": "üíæ Salvar Soja",
      "type": "n8n-nodes-base.googleFirebaseCloudFirestore",
      "typeVersion": 1,
      "position": [
        -176,
        448
      ],
      "credentials": {
        "googleApi": {
          "id": "7BpBqB87SWkOYvB1",
          "name": "Google Firebase Cloud Firestore account 2"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Aguarda todos os salvamentos terminarem\nconst results = [];\n\n// Coleta resultados de todos os n√≥s de salvamento\nconst cornResult = $('üíæ Salvar Milho').first();\nconst cattleResult = $('üíæ Salvar Boi').first();\nconst soyResult = $('üíæ Salvar Soja').first();\n\nif (cornResult) results.push(cornResult.json);\nif (cattleResult) results.push(cattleResult.json);\nif (soyResult) results.push(soyResult.json);\n\nreturn [{\n  json: {\n    message: 'Dados salvos, iniciando reorganiza√ß√£o autom√°tica',\n    saved_items: results.length,\n    timestamp: new Date().toISOString()\n  }\n}];"
      },
      "id": "merge-results",
      "name": "üîÑ Consolidar Resultados",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        48,
        288
      ]
    },
    {
      "parameters": {
        "url": "http://localhost:3000/api/webhook/reorganize",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "httpMethod": "POST",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer sua_chave_secreta_aqui"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "trigger",
              "value": "n8n_data_saved"
            },
            {
              "name": "timestamp",
              "value": "={{ new Date().toISOString() }}"
            }
          ]
        },
        "options": {
          "timeout": 30000
        }
      },
      "id": "trigger-reorganization",
      "name": "üöÄ Trigger Reorganiza√ß√£o",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        272,
        288
      ]
    },
    {
      "parameters": {
        "jsCode": "// Processa resposta da reorganiza√ß√£o\nconst webhookResponse = $input.first().json;\n\nreturn [{\n  json: {\n    status: 'workflow_completed',\n    reorganization_triggered: webhookResponse.success || false,\n    message: webhookResponse.message || 'Reorganiza√ß√£o autom√°tica executada',\n    timestamp: new Date().toISOString()\n  }\n}];"
      },
      "id": "final-response",
      "name": "‚úÖ Resposta Final",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        496,
        288
      ]
    }
  ],
  "connections": {
    "üïê Agendador (9h e 15h)": {
      "main": [
        [
          {
            "node": "üåê Buscar Milho",
            "type": "main",
            "index": 0
          },
          {
            "node": "üåê Buscar Boi Gordo",
            "type": "main",
            "index": 0
          },
          {
            "node": "üåê Buscar Soja",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üåê Buscar Milho": {
      "main": [
        [
          {
            "node": "üîç Extrair Pre√ßo Milho",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üîç Extrair Pre√ßo Milho": {
      "main": [
        [
          {
            "node": "‚öôÔ∏è Processar Milho",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "‚öôÔ∏è Processar Milho": {
      "main": [
        [
          {
            "node": "üíæ Salvar Milho",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üíæ Salvar Milho": {
      "main": [
        [
          {
            "node": "üîÑ Consolidar Resultados",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üåê Buscar Boi Gordo": {
      "main": [
        [
          {
            "node": "üîç Extrair Pre√ßo Boi",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üîç Extrair Pre√ßo Boi": {
      "main": [
        [
          {
            "node": "‚öôÔ∏è Processar Boi",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "‚öôÔ∏è Processar Boi": {
      "main": [
        [
          {
            "node": "üíæ Salvar Boi",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üíæ Salvar Boi": {
      "main": [
        [
          {
            "node": "üîÑ Consolidar Resultados",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üåê Buscar Soja": {
      "main": [
        [
          {
            "node": "üîç Extrair Pre√ßo Soja",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üîç Extrair Pre√ßo Soja": {
      "main": [
        [
          {
            "node": "‚öôÔ∏è Processar Soja",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "‚öôÔ∏è Processar Soja": {
      "main": [
        [
          {
            "node": "üíæ Salvar Soja",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üíæ Salvar Soja": {
      "main": [
        [
          {
            "node": "üîÑ Consolidar Resultados",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üîÑ Consolidar Resultados": {
      "main": [
        [
          {
            "node": "üöÄ Trigger Reorganiza√ß√£o",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üöÄ Trigger Reorganiza√ß√£o": {
      "main": [
        [
          {
            "node": "‚úÖ Resposta Final",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "tags": [
    {
      "name": "automated-integration"
    },
    {
      "name": "firebase-reorganization"
    },
    {
      "name": "commodities-optimized"
    }
  ]
}