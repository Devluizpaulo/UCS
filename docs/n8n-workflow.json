{
  "name": "Cota√ß√µes",
  "nodes": [
    {
      "parameters": {
        "url": "https://br.investing.com/commodities/us-corn-historical-data?cid=964522",
        "responseFormat": "string",
        "options": {}
      },
      "id": "ded69f2c-e83c-4db5-bb79-ef1e810bd59b",
      "name": "üåê Buscar Investing.com",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        -768,
        128
      ]
    },
    {
      "parameters": {
        "extractionValues": {
          "values": [
            {
              "key": "preco",
              "cssSelector": "span[data-test='instrument-price-last'], .text-2xl, .instrument-price_instrument-price__*, [data-test*='price'], #last_last"
            }
          ]
        },
        "options": {}
      },
      "id": "2a4651aa-6f87-4c99-b7e5-7e3a20606f32",
      "name": "üîç Extrair Pre√ßo",
      "type": "n8n-nodes-base.htmlExtract",
      "typeVersion": 1,
      "position": [
        -576,
        128
      ]
    },
    {
      "parameters": {
        "jsCode": "// Verifica se veio dados do n√≥ anterior\nif ($input.first() === undefined) {\n  return [{ json: { \n    erro: 'Nenhum dado recebido do n√≥ anterior.', \n    timestamp: new Date().toISOString() \n  } }];\n}\n\n// Pega o texto extra√≠do do HTML\nlet precoExtraido = $input.first().json.preco;\n\n// Verifica se o pre√ßo foi encontrado\nif (precoExtraido === undefined || precoExtraido === null || precoExtraido === '') {\n  return [{ json: { \n    ativo: 'Milho (Investing.com)',\n    erro: 'Pre√ßo n√£o encontrado com nenhum seletor CSS. Estrutura do site pode ter mudado.',\n    timestamp: new Date().toISOString(),\n    status: 'erro'\n  } }];\n}\n\n// Tenta converter o pre√ßo\ntry {\n  // Remove espa√ßos e caracteres especiais, depois converte\n  let precoLimpo = precoExtraido\n    .replace(/\\s/g, '')\n    .replace(/[R$]/g, '')\n    .replace(/\\./g, '')\n    .replace(/,/g, '.');\n  \n  let precoNumerico = parseFloat(precoLimpo);\n  \n  if (isNaN(precoNumerico)) {\n    throw new Error('Convers√£o para n√∫mero falhou: ' + precoExtraido);\n  }\n  \n  return [{ json: {\n    ativo: 'Milho (Investing.com)',\n    preco: precoNumerico,\n    preco_original: precoExtraido,\n    moeda: 'BRL',\n    fonte: 'Investing.com',\n    timestamp: new Date().toISOString(),\n    status: 'sucesso'\n  } }];\n} catch (error) {\n  return [{ json: {\n    ativo: 'Milho (Investing.com)',\n    erro: 'Erro na convers√£o: ' + error.message,\n    preco_original: precoExtraido,\n    timestamp: new Date().toISOString(),\n    status: 'erro'\n  } }];\n}"
      },
      "id": "fd731eca-0066-4d22-9cce-8d0db56dd59f",
      "name": "‚öôÔ∏è Processar Dados",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -368,
        128
      ]
    },
    {
      "parameters": {
        "jsCode": "try {\n  const inputData = $input.first().json;\n\n  if (inputData.erro) {\n    return [{ json: inputData }];\n  }\n\n  // Preparar dados para o Firebase Firestore\n  const currentDate = new Date().toISOString().split('T')[0];\n  const [year, month, day] = currentDate.split('-');\n  const brazilianDate = `${day}/${month}/${year}`;\n  \n  return [\n    {\n      json: {\n        ativo: 'Milho Futuros',\n        data: brazilianDate,\n        ultimo: inputData.preco,\n        abertura: inputData.preco,\n        maxima: inputData.preco,\n        minima: inputData.preco,\n        volume: null,\n        variacao_pct: null,\n        moeda: inputData.moeda,\n        fonte: inputData.fonte,\n        timestamp: inputData.timestamp,\n        status: inputData.status\n      }\n    }\n  ];\n} catch (error) {\n  return [\n    {\n      json: {\n        erro: \"Erro ao preparar Firebase: \" + error.message,\n        timestamp: new Date().toISOString(),\n        status: \"erro_firebase_prep\",\n      },\n    },\n  ];\n}\n"
      },
      "id": "431daa6a-bf3e-48d2-86c6-1ee88017ede6",
      "name": "üîë Preparar Firebase",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -176,
        128
      ]
    },
    {
      "parameters": {
        "authentication": "serviceAccount",
        "operation": "upsert",
        "projectId": "ucs-index-tracker",
        "collection": "cotacoes_do_dia",
        "updateKey": "timestamp",
        "columns": "ativo,data,ultimo,abertura,maxima,minima,volume,variacao_pct,moeda,fonte,timestamp,status"
      },
      "id": "0d647017-dd4a-4181-a80e-941a99434a61",
      "name": "üíæ Salvar no Firebase",
      "type": "n8n-nodes-base.googleFirebaseCloudFirestore",
      "typeVersion": 1,
      "position": [
        48,
        128
      ],
      "credentials": {
        "googleApi": {
          "id": "7BpBqB87SWkOYvB1",
          "name": "Google Firebase Cloud Firestore account 2"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "try {\n  const firebaseResponse = $input.first().json;\n  const originalData = $('‚öôÔ∏è Processar Dados').first().json;\n\n  if (firebaseResponse.error) {\n    return [{\n      json: {\n        status: 'erro_firebase',\n        erro: firebaseResponse.error,\n        dados_originais: originalData,\n        timestamp: new Date().toISOString()\n      }\n    }];\n  }\n\n  return [{\n    json: {\n      status: 'sucesso',\n      mensagem: 'Dados salvos no Firebase com sucesso',\n      dados_salvos: originalData,\n      firebase_response: firebaseResponse,\n      timestamp: new Date().toISOString()\n    }\n  }];\n\n} catch (error) {\n  return [{\n    json: {\n      status: 'erro_final',\n      erro: 'Erro na resposta final: ' + error.message,\n      timestamp: new Date().toISOString()\n    }\n  }];\n}"
      },
      "id": "b5ef95d0-e83a-48c4-8125-cdd987e1a921",
      "name": "üìã Resposta Final",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        640,
        128
      ]
    },
    {
      "parameters": {
        "url": "https://br.investing.com/commodities/live-cattle-historical-data?cid=964528",
        "responseFormat": "string",
        "options": {}
      },
      "id": "e60d9483-ba0c-4b39-b4b0-d11c2c8e7e0d",
      "name": "üåê Buscar Live Cattle",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        -768,
        288
      ]
    },
    {
      "parameters": {
        "extractionValues": {
          "values": [
            {
              "key": "preco",
              "cssSelector": "span[data-test='instrument-price-last'], .text-2xl, .instrument-price_instrument-price__*, [data-test*='price'], #last_last"
            }
          ]
        },
        "options": {}
      },
      "id": "3dc84482-e040-4001-9843-e333bf3bf5c7",
      "name": "üîç Extrair Pre√ßo1",
      "type": "n8n-nodes-base.htmlExtract",
      "typeVersion": 1,
      "position": [
        -576,
        288
      ]
    },
    {
      "parameters": {
        "jsCode": "// Verifica se veio dados do n√≥ anterior\nif ($input.first() === undefined) {\n  return [{ json: { \n    erro: 'Nenhum dado recebido do n√≥ anterior.', \n    timestamp: new Date().toISOString() \n  } }];\n}\n\n// Pega o texto extra√≠do do HTML\nlet precoExtraido = $input.first().json.preco;\n\n// Verifica se o pre√ßo foi encontrado\nif (precoExtraido === undefined || precoExtraido === null || precoExtraido === '') {\n  return [{ json: { \n    ativo: 'Boi Gordo (Investing.com)',\n    erro: 'Pre√ßo n√£o encontrado com nenhum seletor CSS. Estrutura do site pode ter mudado.',\n    timestamp: new Date().toISOString(),\n    status: 'erro'\n  } }];\n}\n\n// Tenta converter o pre√ßo\ntry {\n  // Remove espa√ßos e caracteres especiais, depois converte\n  let precoLimpo = precoExtraido\n    .replace(/\\s/g, '')\n    .replace(/[R$]/g, '')\n    .replace(/\\./g, '')\n    .replace(/,/g, '.');\n  \n  let precoNumerico = parseFloat(precoLimpo);\n  \n  if (isNaN(precoNumerico)) {\n    throw new Error('Convers√£o para n√∫mero falhou: ' + precoExtraido);\n  }\n  \n  return [{ json: {\n    ativo: 'Boi Gordo (Investing.com)',\n    preco: precoNumerico,\n    preco_original: precoExtraido,\n    moeda: 'BRL',\n    fonte: 'Investing.com',\n    timestamp: new Date().toISOString(),\n    status: 'sucesso'\n  } }];\n} catch (error) {\n  return [{ json: {\n    ativo: 'Boi Gordo (Investing.com)',\n    erro: 'Erro na convers√£o: ' + error.message,\n    preco_original: precoExtraido,\n    timestamp: new Date().toISOString(),\n    status: 'erro'\n  } }];\n}"
      },
      "id": "d37f1e89-2ff5-4362-adcf-e88aca5016bf",
      "name": "‚öôÔ∏è Processar Dados1",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -368,
        288
      ]
    },
    {
      "parameters": {
        "jsCode": "try {\n  const inputData = $input.first().json;\n\n  if (inputData.erro) {\n    return [{ json: inputData }];\n  }\n\n  // Preparar dados para o Firebase Firestore\n  const currentDate = new Date().toISOString().split('T')[0];\n  const [year, month, day] = currentDate.split('-');\n  const brazilianDate = `${day}/${month}/${year}`;\n  \n  return [\n    {\n      json: {\n        ativo: 'Boi Gordo Futuros',\n        data: brazilianDate,\n        ultimo: inputData.preco,\n        abertura: inputData.preco,\n        maxima: inputData.preco,\n        minima: inputData.preco,\n        volume: null,\n        variacao_pct: null,\n        moeda: inputData.moeda,\n        fonte: inputData.fonte,\n        timestamp: inputData.timestamp,\n        status: inputData.status\n      }\n    }\n  ];\n} catch (error) {\n  return [\n    {\n      json: {\n        erro: \"Erro ao preparar Firebase: \" + error.message,\n        timestamp: new Date().toISOString(),\n        status: \"erro_firebase_prep\",\n      },\n    },\n  ];\n}\n"
      },
      "id": "50d09548-061a-40b7-a3f4-e82eadfb8ef2",
      "name": "üîë Preparar Firebase1",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -176,
        288
      ]
    },
    {
      "parameters": {
        "authentication": "serviceAccount",
        "operation": "upsert",
        "projectId": "ucs-index-tracker",
        "collection": "cotacoes_do_dia",
        "updateKey": "timestamp",
        "columns": "ativo,data,ultimo,abertura,maxima,minima,volume,variacao_pct,moeda,fonte,timestamp,status"
      },
      "id": "5e19fffe-22d8-4166-9218-d64460734f96",
      "name": "üíæ Salvar no Firebase1",
      "type": "n8n-nodes-base.googleFirebaseCloudFirestore",
      "typeVersion": 1,
      "position": [
        48,
        288
      ],
      "credentials": {
        "googleApi": {
          "id": "7BpBqB87SWkOYvB1",
          "name": "Google Firebase Cloud Firestore account 2"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "try {\n  const firebaseResponse = $input.first().json;\n  const originalData = $('‚öôÔ∏è Processar Dados1').first().json;\n\n  if (firebaseResponse.error) {\n    return [{\n      json: {\n        status: 'erro_firebase',\n        erro: firebaseResponse.error,\n        dados_originais: originalData,\n        timestamp: new Date().toISOString()\n      }\n    }];\n  }\n\n  return [{\n    json: {\n      status: 'sucesso',\n      mensagem: 'Dados salvos no Firebase com sucesso',\n      dados_salvos: originalData,\n      firebase_response: firebaseResponse,\n      timestamp: new Date().toISOString()\n    }\n  }];\n\n} catch (error) {\n  return [{\n    json: {\n      status: 'erro_final',\n      erro: 'Erro na resposta final: ' + error.message,\n      timestamp: new Date().toISOString()\n    }\n  }];\n}"
      },
      "id": "c5c06061-cd42-449c-9000-7580a39cfb84",
      "name": "üìã Resposta Final1",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        640,
        288
      ]
    },
    {
      "parameters": {
        "url": "https://br.investing.com/commodities/us-soybeans-historical-data?cid=964523",
        "responseFormat": "string",
        "options": {}
      },
      "id": "5b159d0b-65af-4d33-96bf-edee58781eac",
      "name": "üåê Buscar Soja US",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        -768,
        432
      ]
    },
    {
      "parameters": {
        "extractionValues": {
          "values": [
            {
              "key": "preco",
              "cssSelector": "span[data-test='instrument-price-last'], .text-2xl, .instrument-price_instrument-price__*, [data-test*='price'], #last_last"
            }
          ]
        },
        "options": {}
      },
      "id": "4d6646ca-8aee-4425-a5c1-0038a22b2241",
      "name": "üîç Extrair Pre√ßo2",
      "type": "n8n-nodes-base.htmlExtract",
      "typeVersion": 1,
      "position": [
        -576,
        432
      ]
    },
    {
      "parameters": {
        "jsCode": "// Verifica se veio dados do n√≥ anterior\nif ($input.first() === undefined) {\n  return [{ json: { \n    erro: 'Nenhum dado recebido do n√≥ anterior.', \n    timestamp: new Date().toISOString() \n  } }];\n}\n\n// Pega o texto extra√≠do do HTML\nlet precoExtraido = $input.first().json.preco;\n\n// Verifica se o pre√ßo foi encontrado\nif (precoExtraido === undefined || precoExtraido === null || precoExtraido === '') {\n  return [{ json: { \n    ativo: 'Soja US (Investing.com)',\n    erro: 'Pre√ßo n√£o encontrado com nenhum seletor CSS. Estrutura do site pode ter mudado.',\n    timestamp: new Date().toISOString(),\n    status: 'erro'\n  } }];\n}\n\n// Tenta converter o pre√ßo\ntry {\n  // Remove espa√ßos e caracteres especiais, depois converte\n  let precoLimpo = precoExtraido\n    .replace(/\\s/g, '')\n    .replace(/[$]/g, '')\n    .replace(/\\./g, '')\n    .replace(/,/g, '.');\n  \n  let precoNumerico = parseFloat(precoLimpo);\n  \n  if (isNaN(precoNumerico)) {\n    throw new Error('Convers√£o para n√∫mero falhou: ' + precoExtraido);\n  }\n  \n  return [{ json: {\n    ativo: 'Soja US (Investing.com)',\n    preco: precoNumerico,\n    preco_original: precoExtraido,\n    moeda: 'USD',\n    fonte: 'Investing.com',\n    timestamp: new Date().toISOString(),\n    status: 'sucesso'\n  } }];\n} catch (error) {\n  return [{ json: {\n    ativo: 'Soja US (Investing.com)',\n    erro: 'Erro na convers√£o: ' + error.message,\n    preco_original: precoExtraido,\n    timestamp: new Date().toISOString(),\n    status: 'erro'\n  } }];\n}"
      },
      "id": "8d7a4a95-64b7-4924-84e2-84b658f9419d",
      "name": "‚öôÔ∏è Processar Dados2",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -368,
        432
      ]
    },
    {
      "parameters": {
        "jsCode": "try {\n  const inputData = $input.first().json;\n\n  if (inputData.erro) {\n    return [{ json: inputData }];\n  }\n\n  // Preparar dados para o Firebase Firestore\n  const currentDate = new Date().toISOString().split('T')[0];\n  const [year, month, day] = currentDate.split('-');\n  const brazilianDate = `${day}/${month}/${year}`;\n  \n  return [\n    {\n      json: {\n        ativo: 'Soja US Futuros',\n        data: brazilianDate,\n        ultimo: inputData.preco,\n        abertura: inputData.preco,\n        maxima: inputData.preco,\n        minima: inputData.preco,\n        volume: null,\n        variacao_pct: null,\n        moeda: inputData.moeda,\n        fonte: inputData.fonte,\n        timestamp: inputData.timestamp,\n        status: inputData.status\n      }\n    }\n  ];\n} catch (error) {\n  return [\n    {\n      json: {\n        erro: \"Erro ao preparar Firebase: \" + error.message,\n        timestamp: new Date().toISOString(),\n        status: \"erro_firebase_prep\",\n      },\n    },\n  ];\n}\n"
      },
      "id": "d6279340-3d33-4424-9956-cca251a8c891",
      "name": "üîë Preparar Firebase2",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -176,
        432
      ]
    },
    {
      "parameters": {
        "authentication": "serviceAccount",
        "operation": "upsert",
        "projectId": "ucs-index-tracker",
        "collection": "cotacoes_do_dia",
        "updateKey": "timestamp",
        "columns": "ativo,data,ultimo,abertura,maxima,minima,volume,variacao_pct,moeda,fonte,timestamp,status"
      },
      "id": "fff63f5a-c95f-41c3-8d7c-5eecce7c1963",
      "name": "üíæ Salvar no Firebase2",
      "type": "n8n-nodes-base.googleFirebaseCloudFirestore",
      "typeVersion": 1,
      "position": [
        48,
        432
      ],
      "credentials": {
        "googleApi": {
          "id": "7BpBqB87SWkOYvB1",
          "name": "Google Firebase Cloud Firestore account 2"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "try {\n  const firebaseResponse = $input.first().json;\n  const originalData = $('‚öôÔ∏è Processar Dados2').first().json;\n\n  if (firebaseResponse.error) {\n    return [{\n      json: {\n        status: 'erro_firebase',\n        erro: firebaseResponse.error,\n        dados_originais: originalData,\n        timestamp: new Date().toISOString()\n      }\n    }];\n  }\n\n  return [{\n    json: {\n      status: 'sucesso',\n      mensagem: 'Dados salvos no Firebase com sucesso',\n      dados_salvos: originalData,\n      firebase_response: firebaseResponse,\n      timestamp: new Date().toISOString()\n    }\n  }];\n\n} catch (error) {\n  return [{\n    json: {\n      status: 'erro_final',\n      erro: 'Erro na resposta final: ' + error.message,\n      timestamp: new Date().toISOString()\n    }\n  }];\n}"
      },
      "id": "1a52fd45-345c-46c3-a673-63c52205ad79",
      "name": "üìã Resposta Final2",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        640,
        432
      ]
    },
    {
      "parameters": {
        "url": "https://br.investing.com/commodities/lumber-historical-data",
        "responseFormat": "string",
        "options": {}
      },
      "id": "6ef12bb4-be67-49e7-a245-1186c972cd1d",
      "name": "üåê Buscar Madeira",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        -768,
        608
      ]
    },
    {
      "parameters": {
        "extractionValues": {
          "values": [
            {
              "key": "preco",
              "cssSelector": "span[data-test='instrument-price-last'], .text-2xl, .instrument-price_instrument-price__*, [data-test*='price'], #last_last"
            }
          ]
        },
        "options": {}
      },
      "id": "d75dbeff-1264-4d7a-afd1-65881ba16403",
      "name": "üîç Extrair Pre√ßo3",
      "type": "n8n-nodes-base.htmlExtract",
      "typeVersion": 1,
      "position": [
        -576,
        608
      ]
    },
    {
      "parameters": {
        "jsCode": "// Verifica se veio dados do n√≥ anterior\nif ($input.first() === undefined) {\n  return [{ json: { \n    erro: 'Nenhum dado recebido do n√≥ anterior.', \n    timestamp: new Date().toISOString() \n  } }];\n}\n\n// Pega o texto extra√≠do do HTML\nlet precoExtraido = $input.first().json.preco;\n\n// Verifica se o pre√ßo foi encontrado\nif (precoExtraido === undefined || precoExtraido === null || precoExtraido === '') {\n  return [{ json: { \n    ativo: 'Madeira (Investing.com)',\n    erro: 'Pre√ßo n√£o encontrado com nenhum seletor CSS. Estrutura do site pode ter mudado.',\n    timestamp: new Date().toISOString(),\n    status: 'erro'\n  } }];\n}\n\n// Tenta converter o pre√ßo\ntry {\n  // Remove espa√ßos e caracteres especiais, depois converte\n  let precoLimpo = precoExtraido\n    .replace(/\\s/g, '')\n    .replace(/[$]/g, '')\n    .replace(/\\./g, '')\n    .replace(/,/g, '.');\n  \n  let precoNumerico = parseFloat(precoLimpo);\n  \n  if (isNaN(precoNumerico)) {\n    throw new Error('Convers√£o para n√∫mero falhou: ' + precoExtraido);\n  }\n  \n  return [{ json: {\n    ativo: 'Madeira (Investing.com)',\n    preco: precoNumerico,\n    preco_original: precoExtraido,\n    moeda: 'USD',\n    fonte: 'Investing.com',\n    timestamp: new Date().toISOString(),\n    status: 'sucesso'\n  } }];\n} catch (error) {\n  return [{ json: {ativo: 'Madeira (Investing.com)', erro: 'Erro na convers√£o: ' + error.message,\n    preco_original: precoExtraido,\n    timestamp: new Date().toISOString(),\n    status: 'erro'\n  } }];\n}"
      },
      "id": "df5f9c6a-b0b2-4bac-b0e7-ece9a6475f25",
      "name": "‚öôÔ∏è Processar Dados3",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -384,
        608
      ]
    },
    {
      "parameters": {
        "jsCode": "try {\n  const inputData = $input.first().json;\n\n  if (inputData.erro) {\n    return [{ json: inputData }];\n  }\n\n  // Preparar dados para o Firebase Firestore\n  const currentDate = new Date().toISOString().split('T')[0];\n  const [year, month, day] = currentDate.split('-');\n  const brazilianDate = `${day}/${month}/${year}`;\n  \n  return [\n    {\n      json: {\n        ativo: 'Madeira Futuros',\n        data: brazilianDate,\n        ultimo: inputData.preco,\n        abertura: inputData.preco,\n        maxima: inputData.preco,\n        minima: inputData.preco,\n        volume: null,\n        variacao_pct: null,\n        moeda: inputData.moeda,\n        fonte: inputData.fonte,\n        timestamp: inputData.timestamp,\n        status: inputData.status\n      }\n    }\n  ];\n} catch (error) {\n  return [\n    {\n      json: {\n        erro: \"Erro ao preparar Firebase: \" + error.message,\n        timestamp: new Date().toISOString(),\n        status: \"erro_firebase_prep\",\n      },\n    },\n  ];\n}\n"
      },
      "id": "4aa02e9c-643c-43a6-bf47-5ed5e2821368",
      "name": "üîë Preparar Firebase3",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -192,
        608
      ]
    },
    {
      "parameters": {
        "authentication": "serviceAccount",
        "operation": "upsert",
        "projectId": "ucs-index-tracker",
        "collection": "cotacoes_do_dia",
        "updateKey": "timestamp",
        "columns": "ativo,data,ultimo,abertura,maxima,minima,volume,variacao_pct,moeda,fonte,timestamp,status"
      },
      "id": "fe497126-9870-4437-994e-b90d29c097a8",
      "name": "üíæ Salvar no Firebase3",
      "type": "n8n-nodes-base.googleFirebaseCloudFirestore",
      "typeVersion": 1,
      "position": [
        32,
        608
      ],
      "credentials": {
        "googleApi": {
          "id": "7BpBqB87SWkOYvB1",
          "name": "Google Firebase Cloud Firestore account 2"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "try {\n  const firebaseResponse = $input.first().json;\n  const originalData = $('‚öôÔ∏è Processar Dados3').first().json;\n\n  if (firebaseResponse.error) {\n    return [{\n      json: {\n        status: 'erro_firebase',\n        erro: firebaseResponse.error,\n        dados_originais: originalData,\n        timestamp: new Date().toISOString()\n      }\n    }];\n  }\n\n  return [{\n    json: {\n      status: 'sucesso',\n      mensagem: 'Dados salvos no Firebase com sucesso',\n      dados_salvos: originalData,\n      firebase_response: firebaseResponse,\n      timestamp: new Date().toISOString()\n    }\n  }];\n\n} catch (error) {\n  return [{\n    json: {\n      status: 'erro_final',\n      erro: 'Erro na resposta final: ' + error.message,\n      timestamp: new Date().toISOString()\n    }\n  }];\n}"
      },
      "id": "c9460e23-fd2f-4219-8bb8-42772a6e4957",
      "name": "üìã Resposta Final3",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        624,
        608
      ]
    },
    {
      "parameters": {
        "url": "https://br.investing.com/commodities/carbon-emissions-historical-data",
        "responseFormat": "string",
        "options": {}
      },
      "id": "fad16fab-0936-4422-ab55-f34ed7bf8d26",
      "name": "üåê Buscar Carbono",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        -768,
        800
      ]
    },
    {
      "parameters": {
        "extractionValues": {
          "values": [
            {
              "key": "preco",
              "cssSelector": "span[data-test='instrument-price-last'], .text-2xl, .instrument-price_instrument-price__*, [data-test*='price'], #last_last"
            }
          ]
        },
        "options": {}
      },
      "id": "02f15765-d700-4541-a79a-1fd341c9f527",
      "name": "üîç Extrair Pre√ßo4",
      "type": "n8n-nodes-base.htmlExtract",
      "typeVersion": 1,
      "position": [
        -576,
        800
      ]
    },
    {
      "parameters": {
        "jsCode": "// Verifica se veio dados do n√≥ anterior\nif ($input.first() === undefined) {\n  return [{ json: { \n    erro: 'Nenhum dado recebido do n√≥ anterior.', \n    timestamp: new Date().toISOString() \n  } }];\n}\n\n// Pega o texto extra√≠do do HTML\nlet precoExtraido = $input.first().json.preco;\n\n// Verifica se o pre√ßo foi encontrado\nif (precoExtraido === undefined || precoExtraido === null || precoExtraido === '') {\n  return [{ json: { \n    ativo: 'Carbono (Investing.com)',\n    erro: 'Pre√ßo n√£o encontrado com nenhum seletor CSS. Estrutura do site pode ter mudado.',\n    timestamp: new Date().toISOString(),\n    status: 'erro'\n  } }];\n}\n\n// Tenta converter o pre√ßo\ntry {\n  // Remove espa√ßos e caracteres especiais, depois converte\n  let precoLimpo = precoExtraido\n    .replace(/\\s/g, '')\n    .replace(/[$]/g, '')\n    .replace(/\\./g, '')\n    .replace(/,/g, '.');\n  \n  let precoNumerico = parseFloat(precoLimpo);\n  \n  if (isNaN(precoNumerico)) {\n    throw new Error('Convers√£o para n√∫mero falhou: ' + precoExtraido);\n  }\n  \n  return [{ json: {\n    ativo: 'Carbono (Investing.com)',\n    preco: precoNumerico,\n    preco_original: precoExtraido,\n    moeda: 'USD',\n    fonte: 'Investing.com',\n    timestamp: new Date().toISOString(),\n    status: 'sucesso'\n  } }];\n} catch (error) {\n  return [{ json: {\n    ativo: 'Carbono (Investing.com)',\n    erro: 'Erro na convers√£o: ' + error.message,\n    preco_original: precoExtraido,\n    timestamp: new Date().toISOString(),\n    status: 'erro'\n  } }];\n}"
      },
      "id": "b42ff786-fb96-49fc-b833-2bb4d1ae58d0",
      "name": "‚öôÔ∏è Processar Dados4",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -368,
        800
      ]
    },
    {
      "parameters": {
        "jsCode": "try {\n  const inputData = $input.first().json;\n\n  if (inputData.erro) {\n    return [{ json: inputData }];\n  }\n\n  // Preparar dados para o Firebase Firestore\n  const currentDate = new Date().toISOString().split('T')[0];\n  const [year, month, day] = currentDate.split('-');\n  const brazilianDate = `${day}/${month}/${year}`;\n  \n  return [\n    {\n      json: {\n        ativo: 'Carbono Futuros',\n        data: brazilianDate,\n        ultimo: inputData.preco,\n        abertura: inputData.preco,\n        maxima: inputData.preco,\n        minima: inputData.preco,\n        volume: null,\n        variacao_pct: null,\n        moeda: inputData.moeda,\n        fonte: inputData.fonte,\n        timestamp: inputData.timestamp,\n        status: inputData.status\n      }\n    }\n  ];\n} catch (error) {\n  return [\n    {\n      json: {\n        erro: \"Erro ao preparar Firebase: \" + error.message,\n        timestamp: new Date().toISOString(),\n        status: \"erro_firebase_prep\",\n      },\n    },\n  ];\n}\n"
      },
      "id": "990c08ee-6986-4040-bcd2-b763325c3de9",
      "name": "üîë Preparar Firebase4",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -176,
        800
      ]
    },
    {
      "parameters": {
        "authentication": "serviceAccount",
        "operation": "upsert",
        "projectId": "ucs-index-tracker",
        "collection": "cotacoes_do_dia",
        "updateKey": "timestamp",
        "columns": "ativo,data,ultimo,abertura,maxima,minima,volume,variacao_pct,moeda,fonte,timestamp,status"
      },
      "id": "075871f6-4b56-40ca-a927-41760049c1e5",
      "name": "üíæ Salvar no Firebase4",
      "type": "n8n-nodes-base.googleFirebaseCloudFirestore",
      "typeVersion": 1,
      "position": [
        48,
        800
      ],
      "credentials": {
        "googleApi": {
          "id": "7BpBqB87SWkOYvB1",
          "name": "Google Firebase Cloud Firestore account 2"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "try {\n  const firebaseResponse = $input.first().json;\n  const originalData = $('‚öôÔ∏è Processar Dados4').first().json;\n\n  if (firebaseResponse.error) {\n    return [{\n      json: {\n        status: 'erro_firebase',\n        erro: firebaseResponse.error,\n        dados_originais: originalData,\n        timestamp: new Date().toISOString()\n      }\n    }];\n  }\n\n  return [{\n    json: {\n      status: 'sucesso',\n      mensagem: 'Dados salvos no Firebase com sucesso',\n      dados_salvos: originalData,\n      firebase_response: firebaseResponse,\n      timestamp: new Date().toISOString()\n    }\n  }];\n\n} catch (error) {\n  return [{\n    json: {\n      status: 'erro_final',\n      erro: 'Erro na resposta final: ' + error.message,\n      timestamp: new Date().toISOString()\n    }\n  }];\n}"
      },
      "id": "e1476473-6c9a-4a6a-9a4e-40cf642593e1",
      "name": "üìã Resposta Final4",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        640,
        800
      ]
    },
    {
      "parameters": {
        "url": "https://br.investing.com/currencies/usd-brl-historical-data",
        "responseFormat": "string",
        "options": {}
      },
      "id": "28c55c30-9ed7-4a4b-a1cc-cdc81cdc428d",
      "name": "üåê Buscar USD/BRL",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        -768,
        960
      ]
    },
    {
      "parameters": {
        "extractionValues": {
          "values": [
            {
              "key": "preco",
              "cssSelector": "span[data-test='instrument-price-last'], .text-2xl, .instrument-price_instrument-price__*, [data-test*='price'], #last_last"
            }
          ]
        },
        "options": {}
      },
      "id": "a72c5145-398b-48af-a198-a86986309e93",
      "name": "üîç Extrair Pre√ßo5",
      "type": "n8n-nodes-base.htmlExtract",
      "typeVersion": 1,
      "position": [
        -576,
        960
      ]
    },
    {
      "parameters": {
        "jsCode": "// Verifica se veio dados do n√≥ anterior\nif ($input.first() === undefined) {\n  return [{ json: { \n    erro: 'Nenhum dado recebido do n√≥ anterior.', \n    timestamp: new Date().toISOString() \n  } }];\n}\n\n// Pega o texto extra√≠do do HTML\nlet precoExtraido = $input.first().json.preco;\n\n// Verifica se o pre√ßo foi encontrado\nif (precoExtraido === undefined || precoExtraido === null || precoExtraido === '') {\n  return [{ json: { \n    ativo: 'USD/BRL (Investing.com)',\n    erro: 'Pre√ßo n√£o encontrado com nenhum seletor CSS. Estrutura do site pode ter mudado.',\n    timestamp: new Date().toISOString(),\n    status: 'erro'\n  } }];\n}\n\n// Tenta converter o pre√ßo\ntry {\n  // Remove espa√ßos e caracteres especiais, depois converte\n  let precoLimpo = precoExtraido\n    .replace(/\\s/g, '')\n    .replace(/[R$]/g, '')\n    .replace(/\\./g, '')\n    .replace(/,/g, '.');\n  \n  let precoNumerico = parseFloat(precoLimpo);\n  \n  if (isNaN(precoNumerico)) {\n    throw new Error('Convers√£o para n√∫mero falhou: ' + precoExtraido);\n  }\n  \n  return [{ json: {\n    ativo: 'USD/BRL (Investing.com)',\n    preco: precoNumerico,\n    preco_original: precoExtraido,\n    moeda: 'BRL',\n    fonte: 'Investing.com',\n    timestamp: new Date().toISOString(),\n    status: 'sucesso'\n  } }];\n} catch (error) {\n  return [{ json: {\n    ativo: 'USD/BRL (Investing.com)',\n    erro: 'Erro na convers√£o: ' + error.message,\n    preco_original: precoExtraido,\n    timestamp: new Date().toISOString(),\n    status: 'erro'\n  } }];\n}"
      },
      "id": "a781dbf0-9407-4195-bef1-593afcbe89bc",
      "name": "‚öôÔ∏è Processar Dados5",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -368,
        960
      ]
    },
    {
      "parameters": {
        "jsCode": "try {\n  const inputData = $input.first().json;\n\n  if (inputData.erro) {\n    return [{ json: inputData }];\n  }\n\n  // Preparar dados para o Firebase Firestore\n  const currentDate = new Date().toISOString().split('T')[0];\n  const [year, month, day] = currentDate.split('-');\n  const brazilianDate = `${day}/${month}/${year}`;\n  \n  return [\n    {\n      json: {\n        ativo: 'USD/BRL',\n        data: brazilianDate,\n        ultimo: inputData.preco,\n        abertura: inputData.preco,\n        maxima: inputData.preco,\n        minima: inputData.preco,\n        volume: null,\n        variacao_pct: null,\n        moeda: inputData.moeda,\n        fonte: inputData.fonte,\n        timestamp: inputData.timestamp,\n        status: inputData.status\n      }\n    }\n  ];\n} catch (error) {\n  return [\n    {\n      json: {\n        erro: \"Erro ao preparar Firebase: \" + error.message,\n        timestamp: new Date().toISOString(),\n        status: \"erro_firebase_prep\",\n      },\n    },\n  ];\n}\n"
      },
      "id": "26b33310-3b86-4677-bf2c-5def37811f0d",
      "name": "üîë Preparar Firebase5",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -176,
        960
      ]
    },
    {
      "parameters": {
        "authentication": "serviceAccount",
        "operation": "upsert",
        "projectId": "ucs-index-tracker",
        "collection": "cotacoes_do_dia",
        "updateKey": "timestamp",
        "columns": "ativo,data,ultimo,abertura,maxima,minima,volume,variacao_pct,moeda,fonte,timestamp,status"
      },
      "id": "360acfd5-600e-4383-8b12-2dda63f847d6",
      "name": "üíæ Salvar no Firebase5",
      "type": "n8n-nodes-base.googleFirebaseCloudFirestore",
      "typeVersion": 1,
      "position": [
        48,
        960
      ],
      "credentials": {
        "googleApi": {
          "id": "7BpBqB87SWkOYvB1",
          "name": "Google Firebase Cloud Firestore account 2"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "try {\n  const firebaseResponse = $input.first().json;\n  const originalData = $('‚öôÔ∏è Processar Dados5').first().json;\n\n  if (firebaseResponse.error) {\n    return [{\n      json: {\n        status: 'erro_firebase',\n        erro: firebaseResponse.error,\n        dados_originais: originalData,\n        timestamp: new Date().toISOString()\n      }\n    }];\n  }\n\n  return [{\n    json: {\n      status: 'sucesso',\n      mensagem: 'Dados salvos no Firebase com sucesso',\n      dados_salvos: originalData,\n      firebase_response: firebaseResponse,\n      timestamp: new Date().toISOString()\n    }\n  }];\n\n} catch (error) {\n  return [{\n    json: {\n      status: 'erro_final',\n      erro: 'Erro na resposta final: ' + error.message,\n      timestamp: new Date().toISOString()\n    }\n  }];\n}"
      },
      "id": "45aeecd1-f2d0-40ca-9488-d88f9d1c8b0d",
      "name": "üìã Resposta Final5",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        640,
        960
      ]
    },
    {
      "parameters": {
        "url": "https://br.investing.com/currencies/eur-brl-historical-data",
        "responseFormat": "string",
        "options": {}
      },
      "id": "329d143a-2df6-4ac9-b775-7b54ada83b02",
      "name": "üåê Buscar EUR/BRL",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        -768,
        1152
      ]
    },
    {
      "parameters": {
        "extractionValues": {
          "values": [
            {
              "key": "preco",
              "cssSelector": "span[data-test='instrument-price-last'], .text-2xl, .instrument-price_instrument-price__*, [data-test*='price'], #last_last"
            }
          ]
        },
        "options": {}
      },
      "id": "eaa4ad79-5a8f-4bd0-bf98-b309fad86276",
      "name": "üîç Extrair Pre√ßo6",
      "type": "n8n-nodes-base.htmlExtract",
      "typeVersion": 1,
      "position": [
        -576,
        1152
      ]
    },
    {
      "parameters": {
        "jsCode": "// Verifica se veio dados do n√≥ anterior\nif ($input.first() === undefined) {\n  return [{ json: { \n    erro: 'Nenhum dado recebido do n√≥ anterior.', \n    timestamp: new Date().toISOString() \n  } }];\n}\n\n// Pega o texto extra√≠do do HTML\nlet precoExtraido = $input.first().json.preco;\n\n// Verifica se o pre√ßo foi encontrado\nif (precoExtraido === undefined || precoExtraido === null || precoExtraido === '') {\n  return [{ json: { \n    ativo: 'EUR/BRL (Investing.com)',\n    erro: 'Pre√ßo n√£o encontrado com nenhum seletor CSS. Estrutura do site pode ter mudado.',\n    timestamp: new Date().toISOString(),\n    status: 'erro'\n  } }];\n}\n\n// Tenta converter o pre√ßo\ntry {\n  // Remove espa√ßos e caracteres especiais, depois converte\n  let precoLimpo = precoExtraido\n    .replace(/\\s/g, '')\n    .replace(/[R$]/g, '')\n    .replace(/\\./g, '')\n    .replace(/,/g, '.');\n  \n  let precoNumerico = parseFloat(precoLimpo);\n  \n  if (isNaN(precoNumerico)) {\n    throw new Error('Convers√£o para n√∫mero falhou: ' + precoExtraido);\n  }\n  \n  return [{ json: {\n    ativo: 'EUR/BRL (Investing.com)',\n    preco: precoNumerico,\n    preco_original: precoExtraido,\n    moeda: 'BRL',\n    fonte: 'Investing.com',\n    timestamp: new Date().toISOString(),\n    status: 'sucesso'\n  } }];\n} catch (error) {\n  return [{ json: {\n    ativo: 'EUR/BRL (Investing.com)',\n    erro: 'Erro na convers√£o: ' + error.message,\n    preco_original: precoExtraido,\n    timestamp: new Date().toISOString(),\n    status: 'erro'\n  } }];\n}"
      },
      "id": "45f46a6f-4186-4619-a8dd-5ef731c53436",
      "name": "‚öôÔ∏è Processar Dados6",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -368,
        1152
      ]
    },
    {
      "parameters": {
        "jsCode": "try {\n  const inputData = $input.first().json;\n\n  if (inputData.erro) {\n    return [{ json: inputData }];\n  }\n\n  // Preparar dados para o Firebase Firestore\n  const currentDate = new Date().toISOString().split('T')[0];\n  const [year, month, day] = currentDate.split('-');\n  const brazilianDate = `${day}/${month}/${year}`;\n  \n  return [\n    {\n      json: {\n        ativo: 'EUR/BRL',\n        data: brazilianDate,\n        ultimo: inputData.preco,\n        abertura: inputData.preco,\n        maxima: inputData.preco,\n        minima: inputData.preco,\n        volume: null,\n        variacao_pct: null,\n        moeda: inputData.moeda,\n        fonte: inputData.fonte,\n        timestamp: inputData.timestamp,\n        status: inputData.status\n      }\n    }\n  ];\n} catch (error) {\n  return [\n    {\n      json: {\n        erro: \"Erro ao preparar Firebase: \" + error.message,\n        timestamp: new Date().toISOString(),\n        status: \"erro_firebase_prep\",\n      },\n    },\n  ];\n}\n"
      },
      "id": "0acbd667-5e06-43c5-99e1-8a4828230e61",
      "name": "üîë Preparar Firebase6",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -176,
        1152
      ]
    },
    {
      "parameters": {
        "authentication": "serviceAccount",
        "operation": "upsert",
        "projectId": "ucs-index-tracker",
        "collection": "cotacoes_do_dia",
        "updateKey": "timestamp",
        "columns": "ativo,data,ultimo,abertura,maxima,minima,volume,variacao_pct,moeda,fonte,timestamp,status"
      },
      "id": "45ab0908-e648-458f-8c97-875c914130be",
      "name": "üíæ Salvar no Firebase6",
      "type": "n8n-nodes-base.googleFirebaseCloudFirestore",
      "typeVersion": 1,
      "position": [
        48,
        1152
      ],
      "credentials": {
        "googleApi": {
          "id": "7BpBqB87SWkOYvB1",
          "name": "Google Firebase Cloud Firestore account 2"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "try {\n  const firebaseResponse = $input.first().json;\n  const originalData = $('‚öôÔ∏è Processar Dados6').first().json;\n\n  if (firebaseResponse.error) {\n    return [{\n      json: {\n        status: 'erro_firebase',\n        erro: firebaseResponse.error,\n        dados_originais: originalData,\n        timestamp: new Date().toISOString()\n      }\n    }];\n  }\n\n  return [{\n    json: {\n      status: 'sucesso',\n      mensagem: 'Dados salvos no Firebase com sucesso',\n      dados_salvos: originalData,\n      firebase_response: firebaseResponse,\n      timestamp: new Date().toISOString()\n    }\n  }];\n\n} catch (error) {\n  return [{\n    json: {\n      status: 'erro_final',\n      erro: 'Erro na resposta final: ' + error.message,\n      timestamp: new Date().toISOString()\n    }\n  }];\n}"
      },
      "id": "121cea09-88f8-4d6a-b03c-2db174f74a78",
      "name": "üìã Resposta Final6",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        640,
        1152
      ]
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "triggerAtHour": 7
            }
          ]
        }
      },
      "id": "324f5a9c-bce0-4984-8ddd-9c2b30da5998",
      "name": "üïê Agendador (AM)",
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1,
      "position": [
        -1872,
        608
      ]
    }
  ],
  "pinData": {},
  "connections": {
    "üåê Buscar Investing.com": {
      "main": [
        [
          {
            "node": "üîç Extrair Pre√ßo",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üîç Extrair Pre√ßo": {
      "main": [
        [
          {
            "node": "‚öôÔ∏è Processar Dados",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "‚öôÔ∏è Processar Dados": {
      "main": [
        [
          {
            "node": "üîë Preparar Firebase",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üîë Preparar Firebase": {
      "main": [
        [
          {
            "node": "üíæ Salvar no Firebase",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üíæ Salvar no Firebase": {
      "main": [
        [
          {
            "node": "üìã Resposta Final",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üîç Extrair Pre√ßo1": {
      "main": [
        [
          {
            "node": "‚öôÔ∏è Processar Dados1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "‚öôÔ∏è Processar Dados1": {
      "main": [
        [
          {
            "node": "üîë Preparar Firebase1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üîë Preparar Firebase1": {
      "main": [
        [
          {
            "node": "üíæ Salvar no Firebase1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üíæ Salvar no Firebase1": {
      "main": [
        [
          {
            "node": "üìã Resposta Final1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üåê Buscar Live Cattle": {
      "main": [
        [
          {
            "node": "üîç Extrair Pre√ßo1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üåê Buscar Soja US": {
      "main": [
        [
          {
            "node": "üîç Extrair Pre√ßo2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üîç Extrair Pre√ßo2": {
      "main": [
        [
          {
            "node": "‚öôÔ∏è Processar Dados2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "‚öôÔ∏è Processar Dados2": {
      "main": [
        [
          {
            "node": "üîë Preparar Firebase2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üîë Preparar Firebase2": {
      "main": [
        [
          {
            "node": "üíæ Salvar no Firebase2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üíæ Salvar no Firebase2": {
      "main": [
        [
          {
            "node": "üìã Resposta Final2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üåê Buscar Madeira": {
      "main": [
        [
          {
            "node": "üîç Extrair Pre√ßo3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üîç Extrair Pre√ßo3": {
      "main": [
        [
          {
            "node": "‚öôÔ∏è Processar Dados3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "‚öôÔ∏è Processar Dados3": {
      "main": [
        [
          {
            "node": "üîë Preparar Firebase3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üîë Preparar Firebase3": {
      "main": [
        [
          {
            "node": "üíæ Salvar no Firebase3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üíæ Salvar no Firebase3": {
      "main": [
        [
          {
            "node": "üìã Resposta Final3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üåê Buscar Carbono": {
      "main": [
        [
          {
            "node": "üîç Extrair Pre√ßo4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üîç Extrair Pre√ßo4": {
      "main": [
        [
          {
            "node": "‚öôÔ∏è Processar Dados4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "‚öôÔ∏è Processar Dados4": {
      "main": [
        [
          {
            "node": "üîë Preparar Firebase4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üîë Preparar Firebase4": {
      "main": [
        [
          {
            "node": "üíæ Salvar no Firebase4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üíæ Salvar no Firebase4": {
      "main": [
        [
          {
            "node": "üìã Resposta Final4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üåê Buscar USD/BRL": {
      "main": [
        [
          {
            "node": "üîç Extrair Pre√ßo5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üîç Extrair Pre√ßo5": {
      "main": [
        [
          {
            "node": "‚öôÔ∏è Processar Dados5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "‚öôÔ∏è Processar Dados5": {
      "main": [
        [
          {
            "node": "üîë Preparar Firebase5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üîë Preparar Firebase5": {
      "main": [
        [
          {
            "node": "üíæ Salvar no Firebase5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üíæ Salvar no Firebase5": {
      "main": [
        [
          {
            "node": "üìã Resposta Final5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üåê Buscar EUR/BRL": {
      "main": [
        [
          {
            "node": "üîç Extrair Pre√ßo6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üîç Extrair Pre√ßo6": {
      "main": [
        [
          {
            "node": "‚öôÔ∏è Processar Dados6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "‚öôÔ∏è Processar Dados6": {
      "main": [
        [
          {
            "node": "üîë Preparar Firebase6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üîë Preparar Firebase6": {
      "main": [
        [
          {
            "node": "üíæ Salvar no Firebase6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üíæ Salvar no Firebase6": {
      "main": [
        [
          {
            "node": "üìã Resposta Final6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üïê Agendador (AM)": {
      "main": [
        [
          {
            "node": "üåê Buscar Investing.com",
            "type": "main",
            "index": 0
          },
          {
            "node": "üåê Buscar Live Cattle",
            "type": "main",
            "index": 0
          },
          {
            "node": "üåê Buscar Soja US",
            "type": "main",
            "index": 0
          },
          {
            "node": "üåê Buscar Madeira",
            "type": "main",
            "index": 0
          },
          {
            "node": "üåê Buscar Carbono",
            "type": "main",
            "index": 0
          },
          {
            "node": "üåê Buscar USD/BRL",
            "type": "main",
            "index": 0
          },
          {
            "node": "üåê Buscar EUR/BRL",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "8c757ad7-79a2-435e-af33-60aa8f011f88",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "1ebaf80b27eab9aaac3713af78828a8bba01ec37aec94c0c3317f7f17ad7a4c5"
  },
  "id": "Af2j8ZR4SoO5yiPu",
  "tags": [
    {
      "createdAt": "2025-09-06T15:07:39.573Z",
      "updatedAt": "2025-09-06T15:07:39.573Z",
      "id": "16hgFuMfmrNhcQud",
      "name": "investing-com"
    },
    {
      "name": "firebase-realtime",
      "id": "9KRtMxSgSEkndpCb",
      "createdAt": "2025-09-07T02:04:09.631Z",
      "updatedAt": "2025-09-07T02:04:09.631Z"
    },
    {
      "createdAt": "2025-09-06T14:50:30.705Z",
      "updatedAt": "2025-09-06T14:50:30.705Z",
      "id": "Ahei5yXa9cpKpSNf",
      "name": "excel-export"
    },
    {
      "name": "unificado",
      "id": "OXk8DeYTCShLLxDf",
      "createdAt": "2025-09-07T01:17:07.696Z",
      "updatedAt": "2025-09-07T01:17:07.696Z"
    },
    {
      "name": "boi-gordo-corrigido",
      "id": "P3JnoHd6FNGKck0w",
      "createdAt": "2025-09-07T02:04:09.579Z",
      "updatedAt": "2025-09-07T02:04:09.579Z"
    },
    {
      "createdAt": "2025-09-06T15:07:40.720Z",
      "updatedAt": "2025-09-06T15:07:40.720Z",
      "id": "Q3FU87DozyBqz9sI",
      "name": "web-scraping"
    },
    {
      "name": "dashboard",
      "id": "cjKiXmUsAlzaR3NH",
      "createdAt": "2025-09-07T01:17:07.551Z",
      "updatedAt": "2025-09-07T01:17:07.551Z"
    },
    {
      "createdAt": "2025-09-06T14:50:30.642Z",
      "updatedAt": "2025-09-06T14:50:30.642Z",
      "id": "fdklNKh0ZAA9lEpn",
      "name": "commodities"
    },
    {
      "name": "local-storage",
      "id": "jEyhGCVAVKMy8OA7",
      "createdAt": "2025-09-07T02:11:03.199Z",
      "updatedAt": "2025-09-07T02:11:03.199Z"
    },
    {
      "name": "cotacoes",
      "id": "uMTQyjMdD94gKQ9k",
      "createdAt": "2025-09-07T01:17:07.711Z",
      "updatedAt": "2025-09-07T01:17:07.711Z"
    },
    {
      "createdAt": "2025-09-06T14:50:30.729Z",
      "updatedAt": "2025-09-06T14:50:30.729Z",
      "id": "y9sP9TtiK2xLomA8",
      "name": "alpha-vantage"
    }
  ]
}