{
  "name": "My workflow",
  "nodes": [
    {
      "parameters": {},
      "id": "5a88d5aa-484a-497a-bf0b-338bc5f5df4b",
      "name": "üïê Agendador (9h e 15h)",
      "type": "n8n-nodes-base.cron",
      "typeVersion": 1,
      "position": [
        -2096,
        -288
      ]
    },
    {
      "parameters": {
        "url": "https://br.investing.com/commodities/us-corn-historical-data?cid=964522",
        "responseFormat": "string",
        "options": {}
      },
      "id": "3daa70f6-8b1d-4991-be17-83b9516bccac",
      "name": "üåê Buscar Milho",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        -1248,
        -800
      ]
    },
    {
      "parameters": {
        "extractionValues": {
          "values": [
            {
              "key": "preco",
              "cssSelector": "span[data-test='instrument-price-last'], .text-2xl, .instrument-price_instrument-price__*, [data-test*='price'], #last_last"
            }
          ]
        },
        "options": {}
      },
      "id": "5c4ddd0f-23ab-4c6c-9d6a-99adce8e0a06",
      "name": "üîç Extrair Pre√ßo Milho",
      "type": "n8n-nodes-base.htmlExtract",
      "typeVersion": 1,
      "position": [
        -1056,
        -800
      ]
    },
    {
      "parameters": {
        "jsCode": "// Processamento otimizado para Milho\nif ($input.first() === undefined) {\n  return [{ json: { \n    erro: 'Nenhum dado recebido do n√≥ anterior.', \n    timestamp: new Date().toISOString() \n  } }];\n}\n\nlet precoExtraido = $input.first().json.preco;\n\nif (precoExtraido === undefined || precoExtraido === null || precoExtraido === '') {\n  return [{ json: { \n    ativo: 'milho',\n    erro: 'Pre√ßo n√£o encontrado',\n    timestamp: new Date().toISOString(),\n    status: 'erro'\n  } }];\n}\n\ntry {\n  let precoLimpo = precoExtraido\n    .replace(/\\s/g, '')\n    .replace(/[R$]/g, '')\n    .replace(/\\./g, '')\n    .replace(/,/g, '.');\n  \n  let precoNumerico = parseFloat(precoLimpo);\n  \n  if (isNaN(precoNumerico)) {\n    throw new Error('Convers√£o para n√∫mero falhou: ' + precoExtraido);\n  }\n  \n  const currentDate = new Date().toISOString().split('T')[0];\n  const [year, month, day] = currentDate.split('-');\n  const brazilianDate = `${day}/${month}/${year}`;\n  \n  return [{ json: {\n    ativo: 'milho',\n    data: brazilianDate,\n    ultimo: precoNumerico,\n    abertura: precoNumerico,\n    maxima: precoNumerico,\n    minima: precoNumerico,\n    volume: null,\n    variacao_pct: null,\n    moeda: 'BRL',\n    fonte: 'Investing.com',\n    timestamp: new Date().toISOString(),\n    status: 'sucesso'\n  } }];\n} catch (error) {\n  return [{ json: {\n    ativo: 'milho',\n    erro: 'Erro na convers√£o: ' + error.message,\n    timestamp: new Date().toISOString(),\n    status: 'erro'\n  } }];\n}"
      },
      "id": "e2882556-7d61-46cd-88b2-95a3a4a12c7d",
      "name": "‚öôÔ∏è Processar Milho",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -848,
        -800
      ]
    },
    {
      "parameters": {
        "authentication": "serviceAccount",
        "operation": "upsert",
        "projectId": "ucs-index-tracker",
        "collection": "cotacoes_do_dia",
        "updateKey": "timestamp",
        "columns": "ativo,data,ultimo,abertura,maxima,minima,volume,variacao_pct,moeda,fonte,timestamp,status"
      },
      "id": "492fb0ae-9af1-491b-b060-a6efb4191a51",
      "name": "üíæ Salvar Milho",
      "type": "n8n-nodes-base.googleFirebaseCloudFirestore",
      "typeVersion": 1,
      "position": [
        -656,
        -800
      ],
      "credentials": {
        "googleApi": {
          "id": "BjVbz7Qc5N5XpI6B",
          "name": "Google Firebase Cloud Firestore account"
        }
      }
    },
    {
      "parameters": {
        "url": "https://br.investing.com/commodities/live-cattle-historical-data?cid=964528",
        "responseFormat": "string",
        "options": {}
      },
      "id": "5e2e6c42-f90a-43aa-a480-89301151f874",
      "name": "üåê Buscar Boi Gordo",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        -1248,
        -640
      ]
    },
    {
      "parameters": {
        "extractionValues": {
          "values": [
            {
              "key": "preco",
              "cssSelector": "span[data-test='instrument-price-last'], .text-2xl, .instrument-price_instrument-price__*, [data-test*='price'], #last_last"
            }
          ]
        },
        "options": {}
      },
      "id": "cbcb688c-ba9e-4b4f-b0a1-a879b4cbccb4",
      "name": "üîç Extrair Pre√ßo Boi",
      "type": "n8n-nodes-base.htmlExtract",
      "typeVersion": 1,
      "position": [
        -1056,
        -640
      ]
    },
    {
      "parameters": {
        "authentication": "serviceAccount",
        "operation": "upsert",
        "projectId": "ucs-index-tracker",
        "collection": "cotacoes_do_dia",
        "updateKey": "timestamp",
        "columns": "ativo,data,ultimo,abertura,maxima,minima,volume,variacao_pct,moeda,fonte,timestamp,status"
      },
      "id": "1087f4f1-203c-4e03-a48f-a8f936457657",
      "name": "üíæ Salvar Boi",
      "type": "n8n-nodes-base.googleFirebaseCloudFirestore",
      "typeVersion": 1,
      "position": [
        -656,
        -640
      ],
      "credentials": {
        "googleApi": {
          "id": "BjVbz7Qc5N5XpI6B",
          "name": "Google Firebase Cloud Firestore account"
        }
      }
    },
    {
      "parameters": {
        "url": "https://br.investing.com/commodities/us-soybeans-historical-data?cid=964523",
        "responseFormat": "string",
        "options": {}
      },
      "id": "bcef4ff3-3e2f-40f8-9c92-13fa11891837",
      "name": "üåê Buscar Soja",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        -1248,
        -480
      ]
    },
    {
      "parameters": {
        "extractionValues": {
          "values": [
            {
              "key": "preco",
              "cssSelector": "span[data-test='instrument-price-last'], .text-2xl, .instrument-price_instrument-price__*, [data-test*='price'], #last_last"
            }
          ]
        },
        "options": {}
      },
      "id": "fc8112dc-6323-4876-a9f0-999c275775b3",
      "name": "üîç Extrair Pre√ßo Soja",
      "type": "n8n-nodes-base.htmlExtract",
      "typeVersion": 1,
      "position": [
        -1056,
        -480
      ]
    },
    {
      "parameters": {
        "jsCode": "// Processamento otimizado para Soja\nif ($input.first() === undefined) {\n  return [{ json: { \n    erro: 'Nenhum dado recebido do n√≥ anterior.', \n    timestamp: new Date().toISOString() \n  } }];\n}\n\nlet precoExtraido = $input.first().json.preco;\n\nif (precoExtraido === undefined || precoExtraido === null || precoExtraido === '') {\n  return [{ json: { \n    ativo: 'soja',\n    erro: 'Pre√ßo n√£o encontrado',\n    timestamp: new Date().toISOString(),\n    status: 'erro'\n  } }];\n}\n\ntry {\n  let precoLimpo = precoExtraido\n    .replace(/\\s/g, '')\n    .replace(/[$]/g, '')\n    .replace(/\\./g, '')\n    .replace(/,/g, '.');\n  \n  let precoNumerico = parseFloat(precoLimpo);\n  \n  if (isNaN(precoNumerico)) {\n    throw new Error('Convers√£o para n√∫mero falhou: ' + precoExtraido);\n  }\n  \n  const currentDate = new Date().toISOString().split('T')[0];\n  const [year, month, day] = currentDate.split('-');\n  const brazilianDate = `${day}/${month}/${year}`;\n  \n  return [{ json: {\n    ativo: 'soja',\n    data: brazilianDate,\n    ultimo: precoNumerico,\n    abertura: precoNumerico,\n    maxima: precoNumerico,\n    minima: precoNumerico,\n    volume: null,\n    variacao_pct: null,\n    moeda: 'USD',\n    fonte: 'Investing.com',\n    timestamp: new Date().toISOString(),\n    status: 'sucesso'\n  } }];\n} catch (error) {\n  return [{ json: {\n    ativo: 'soja',\n    erro: 'Erro na convers√£o: ' + error.message,\n    timestamp: new Date().toISOString(),\n    status: 'erro'\n  } }];\n}"
      },
      "id": "735468fa-a910-4359-af83-07fc06037eaf",
      "name": "‚öôÔ∏è Processar Soja",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -848,
        -480
      ]
    },
    {
      "parameters": {
        "authentication": "serviceAccount",
        "operation": "upsert",
        "projectId": "ucs-index-tracker",
        "collection": "cotacoes_do_dia",
        "updateKey": "timestamp",
        "columns": "ativo,data,ultimo,abertura,maxima,minima,volume,variacao_pct,moeda,fonte,timestamp,status"
      },
      "id": "28bb05dc-c3d4-4670-b11f-a0384e4136df",
      "name": "üíæ Salvar Soja",
      "type": "n8n-nodes-base.googleFirebaseCloudFirestore",
      "typeVersion": 1,
      "position": [
        -656,
        -480
      ],
      "credentials": {
        "googleApi": {
          "id": "BjVbz7Qc5N5XpI6B",
          "name": "Google Firebase Cloud Firestore account"
        }
      }
    },
    {
      "parameters": {
        "url": "https://br.investing.com/commodities/lumber-historical-data",
        "responseFormat": "string",
        "options": {}
      },
      "id": "7f7466d8-9cc9-40d5-8892-343498923543",
      "name": "üåê Buscar Madeira",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        -1248,
        -320
      ]
    },
    {
      "parameters": {
        "extractionValues": {
          "values": [
            {
              "key": "preco",
              "cssSelector": "span[data-test='instrument-price-last'], .text-2xl, .instrument-price_instrument-price__*, [data-test*='price'], #last_last"
            }
          ]
        },
        "options": {}
      },
      "id": "d6e8c8bc-fd39-4ce4-974a-d4434f374e95",
      "name": "üîç Extrair Pre√ßo Madeira",
      "type": "n8n-nodes-base.htmlExtract",
      "typeVersion": 1,
      "position": [
        -1056,
        -320
      ]
    },
    {
      "parameters": {
        "jsCode": "// Processamento otimizado para Madeira\nif ($input.first() === undefined) {\n  return [{ json: { \n    erro: 'Nenhum dado recebido do n√≥ anterior.', \n    timestamp: new Date().toISOString() \n  } }];\n}\n\nlet precoExtraido = $input.first().json.preco;\n\nif (precoExtraido === undefined || precoExtraido === null || precoExtraido === '') {\n  return [{ json: { \n    ativo: 'madeira',\n    erro: 'Pre√ßo n√£o encontrado',\n    timestamp: new Date().toISOString(),\n    status: 'erro'\n  } }];\n}\n\ntry {\n  let precoLimpo = precoExtraido\n    .replace(/\\s/g, '')\n    .replace(/[$]/g, '')\n    .replace(/\\./g, '')\n    .replace(/,/g, '.');\n  \n  let precoNumerico = parseFloat(precoLimpo);\n  \n  if (isNaN(precoNumerico)) {\n    throw new Error('Convers√£o para n√∫mero falhou: ' + precoExtraido);\n  }\n  \n  const currentDate = new Date().toISOString().split('T')[0];\n  const [year, month, day] = currentDate.split('-');\n  const brazilianDate = `${day}/${month}/${year}`;\n  \n  return [{ json: {\n    ativo: 'madeira',\n    data: brazilianDate,\n    ultimo: precoNumerico,\n    abertura: precoNumerico,\n    maxima: precoNumerico,\n    minima: precoNumerico,\n    volume: null,\n    variacao_pct: null,\n    moeda: 'USD',\n    fonte: 'Investing.com',\n    timestamp: new Date().toISOString(),\n    status: 'sucesso'\n  } }];\n} catch (error) {\n  return [{ json: {\n    ativo: 'madeira',\n    erro: 'Erro na convers√£o: ' + error.message,\n    timestamp: new Date().toISOString(),\n    status: 'erro'\n  } }];\n}"
      },
      "id": "6cf11cf0-49f4-4b29-8b80-2c9b955af1ba",
      "name": "‚öôÔ∏è Processar Madeira",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -848,
        -320
      ]
    },
    {
      "parameters": {
        "authentication": "serviceAccount",
        "operation": "upsert",
        "projectId": "ucs-index-tracker",
        "collection": "cotacoes_do_dia",
        "updateKey": "timestamp",
        "columns": "ativo,data,ultimo,abertura,maxima,minima,volume,variacao_pct,moeda,fonte,timestamp,status"
      },
      "id": "c9980375-e82a-4168-bd48-f5b5a7515f9b",
      "name": "üíæ Salvar Madeira",
      "type": "n8n-nodes-base.googleFirebaseCloudFirestore",
      "typeVersion": 1,
      "position": [
        -656,
        -320
      ],
      "credentials": {
        "googleApi": {
          "id": "BjVbz7Qc5N5XpI6B",
          "name": "Google Firebase Cloud Firestore account"
        }
      }
    },
    {
      "parameters": {
        "url": "https://br.investing.com/commodities/carbon-emissions-historical-data",
        "responseFormat": "string",
        "options": {}
      },
      "id": "33ef275a-ef25-4884-94d9-4c4cd5f28016",
      "name": "üåê Buscar Carbono",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        -1248,
        -160
      ]
    },
    {
      "parameters": {
        "extractionValues": {
          "values": [
            {
              "key": "preco",
              "cssSelector": "span[data-test='instrument-price-last'], .text-2xl, .instrument-price_instrument-price__*, [data-test*='price'], #last_last"
            }
          ]
        },
        "options": {}
      },
      "id": "2cd31802-bbfa-42bd-b58a-9b78e23889eb",
      "name": "üîç Extrair Pre√ßo Carbono",
      "type": "n8n-nodes-base.htmlExtract",
      "typeVersion": 1,
      "position": [
        -1056,
        -160
      ]
    },
    {
      "parameters": {
        "jsCode": "// Processamento otimizado para Carbono\nif ($input.first() === undefined) {\n  return [{ json: { \n    erro: 'Nenhum dado recebido do n√≥ anterior.', \n    timestamp: new Date().toISOString() \n  } }];\n}\n\nlet precoExtraido = $input.first().json.preco;\n\nif (precoExtraido === undefined || precoExtraido === null || precoExtraido === '') {\n  return [{ json: { \n    ativo: 'carbono',\n    erro: 'Pre√ßo n√£o encontrado',\n    timestamp: new Date().toISOString(),\n    status: 'erro'\n  } }];\n}\n\ntry {\n  let precoLimpo = precoExtraido\n    .replace(/\\s/g, '')\n    .replace(/[‚Ç¨]/g, '')\n    .replace(/\\./g, '')\n    .replace(/,/g, '.');\n  \n  let precoNumerico = parseFloat(precoLimpo);\n  \n  if (isNaN(precoNumerico)) {\n    throw new Error('Convers√£o para n√∫mero falhou: ' + precoExtraido);\n  }\n  \n  const currentDate = new Date().toISOString().split('T')[0];\n  const [year, month, day] = currentDate.split('-');\n  const brazilianDate = `${day}/${month}/${year}`;\n  \n  return [{ json: {\n    ativo: 'carbono',\n    data: brazilianDate,\n    ultimo: precoNumerico,\n    abertura: precoNumerico,\n    maxima: precoNumerico,\n    minima: precoNumerico,\n    volume: null,\n    variacao_pct: null,\n    moeda: 'EUR',\n    fonte: 'Investing.com',\n    timestamp: new Date().toISOString(),\n    status: 'sucesso'\n  } }];\n} catch (error) {\n  return [{ json: {\n    ativo: 'carbono',\n    erro: 'Erro na convers√£o: ' + error.message,\n    timestamp: new Date().toISOString(),\n    status: 'erro'\n  } }];\n}"
      },
      "id": "c3c81265-908d-471b-adfa-b41a8347931d",
      "name": "‚öôÔ∏è Processar Carbono",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -848,
        -160
      ]
    },
    {
      "parameters": {
        "authentication": "serviceAccount",
        "operation": "upsert",
        "projectId": "ucs-index-tracker",
        "collection": "cotacoes_do_dia",
        "updateKey": "timestamp",
        "columns": "ativo,data,ultimo,abertura,maxima,minima,volume,variacao_pct,moeda,fonte,timestamp,status"
      },
      "id": "18be0fc5-1c1d-450b-b3c4-274d27d5b54c",
      "name": "üíæ Salvar Carbono",
      "type": "n8n-nodes-base.googleFirebaseCloudFirestore",
      "typeVersion": 1,
      "position": [
        -656,
        -160
      ],
      "credentials": {
        "googleApi": {
          "id": "BjVbz7Qc5N5XpI6B",
          "name": "Google Firebase Cloud Firestore account"
        }
      }
    },
    {
      "parameters": {
        "url": "https://br.investing.com/currencies/usd-brl-historical-data",
        "responseFormat": "string",
        "options": {}
      },
      "id": "85753bc6-fbb0-4805-803f-2a0803198047",
      "name": "üåê Buscar USD/BRL",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        -1248,
        16
      ]
    },
    {
      "parameters": {
        "extractionValues": {
          "values": [
            {
              "key": "preco",
              "cssSelector": "span[data-test='instrument-price-last'], .text-2xl, .instrument-price_instrument-price__*, [data-test*='price'], #last_last"
            }
          ]
        },
        "options": {}
      },
      "id": "7c4de851-bb37-43a6-afc5-5cc703f85f08",
      "name": "üîç Extrair Pre√ßo USD/BRL",
      "type": "n8n-nodes-base.htmlExtract",
      "typeVersion": 1,
      "position": [
        -1056,
        16
      ]
    },
    {
      "parameters": {
        "jsCode": "// Processamento otimizado para USD/BRL\nif ($input.first() === undefined) {\n  return [{ json: { \n    erro: 'Nenhum dado recebido do n√≥ anterior.', \n    timestamp: new Date().toISOString() \n  } }];\n}\n\nlet precoExtraido = $input.first().json.preco;\n\nif (precoExtraido === undefined || precoExtraido === null || precoExtraido === '') {\n  return [{ json: { \n    ativo: 'usd_brl',\n    erro: 'Pre√ßo n√£o encontrado',\n    timestamp: new Date().toISOString(),\n    status: 'erro'\n  } }];\n}\n\ntry {\n  let precoLimpo = precoExtraido\n    .replace(/\\s/g, '')\n    .replace(/[R$]/g, '')\n    .replace(/\\./g, '')\n    .replace(/,/g, '.');\n  \n  let precoNumerico = parseFloat(precoLimpo);\n  \n  if (isNaN(precoNumerico)) {\n    throw new Error('Convers√£o para n√∫mero falhou: ' + precoExtraido);\n  }\n  \n  const currentDate = new Date().toISOString().split('T')[0];\n  const [year, month, day] = currentDate.split('-');\n  const brazilianDate = `${day}/${month}/${year}`;\n  \n  return [{ json: {\n    ativo: 'usd_brl',\n    data: brazilianDate,\n    ultimo: precoNumerico,\n    abertura: precoNumerico,\n    maxima: precoNumerico,\n    minima: precoNumerico,\n    volume: null,\n    variacao_pct: null,\n    moeda: 'BRL',\n    fonte: 'Investing.com',\n    timestamp: new Date().toISOString(),\n    status: 'sucesso'\n  } }];\n} catch (error) {\n  return [{ json: {\n    ativo: 'usd_brl',\n    erro: 'Erro na convers√£o: ' + error.message,\n    timestamp: new Date().toISOString(),\n    status: 'erro'\n  } }];\n}"
      },
      "id": "c2aaea24-59dd-462d-a015-56fe70466fd1",
      "name": "‚öôÔ∏è Processar USD/BRL",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -848,
        16
      ]
    },
    {
      "parameters": {
        "authentication": "serviceAccount",
        "operation": "upsert",
        "projectId": "ucs-index-tracker",
        "collection": "cotacoes_do_dia",
        "updateKey": "timestamp",
        "columns": "ativo,data,ultimo,abertura,maxima,minima,volume,variacao_pct,moeda,fonte,timestamp,status"
      },
      "id": "76fe8d75-2b9f-4023-85e3-2c43fff685da",
      "name": "üíæ Salvar USD/BRL",
      "type": "n8n-nodes-base.googleFirebaseCloudFirestore",
      "typeVersion": 1,
      "position": [
        -656,
        16
      ],
      "credentials": {
        "googleApi": {
          "id": "BjVbz7Qc5N5XpI6B",
          "name": "Google Firebase Cloud Firestore account"
        }
      }
    },
    {
      "parameters": {
        "url": "https://br.investing.com/currencies/eur-brl-historical-data",
        "responseFormat": "string",
        "options": {}
      },
      "id": "0dd52690-30cb-4b68-bc9f-986150afc3e9",
      "name": "üåê Buscar EUR/BRL",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        -1248,
        176
      ]
    },
    {
      "parameters": {
        "extractionValues": {
          "values": [
            {
              "key": "preco",
              "cssSelector": "span[data-test='instrument-price-last'], .text-2xl, .instrument-price_instrument-price__*, [data-test*='price'], #last_last"
            }
          ]
        },
        "options": {}
      },
      "id": "f8109728-614b-49c1-b8fc-ca1eee5cc390",
      "name": "üîç Extrair Pre√ßo EUR/BRL",
      "type": "n8n-nodes-base.htmlExtract",
      "typeVersion": 1,
      "position": [
        -1056,
        176
      ]
    },
    {
      "parameters": {
        "jsCode": "// Processamento otimizado para EUR/BRL\nif ($input.first() === undefined) {\n  return [{ json: { \n    erro: 'Nenhum dado recebido do n√≥ anterior.', \n    timestamp: new Date().toISOString() \n  } }];\n}\n\nlet precoExtraido = $input.first().json.preco;\n\nif (precoExtraido === undefined || precoExtraido === null || precoExtraido === '') {\n  return [{ json: { \n    ativo: 'eur_brl',\n    erro: 'Pre√ßo n√£o encontrado',\n    timestamp: new Date().toISOString(),\n    status: 'erro'\n  } }];\n}\n\ntry {\n  let precoLimpo = precoExtraido\n    .replace(/\\s/g, '')\n    .replace(/[R$]/g, '')\n    .replace(/\\./g, '')\n    .replace(/,/g, '.');\n  \n  let precoNumerico = parseFloat(precoLimpo);\n  \n  if (isNaN(precoNumerico)) {\n    throw new Error('Convers√£o para n√∫mero falhou: ' + precoExtraido);\n  }\n  \n  const currentDate = new Date().toISOString().split('T')[0];\n  const [year, month, day] = currentDate.split('-');\n  const brazilianDate = `${day}/${month}/${year}`;\n  \n  return [{ json: {\n    ativo: 'eur_brl',\n    data: brazilianDate,\n    ultimo: precoNumerico,\n    abertura: precoNumerico,\n    maxima: precoNumerico,\n    minima: precoNumerico,\n    volume: null,\n    variacao_pct: null,\n    moeda: 'BRL',\n    fonte: 'Investing.com',\n    timestamp: new Date().toISOString(),\n    status: 'sucesso'\n  } }];\n} catch (error) {\n  return [{ json: {\n    ativo: 'eur_brl',\n    erro: 'Erro na convers√£o: ' + error.message,\n    timestamp: new Date().toISOString(),\n    status: 'erro'\n  } }];\n}"
      },
      "id": "0c1804c7-61b4-4835-b720-858146ed5518",
      "name": "‚öôÔ∏è Processar EUR/BRL",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -848,
        176
      ]
    },
    {
      "parameters": {
        "authentication": "serviceAccount",
        "operation": "upsert",
        "projectId": "ucs-index-tracker",
        "collection": "cotacoes_do_dia",
        "updateKey": "timestamp",
        "columns": "ativo,data,ultimo,abertura,maxima,minima,volume,variacao_pct,moeda,fonte,timestamp,status"
      },
      "id": "84940adf-8d91-408c-9881-7a528f713c90",
      "name": "üíæ Salvar EUR/BRL",
      "type": "n8n-nodes-base.googleFirebaseCloudFirestore",
      "typeVersion": 1,
      "position": [
        -656,
        176
      ],
      "credentials": {
        "googleApi": {
          "id": "BjVbz7Qc5N5XpI6B",
          "name": "Google Firebase Cloud Firestore account"
        }
      }
    },
    {
      "parameters": {
        "mode": "waitForAll",
        "options": {}
      },
      "id": "3f83175b-1804-4fdc-a377-5fa32cafd545",
      "name": "üîÑ Consolidar Resultados",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2.1,
      "position": [
        224,
        -320
      ]
    },
    {
      "parameters": {
        "jsCode": "// Processamento consolidado de todos os resultados\nconst resultados = [];\n\n// Coletar dados de todos os 7 n√≥s de salvamento\nconst milhoData = $('üíæ Salvar Milho').all();\nconst boiData = $('üíæ Salvar Boi').all();\nconst sojaData = $('üíæ Salvar Soja').all();\nconst madeiraData = $('üíæ Salvar Madeira').all();\nconst carbonoData = $('üíæ Salvar Carbono').all();\nconst usdData = $('üíæ Salvar USD/BRL').all();\nconst eurData = $('üíæ Salvar EUR/BRL').all();\n\n// Adicionar todos os resultados\nif (milhoData && milhoData.length > 0) {\n  resultados.push(...milhoData.map(item => item.json));\n}\n\nif (boiData && boiData.length > 0) {\n  resultados.push(...boiData.map(item => item.json));\n}\n\nif (sojaData && sojaData.length > 0) {\n  resultados.push(...sojaData.map(item => item.json));\n}\n\nif (madeiraData && madeiraData.length > 0) {\n  resultados.push(...madeiraData.map(item => item.json));\n}\n\nif (carbonoData && carbonoData.length > 0) {\n  resultados.push(...carbonoData.map(item => item.json));\n}\n\nif (usdData && usdData.length > 0) {\n  resultados.push(...usdData.map(item => item.json));\n}\n\nif (eurData && eurData.length > 0) {\n  resultados.push(...eurData.map(item => item.json));\n}\n\n// Retornar dados consolidados\nreturn [{\n  json: {\n    total_ativos: resultados.length,\n    ativos_processados: resultados.map(r => r.ativo).filter(Boolean),\n    timestamp_consolidacao: new Date().toISOString(),\n    dados: resultados\n  }\n}];"
      },
      "id": "97b4019d-3ce3-471d-914f-6a788157962b",
      "name": "‚öôÔ∏è Processar Consolidado",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        512,
        -320
      ]
    },
    {
      "parameters": {
        "authentication": "genericCredentialType",
        "url": "http://localhost:9002/api/webhook/reorganize",
        "options": {
          "timeout": 30000
        }
      },
      "id": "770e3cbe-3d80-4230-8b5b-9cde8e96cec3",
      "name": "üöÄ Trigger Reorganiza√ß√£o",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        736,
        -320
      ]
    },
    {
      "parameters": {
        "jsCode": "// Processa resposta da reorganiza√ß√£o\nconst webhookResponse = $input.first().json;\n\nreturn [{\n  json: {\n    status: 'workflow_completed',\n    reorganization_triggered: webhookResponse.success || false,\n    message: webhookResponse.message || 'Reorganiza√ß√£o autom√°tica executada',\n    timestamp: new Date().toISOString()\n  }\n}];"
      },
      "id": "8f0aa71f-8aba-4eff-b500-302de717e9c4",
      "name": "‚úÖ Resposta Final",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        960,
        -320
      ]
    },
    {
      "parameters": {
        "jsCode": "// Processamento otimizado para Boi Gordo\nif ($input.first() === undefined) {\n  return [{ json: { \n    erro: 'Nenhum dado recebido do n√≥ anterior.', \n    timestamp: new Date().toISOString() \n  } }];\n}\n\nlet precoExtraido = $input.first().json.preco;\n\nif (precoExtraido === undefined || precoExtraido === null || precoExtraido === '') {\n  return [{ json: { \n    ativo: 'boi_gordo',\n    erro: 'Pre√ßo n√£o encontrado',\n    timestamp: new Date().toISOString(),\n    status: 'erro'\n  } }];\n}\n\ntry {\n  let precoLimpo = precoExtraido\n    .replace(/\\s/g, '')\n    .replace(/[R$]/g, '')\n    .replace(/\\./g, '')\n    .replace(/,/g, '.');\n  \n  let precoNumerico = parseFloat(precoLimpo);\n  \n  if (isNaN(precoNumerico)) {\n    throw new Error('Convers√£o para n√∫mero falhou: ' + precoExtraido);\n  }\n  \n  const currentDate = new Date().toISOString().split('T')[0];\n  const [year, month, day] = currentDate.split('-');\n  const brazilianDate = `${day}/${month}/${year}`;\n  \n  return [{ json: {\n    ativo: 'boi_gordo',\n    data: brazilianDate,\n    ultimo: precoNumerico,\n    abertura: precoNumerico,\n    maxima: precoNumerico,\n    minima: precoNumerico,\n    volume: null,\n    variacao_pct: null,\n    moeda: 'BRL',\n    fonte: 'Investing.com',\n    timestamp: new Date().toISOString(),\n    status: 'sucesso'\n  } }];\n} catch (error) {\n  return [{ json: {\n    ativo: 'boi_gordo',\n    erro: 'Erro na convers√£o: ' + error.message,\n    timestamp: new Date().toISOString(),\n    status: 'erro'\n  } }];\n}"
      },
      "id": "0df61708-d3fa-4f30-a04c-5879043bf317",
      "name": "‚öôÔ∏è Processar Boi",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -848,
        -640
      ]
    }
  ],
  "pinData": {},
  "connections": {
    "üïê Agendador (9h e 15h)": {
      "main": [
        [
          {
            "node": "üåê Buscar Milho",
            "type": "main",
            "index": 0
          },
          {
            "node": "üåê Buscar Boi Gordo",
            "type": "main",
            "index": 0
          },
          {
            "node": "üåê Buscar Soja",
            "type": "main",
            "index": 0
          },
          {
            "node": "üåê Buscar Madeira",
            "type": "main",
            "index": 0
          },
          {
            "node": "üåê Buscar Carbono",
            "type": "main",
            "index": 0
          },
          {
            "node": "üåê Buscar USD/BRL",
            "type": "main",
            "index": 0
          },
          {
            "node": "üåê Buscar EUR/BRL",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üåê Buscar Milho": {
      "main": [
        [
          {
            "node": "üîç Extrair Pre√ßo Milho",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üîç Extrair Pre√ßo Milho": {
      "main": [
        [
          {
            "node": "‚öôÔ∏è Processar Milho",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "‚öôÔ∏è Processar Milho": {
      "main": [
        [
          {
            "node": "üíæ Salvar Milho",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üíæ Salvar Milho": {
      "main": [
        [
          {
            "node": "üîÑ Consolidar Resultados",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üåê Buscar Boi Gordo": {
      "main": [
        [
          {
            "node": "üîç Extrair Pre√ßo Boi",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üîç Extrair Pre√ßo Boi": {
      "main": [
        [
          {
            "node": "‚öôÔ∏è Processar Boi",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üíæ Salvar Boi": {
      "main": [
        [
          {
            "node": "üîÑ Consolidar Resultados",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "üåê Buscar Soja": {
      "main": [
        [
          {
            "node": "üîç Extrair Pre√ßo Soja",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üîç Extrair Pre√ßo Soja": {
      "main": [
        [
          {
            "node": "‚öôÔ∏è Processar Soja",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "‚öôÔ∏è Processar Soja": {
      "main": [
        [
          {
            "node": "üíæ Salvar Soja",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üîÑ Consolidar Resultados": {
      "main": [
        [
          {
            "node": "‚öôÔ∏è Processar Consolidado",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "‚öôÔ∏è Processar Consolidado": {
      "main": [
        [
          {
            "node": "üöÄ Trigger Reorganiza√ß√£o",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üöÄ Trigger Reorganiza√ß√£o": {
      "main": [
        [
          {
            "node": "‚úÖ Resposta Final",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üíæ Salvar Soja": {
      "main": [
        [
          {
            "node": "üîÑ Consolidar Resultados",
            "type": "main",
            "index": 2
          }
        ]
      ]
    },
    "üíæ Salvar Madeira": {
      "main": [
        [
          {
            "node": "üîÑ Consolidar Resultados",
            "type": "main",
            "index": 3
          }
        ]
      ]
    },
    "üíæ Salvar Carbono": {
      "main": [
        [
          {
            "node": "üîÑ Consolidar Resultados",
            "type": "main",
            "index": 4
          }
        ]
      ]
    },
    "üåê Buscar Carbono": {
      "main": [
        [
          {
            "node": "üîç Extrair Pre√ßo Carbono",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üîç Extrair Pre√ßo Carbono": {
      "main": [
        [
          {
            "node": "‚öôÔ∏è Processar Carbono",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üåê Buscar Madeira": {
      "main": [
        [
          {
            "node": "üîç Extrair Pre√ßo Madeira",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "‚öôÔ∏è Processar Carbono": {
      "main": [
        [
          {
            "node": "üíæ Salvar Carbono",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üåê Buscar USD/BRL": {
      "main": [
        [
          {
            "node": "üîç Extrair Pre√ßo USD/BRL",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üîç Extrair Pre√ßo USD/BRL": {
      "main": [
        [
          {
            "node": "‚öôÔ∏è Processar USD/BRL",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üîç Extrair Pre√ßo EUR/BRL": {
      "main": [
        [
          {
            "node": "‚öôÔ∏è Processar EUR/BRL",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üåê Buscar EUR/BRL": {
      "main": [
        [
          {
            "node": "üîç Extrair Pre√ßo EUR/BRL",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "‚öôÔ∏è Processar EUR/BRL": {
      "main": [
        [
          {
            "node": "üíæ Salvar EUR/BRL",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "‚öôÔ∏è Processar USD/BRL": {
      "main": [
        [
          {
            "node": "üíæ Salvar USD/BRL",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üîç Extrair Pre√ßo Madeira": {
      "main": [
        [
          {
            "node": "‚öôÔ∏è Processar Madeira",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "‚öôÔ∏è Processar Madeira": {
      "main": [
        [
          {
            "node": "üíæ Salvar Madeira",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "‚öôÔ∏è Processar Boi": {
      "main": [
        [
          {
            "node": "üíæ Salvar Boi",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üíæ Salvar EUR/BRL": {
      "main": [
        [
          {
            "node": "üîÑ Consolidar Resultados",
            "type": "main",
            "index": 5
          }
        ]
      ]
    },
    "üíæ Salvar USD/BRL": {
      "main": [
        [
          {
            "node": "üîÑ Consolidar Resultados",
            "type": "main",
            "index": 6
          }
        ]
      ]
    },
    "‚úÖ Resposta Final": {
      "main": []
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "28881e6e-5e8b-4f1c-94a1-b24d68b75c5e",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "1251493b13fd80ac00a69313baa1980de5de2f519129b378ad0ae93377d8c920"
  },
  "id": "yH808WbuQsKEFtJv",
  "tags": [
    {
      "name": "automated-integration",
      "id": "zZqtGscOqnZ9yYLR",
      "createdAt": "2025-09-08T21:09:53.146Z",
      "updatedAt": "2025-09-08T21:09:53.146Z"
    },
    {
      "name": "firebase-reorganization",
      "id": "o5CyELMAqkiwl9xM",
      "createdAt": "2025-09-08T21:09:52.503Z",
      "updatedAt": "2025-09-08T21:09:52.503Z"
    },
    {
      "name": "commodities-optimized",
      "id": "yPq3IGUmp2KkWLer",
      "createdAt": "2025-09-08T21:09:52.755Z",
      "updatedAt": "2025-09-08T21:09:52.755Z"
    }
  ]
}